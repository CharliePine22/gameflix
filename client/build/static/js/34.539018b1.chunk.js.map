{"version":3,"file":"static/js/34.539018b1.chunk.js","mappings":"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","sources":["components/Placeholder/Placeholder.js","components/Row/Row.js","hooks/useFetchBanner.js","components/Banner/Banner.js","components/Nav/NavDropdown.js","components/Login/Profiles/ProfileEditor/AccountEditor.js","components/Nav/Nav.js","components/MainRow/MainRow.js","components/TrendingRow/TrendingRow.js","components/NewReleases/NewReleases.js","components/SpotifyPlayback/SpotifyPlayback.js","requestsIGDB.js","components/Dashboard/Dashboard.js","hooks/useFetchGenres.js","hooks/useSpotifyAuth.js","hooks/useSteamAuth.js"],"sourcesContent":["import React from 'react';\r\nimport './Placeholder.css';\r\n\r\nconst Placeholder = ({ delay }) => {\r\n  return (\r\n    <div\r\n      className='placeholder'\r\n      style={{ animationDelay: `${delay}ms` }}\r\n      onClick={(e) => e.stopPropagation()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Placeholder;\r\n","import React, { useState, lazy, Suspense } from 'react';\r\nimport './Row.css';\r\nimport axios from 'axios';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport {\r\n  FaPlay,\r\n  FaPause,\r\n  FaPlusSquare,\r\n  FaGamepad,\r\n  FaMusic,\r\n} from 'react-icons/fa';\r\nimport { CiSquareMore } from 'react-icons/ci';\r\n// ESRB Logos\r\nimport eRating from '../../assets/images/ESRB_E.png';\r\nimport tRating from '../../assets/images/ESRB_T.png';\r\nimport mRating from '../../assets/images/ESRB_M.png';\r\nimport rpRating from '../../assets/images/ESRB_RP.png';\r\n\r\nconst GamePreview = lazy(() => import('./GamePreview/GamePreview'));\r\n\r\nfunction Row({\r\n  activeProfile,\r\n  spotifyToken,\r\n  genreDetails,\r\n  playTrack,\r\n  currentTrack,\r\n  setGameDetails,\r\n  resumePlayback,\r\n  pausePlayback,\r\n  isPlaying,\r\n  currentGameOpen,\r\n  closeGameWindow,\r\n  openGame,\r\n  addGame,\r\n  setNotification,\r\n  loading,\r\n  hoverGame,\r\n  hoverAway,\r\n  currentHover,\r\n}) {\r\n  const [currentGame, setCurrentGame] = useState(null);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const [currentPlaylist, setCurrentPlaylist] = useState([]);\r\n  const [viewingSoundtrack, setViewingSoundtrack] = useState(false);\r\n  const [viewingPreview, setViewingPreview] = useState(false);\r\n  const [playlistLoading, setPlaylistLoading] = useState(false);\r\n\r\n  const genreTitle = genreDetails[0][0];\r\n  const genreList = genreDetails[0][1];\r\n\r\n  const fetchGameOST = async (game) => {\r\n    if (!spotifyToken) {\r\n      setCurrentGame(null);\r\n      setNotification(\r\n        'ERROR',\r\n        'Please connect to Spotify through the nav dropdown!'\r\n      );\r\n      return;\r\n    }\r\n    try {\r\n      setPlaylistLoading(true);\r\n      const request = await axios.get(`${baseURL}/app/spotify_album`, {\r\n        params: {\r\n          game: game.name,\r\n          token: spotifyToken,\r\n          baseURL,\r\n        },\r\n      });\r\n      if (request.data.status !== 'OK') {\r\n        console.log(request.data);\r\n\r\n        setPlaylistLoading(false);\r\n      } else {\r\n        setCurrentGame(game.id);\r\n        setCurrentPlaylist(request.data.tracks);\r\n        setViewingSoundtrack(true);\r\n        setPlaylistLoading(false);\r\n\r\n        return request.data.tracks;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      console.log('OST FETCH ISSUE');\r\n      setPlaylistLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // Grab trailer video from selected game\r\n  const fetchGameDetails = (game) => {\r\n    closeGameWindow();\r\n    setGameDetails(game);\r\n  };\r\n\r\n  const addGameHandler = (e, game) => {\r\n    e.stopPropagation();\r\n    addGame(game);\r\n  };\r\n\r\n  const viewGameSoundtrack = (e, game) => {\r\n    e.stopPropagation();\r\n    closeGameWindow();\r\n    setCurrentGame(game.id);\r\n    fetchGameOST(game);\r\n  };\r\n\r\n  const closeGameSoundtrack = (e) => {\r\n    e.stopPropagation();\r\n    setCurrentGame(null);\r\n    setViewingSoundtrack(false);\r\n  };\r\n\r\n  const selectTrackHandler = (e, track) => {\r\n    e.stopPropagation();\r\n    if (currentTrack !== null && track.name == currentTrack.name) {\r\n      resumePlayback();\r\n    }\r\n    playTrack(track);\r\n  };\r\n\r\n  const formatTrackTitle = (title) => {\r\n    return title.split('-')[0].split('(')[0];\r\n  };\r\n\r\n  // Return a ESRB rating picture according to fetched game\r\n  const determineESRB = (game) => {\r\n    if (!game || !game.age_ratings)\r\n      return <img className='row__poster__esrb_img' src={rpRating} />;\r\n    const hasRating = game?.age_ratings.filter(\r\n      (rating) => rating.category == 1 || rating.category == 2\r\n    );\r\n\r\n    if (hasRating.length == 0 || !game.age_ratings)\r\n      return <img className='row__poster__esrb_img' src={rpRating} />;\r\n    const esrb = hasRating[0].rating;\r\n\r\n    switch (esrb) {\r\n      case 1:\r\n      case 2:\r\n      case 8:\r\n      case 9:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb E rating'\r\n            src={eRating}\r\n          />\r\n        );\r\n      case 3:\r\n      case 4:\r\n      case 10:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb T rating'\r\n            src={tRating}\r\n          />\r\n        );\r\n      case 5:\r\n      case 11:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb M rating'\r\n            src={mRating}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb RP rating'\r\n            src={rpRating}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='row'>\r\n      <h2 className='row__title'>{genreTitle}</h2>\r\n      <div className='row__posters'>\r\n        {genreList.map(\r\n          (game) =>\r\n            game.cover !== undefined && (\r\n              <React.Fragment key={game.id}>\r\n                {!loading && (\r\n                  <div\r\n                    className={`row__poster_wrapper ${\r\n                      currentGameOpen == game.id && 'viewing_game'\r\n                    }`}\r\n                    style={{\r\n                      zIndex:\r\n                        currentGameOpen !== game.id &&\r\n                        currentGameOpen !== null &&\r\n                        '-1',\r\n                    }}\r\n                    onMouseOver={() => hoverGame(game.id)}\r\n                    onMouseLeave={() =>\r\n                      viewingSoundtrack ? hoverGame(game.id) : hoverAway()\r\n                    }\r\n                  >\r\n                    {currentHover == game.id && !currentGameOpen && (\r\n                      <div className='row__blur_wrapper'>\r\n                        {!playlistLoading ? (\r\n                          <div\r\n                            className='row__blur_details'\r\n                            style={{\r\n                              display: currentGame == game.id && 'none',\r\n                            }}\r\n                          >\r\n                            {/* ADD GAME */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={(e) => addGameHandler(e, game)}\r\n                            >\r\n                              <FaPlusSquare className='blur_item_icon' />\r\n                              <p>Add</p>\r\n                            </div>\r\n                            {/* GET DETAILS */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={() => {\r\n                                fetchGameDetails(game);\r\n                              }}\r\n                            >\r\n                              <CiSquareMore className='blur_item_icon more' />\r\n                              <p>See Details</p>\r\n                            </div>\r\n                            {/* GET SOUNDTRACK */}\r\n                            <div\r\n                              onClick={(e) => viewGameSoundtrack(e, game)}\r\n                              className='row__blur_item'\r\n                            >\r\n                              <FaMusic className='blur_item_icon music' />\r\n                              <p>Play Soundtrack</p>\r\n                            </div>\r\n                            {/* VIEW 3D CASE */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={() => openGame(game)}\r\n                            >\r\n                              <FaGamepad className='blur_item_icon' />\r\n                              <p>View Case</p>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className='playlist_loading'>\r\n                            <div className='playlist_loading_dot' />\r\n                            <div className='playlist_loading_dot' />\r\n                            <div className='playlist_loading_dot' />\r\n                          </div>\r\n                        )}\r\n                        {viewingSoundtrack && currentGame == game.id && (\r\n                          <div className='soundtrack_container'>\r\n                            <span onClick={(e) => closeGameSoundtrack(e)}>\r\n                              ←\r\n                            </span>\r\n                            <h3>Spotify OST</h3>\r\n                            <ul className='soundtracks'>\r\n                              {currentPlaylist?.map((track) => (\r\n                                <li\r\n                                  key={track.id}\r\n                                  onClick={(e) => e.stopPropagation()}\r\n                                  className='soundtrack'\r\n                                >\r\n                                  <p\r\n                                    style={{\r\n                                      color:\r\n                                        currentTrack !== null &&\r\n                                        currentTrack.name == track.name\r\n                                          ? 'green'\r\n                                          : 'white',\r\n                                      fontWeight:\r\n                                        currentTrack !== null &&\r\n                                        currentTrack.name == track.name\r\n                                          ? '600'\r\n                                          : '400',\r\n                                    }}\r\n                                  >\r\n                                    {formatTrackTitle(track.name)}\r\n                                  </p>\r\n                                  {(currentTrack !== null &&\r\n                                    currentTrack.name !== track.name) ||\r\n                                  !isPlaying ? (\r\n                                    <FaPlay\r\n                                      onClick={(e) =>\r\n                                        selectTrackHandler(e, track)\r\n                                      }\r\n                                    />\r\n                                  ) : (\r\n                                    <FaPause onClick={(e) => pausePlayback()} />\r\n                                  )}\r\n                                </li>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                    <div className='row__poster_container'>\r\n                      <>\r\n                        {/* FRONT OF POSTER */}\r\n                        <div\r\n                          className='row__poster_front'\r\n                          style={{\r\n                            transformStyle: currentGameOpen && 'revert',\r\n                          }}\r\n                        >\r\n                          <img\r\n                            loading='lazy'\r\n                            className='row__poster'\r\n                            src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                            alt={game.name + ' cover image'}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    </div>\r\n                    {currentGameOpen === game.id && (\r\n                      <Suspense fallback={<>...</>}>\r\n                        <GamePreview\r\n                          game={game}\r\n                          gameCover={`https://images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover?.image_id}.jpg`}\r\n                          ratingImage={determineESRB(game)}\r\n                          addGame={addGameHandler}\r\n                          viewingPreview={viewingPreview}\r\n                          openGame={() => setViewingPreview(true)}\r\n                          closeGame={() => setViewingPreview(false)}\r\n                        />\r\n                      </Suspense>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </React.Fragment>\r\n            )\r\n        )}\r\n        {loading && (\r\n          <div className='row__loading_container'>\r\n            {[...Array(10)].map((item, i) => (\r\n              <div key={i} className='row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useFetchBanner = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [bannerGamesList, setBannerGamesList] = useState([]);\r\n  const [currentGame, setCurrentGame] = useState('');\r\n  const [currentGameTrailer, setCurrentGameTrailer] = useState('');\r\n  const [serverError, setServerError] = useState(null);\r\n  const twitchToken = localStorage.getItem('twitch_auth');\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  const fetchData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/search_game`, {\r\n        token: twitchToken,\r\n        gameName: '',\r\n      });\r\n      const filteredList = await request.data.sort(function (a, b) {\r\n        return b.rating - a.rating;\r\n      });\r\n      const selectedGame =\r\n        filteredList[Math.floor(Math.random() * request.data.length - 1)];\r\n      setBannerGamesList(filteredList);\r\n      setCurrentGame(selectedGame);\r\n      let trailer = selectedGame.videos.find((video) =>\r\n        video.name.includes('Trailer')\r\n      );\r\n      setCurrentGameTrailer(\r\n        `https://www.youtube.com/watch?v=${trailer.video_id}`\r\n      );\r\n\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setServerError(error);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken || bannerGamesList.length > 0) return;\r\n\r\n    fetchData();\r\n  }, [twitchToken]);\r\n\r\n  useEffect(() => {\r\n    if (!serverError) return;\r\n    fetchData();\r\n  }, [serverError]);\r\n\r\n  const displayNewBanner = () => {\r\n    const newGame =\r\n      bannerGamesList[Math.floor(Math.random() * bannerGamesList.length - 1)];\r\n    const newGameTrailer = newGame.videos.find((video) =>\r\n      video.name.includes('Trailer')\r\n    );\r\n    setCurrentGame(newGame);\r\n    setCurrentGameTrailer(\r\n      `https://www.youtube.com/watch?v=${newGameTrailer.video_id}`\r\n    );\r\n    return;\r\n  };\r\n\r\n  return {\r\n    isLoading,\r\n    serverError,\r\n    currentGame,\r\n    currentGameTrailer,\r\n    displayNewBanner,\r\n  };\r\n};\r\n\r\nexport default useFetchBanner;\r\n","import './Banner.css';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { BiRefresh, BiVolumeMute, BiVolumeFull } from 'react-icons/bi';\r\nimport useFetchBanner from '../../hooks/useFetchBanner';\r\nimport ReactPlayer from 'react-player/youtube';\r\n\r\nfunction Banner({ setGameDetails, addGame, activeProfile }) {\r\n  const bannerGame = useFetchBanner();\r\n  const bannerRef = useRef();\r\n\r\n  // Don't allow user to add game if already in collection\r\n  const exists =\r\n    activeProfile.collection &&\r\n    activeProfile.collection.some(\r\n      (title) => title?.id === bannerGame.currentGame.id\r\n    );\r\n  const [mutedVideo, setMutedVideo] = useState(true);\r\n\r\n  const [playingVideo, setPlayingVideo] = useState(true);\r\n  const [trailerEnded, setTrailerEnded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (bannerGame.isLoading || !bannerRef) return;\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setPlayingVideo(true);\r\n        } else {\r\n          setPlayingVideo(false);\r\n        }\r\n      },\r\n      {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.1,\r\n      }\r\n    );\r\n    if (bannerRef.current) {\r\n      observer.observe(bannerRef.current);\r\n    }\r\n  }, [bannerRef, bannerGame.isLoading, bannerGame.currentGameTrailer]);\r\n\r\n  useEffect(() => {\r\n    setPlayingVideo(true);\r\n  }, [bannerGame.currentGameTrailer]);\r\n\r\n  // If the game description is longer that 150 characters, replace the reaminder with the ellipsis '...'\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n  };\r\n\r\n  // Wait for game deatils to finish loading or the game name shows up undefined\r\n  // Undefined is a game name apart of the dataset and will display jibberish\r\n  if (bannerGame.isLoading) {\r\n    return (\r\n      <div className='banner__loading'>\r\n        <div className='banner__spinner' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <header className='banner' key={bannerGame.currentGame.id}>\r\n      <div ref={bannerRef} style={{ width: '100%', height: '100%' }}>\r\n        {bannerGame.currentGameTrailer && (\r\n          <ReactPlayer\r\n            className='banner__trailer'\r\n            url={bannerGame.currentGameTrailer}\r\n            playing={playingVideo ? true : false}\r\n            muted={mutedVideo ? true : false}\r\n            onEnded={() => setTrailerEnded(true)}\r\n            light={\r\n              trailerEnded\r\n                ? `//images.igdb.com/igdb/image/upload/t_1080p_2x/${bannerGame.currentGame.cover?.image_id}.jpg`\r\n                : false\r\n            }\r\n          />\r\n        )}\r\n\r\n        <div className='banner__contents'>\r\n          <h1 className='banner__title'>{bannerGame.currentGame?.name}</h1>\r\n\r\n          <div className='banner__buttons'>\r\n            <button\r\n              className='banner__button'\r\n              onClick={() => setGameDetails(bannerGame.currentGame)}\r\n            >\r\n              See Details\r\n            </button>\r\n            {!exists && (\r\n              <button\r\n                className='banner__button'\r\n                onClick={() => addGame(bannerGame.currentGame)}\r\n              >\r\n                Add to My List\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <h1 className='banner__description'>\r\n            {truncate(bannerGame.currentGame?.summary, 150)}\r\n          </h1>\r\n        </div>\r\n        <div className='banner--fadeBottom' />\r\n\r\n        {\r\n          <BiRefresh\r\n            size={35}\r\n            className='banner__refresh_icon'\r\n            onClick={bannerGame.displayNewBanner}\r\n          />\r\n        }\r\n        {mutedVideo ? (\r\n          <BiVolumeMute\r\n            size={27}\r\n            className='banner__mute_btn'\r\n            onClick={() => setMutedVideo(false)}\r\n          />\r\n        ) : (\r\n          <BiVolumeFull\r\n            size={27}\r\n            className='banner__volume_btn'\r\n            onClick={() => setMutedVideo(true)}\r\n          />\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './NavDropdown.css';\r\nimport { Link } from 'react-router-dom';\r\n// React Icons\r\nimport {\r\n  FaSortUp,\r\n  FaSpotify,\r\n  FaUserEdit,\r\n  FaPlaystation,\r\n  FaGamepad,\r\n} from 'react-icons/fa';\r\nimport { IoSettingsOutline } from 'react-icons/io5';\r\nimport { MdEdit } from 'react-icons/md';\r\n\r\nimport steamAuthBtn from '../../assets/images/steam-auth-btn.png';\r\n\r\nconst SPOTIFY_AUTH_URL = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_SPOTIFY_CLIENT_ID}&response_type=code&redirect_uri=${process.env.REACT_APP_BASE_URL}&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state`;\r\n\r\nconst NavDropdown = (props) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const allProfiles = props.allProfiles;\r\n\r\n  // Listens for escape key press to close nav dropdown\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        props.closeNavDropdown();\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  // Change current user\r\n  const changeUserHandler = (user) => {\r\n    props.changeProfile(user);\r\n  };\r\n\r\n  const generatePlaystationTitles = async () => {\r\n    try {\r\n      const request = await axios.get(`${baseURL}/playstation/user_titles`);\r\n      console.log(request.data);\r\n      for (let game of request.data) {\r\n        for (let i = 0; i < game.earnedTrophies.length; i++) {\r\n          if (game.earnedTrophies[i].earned) {\r\n            game.allTrophies[i].earned = true;\r\n          } else game.allTrophies[i].earned = false;\r\n        }\r\n      }\r\n\r\n      props.currentCollection.filter((ownedGame) => {\r\n        const inCollection = request.data.some((game) => {\r\n          if (ownedGame.name.toLowerCase() === game.name.toLowerCase()) {\r\n            ownedGame.trophies = game.allTrophies;\r\n            axios.put(`${baseURL}/app/update_game_trophies`, {\r\n              email: localStorage.getItem('user'),\r\n              name: props.activeProfile.name,\r\n              gameId: ownedGame.id,\r\n              trophies: game.allTrophies,\r\n            });\r\n          } else {\r\n            console.log('New game bruh');\r\n            axios.post(`${baseURL}/app/update_collection`, {\r\n              email: localStorage.getItem('user'),\r\n              currentProfile: localStorage.getItem('profile'),\r\n              name: game.name,\r\n              id: game.id,\r\n              imageURL: `//images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover.image_id}.jpg`,\r\n              playtime: 0,\r\n              origin: 'gameflix',\r\n            });\r\n          }\r\n        });\r\n        return inCollection;\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      return err;\r\n    }\r\n  };\r\n\r\n  allProfiles.sort((a, b) => (a.name - b.name ? 1 : -1));\r\n\r\n  return (\r\n    <div className='dropdown'>\r\n      <FaSortUp className='dropdown__arrow' />\r\n      <div className='dropdown__profiles'>\r\n        <ul className='dropdown__profiles_list'>\r\n          {allProfiles.map((user) => {\r\n            if (user.name !== props.activeProfile.name) {\r\n              return (\r\n                <li\r\n                  className='dropdown__profiles_item'\r\n                  key={user.name}\r\n                  onClick={() => changeUserHandler(user)}\r\n                >\r\n                  <img\r\n                    src={user.avatar}\r\n                    className='dropdown__profile_icon'\r\n                    alt={`${user.name} avatar icon`}\r\n                    style={{ backgroundColor: user.color }}\r\n                  />\r\n                  <p className='dropdown__profile_name'>{user.name}</p>\r\n                </li>\r\n              );\r\n            }\r\n          })}\r\n          <li className='dropdown__profiles_item' onClick={props.toProfilePage}>\r\n            <span className='dropdown__profiles_manage'>\r\n              <MdEdit size={22} />\r\n            </span>\r\n            <p className='dropdown__profile_name'>Manage Profiles</p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className='dropdown__settings'>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={() => props.editProfile()}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaUserEdit size={18} />\r\n          </span>\r\n          <p>My Profile</p>\r\n        </div>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={() => props.viewCollection()}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaGamepad size={18} />\r\n          </span>\r\n          <p>My Collection</p>\r\n        </div>\r\n        <div className='dropdown__settings_item' onClick={props.editAccount}>\r\n          <span className='dropdown__settings_item_icon'>\r\n            <IoSettingsOutline size={18} />\r\n          </span>\r\n          <p>Account Settings</p>\r\n        </div>\r\n      </div>\r\n      <div className='dropdown__settings'>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={generatePlaystationTitles}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaPlaystation size={18} />\r\n          </span>\r\n          <p>Link Playstation</p>\r\n        </div>\r\n        <a href={SPOTIFY_AUTH_URL} className='dropdown__settings_item'>\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaSpotify\r\n              size={18}\r\n              style={{ color: props.spotifyToken ? '#1DB954' : '#FFF' }}\r\n            />\r\n          </span>\r\n          <p>Spotify Authentication</p>\r\n        </a>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          style={{\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            paddingBottom: '0',\r\n            paddingLeft: '0',\r\n          }}\r\n        >\r\n          <Link to={`http://localhost:3001/api/auth/steam`}>\r\n            <img className='steam_btn' src={steamAuthBtn} />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div className='dropdown__settings_links'>\r\n        <Link\r\n          to='/login'\r\n          className='dropdown__settings_link'\r\n          onClick={props.logoutHandler}\r\n        >\r\n          Sign out of GameFlix\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavDropdown;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { AiFillEyeInvisible, AiFillEye } from 'react-icons/ai';\r\nimport axios from 'axios';\r\n\r\nconst AccountEditor = ({\r\n  closeAccountSettings,\r\n  setLoggedUser,\r\n  currentUser,\r\n}) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const [deletingAccount, setDeletingAccount] = useState(false);\r\n  const [updateStatus, setUpdateStatus] = useState('');\r\n  // EMAIL STATES\r\n  const [emailValue, setEmailValue] = useState(currentUser.email);\r\n  const [newEmailValue, setNewEmailValue] = useState('');\r\n  let repeatValue = '';\r\n  const [changingEmail, setChangingEmail] = useState(false);\r\n  // PASSWORD STATES\r\n  const [passwordValue, setPasswordValue] = useState(currentUser.password);\r\n  const [hidePassword, setHidePassword] = useState(true);\r\n  const [newPasswordValue, setNewPasswordValue] = useState('');\r\n  const [changingPassword, setChangingPassword] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (hidePassword) {\r\n      const hiddenPassword = currentUser.password.replace(/./gi, '*');\r\n      setPasswordValue(hiddenPassword);\r\n    } else {\r\n      setPasswordValue(currentUser.password);\r\n    }\r\n  }, [hidePassword]);\r\n\r\n  const updateEmail = async (email) => {\r\n    setUpdateStatus('');\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/update_user_email`, {\r\n        originalEmail: currentUser.email,\r\n        newEmail: email,\r\n      });\r\n\r\n      if (request.data.status < 400) {\r\n        setLoggedUser(request.data.user);\r\n        setUpdateStatus({ type: 'success', message: request.data.message });\r\n        setEmailValue(request.data.user.email);\r\n        setNewEmailValue('');\r\n        setChangingEmail(false);\r\n      } else {\r\n        setUpdateStatus({ type: 'error', message: request.data.message });\r\n        setNewEmailValue('');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const emailChangeHandler = () => {\r\n    if (!changingEmail) {\r\n      setChangingEmail(true);\r\n      setChangingPassword(false);\r\n    } else {\r\n      if (newEmailValue !== '') {\r\n        updateEmail(newEmailValue);\r\n      } else {\r\n        setChangingEmail(false);\r\n        setNewEmailValue('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteAccountHandler = async () => {\r\n    try {\r\n      await axios.delete(`${baseURL}/app/delete_account`, {\r\n        data: { id: currentUser._id },\r\n      });\r\n      window.location = '/';\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('profile');\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const passwordChangeHandler = () => {\r\n    if (!changingPassword) {\r\n      setChangingPassword(true);\r\n      setChangingEmail(false);\r\n    } else {\r\n      if (newPasswordValue !== '') {\r\n        repeatValue = newEmailValue;\r\n      } else {\r\n        setChangingPassword(false);\r\n        setNewPasswordValue('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const determineEmailValidity = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/update_user_profile`, {\r\n        originalEmail: emailValue,\r\n        newEmail: newEmailValue,\r\n      });\r\n      console.log(request);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='profile_edit__container'>\r\n      <div className='profile_edit__header'>\r\n        <h3>GAMEFLIX</h3>\r\n      </div>\r\n      <div className='profile_edit__form_wrapper' style={{ height: '350px' }}>\r\n        <h3>Account Settings</h3>\r\n        <div className='form_container'>\r\n          <form className='account_edit__form'>\r\n            {/* EMAIL CONTAINER */}\r\n            <div className='account_email_container'>\r\n              {updateStatus.type == 'error' ? (\r\n                <p className='account_email_error'>{updateStatus.message}</p>\r\n              ) : (\r\n                <p className='account_email_success'>{updateStatus.message}</p>\r\n              )}\r\n              <h4\r\n                style={{ color: 'white', fontSize: '2rem', marginLeft: '2px' }}\r\n              >\r\n                Email\r\n              </h4>\r\n              <input\r\n                className='account_email_input'\r\n                onChange={(e) => setEmailValue(e.target.value)}\r\n                value={emailValue}\r\n              />\r\n\r\n              {/* NEW EMAIL */}\r\n              {changingEmail && (\r\n                <>\r\n                  <input\r\n                    className='account_email_input'\r\n                    onChange={(e) => setNewEmailValue(e.target.value)}\r\n                    value={newEmailValue}\r\n                    placeholder='Enter new email'\r\n                    autoFocus\r\n                  />\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => {\r\n                      setNewEmailValue('');\r\n                      setChangingEmail(false);\r\n                    }}\r\n                    className='account_email_save_btn'\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </>\r\n              )}\r\n\r\n              <button\r\n                type='button'\r\n                onClick={emailChangeHandler}\r\n                className='save_btn'\r\n              >\r\n                {!changingEmail ? 'Change Email' : 'Save Email'}\r\n              </button>\r\n            </div>\r\n\r\n            {/* PASSWORD CONTAINER */}\r\n            <div className='account_password_container'>\r\n              <h4\r\n                style={{ color: 'white', fontSize: '2rem', marginLeft: '2px' }}\r\n              >\r\n                Password\r\n              </h4>\r\n              <input\r\n                className='account_password_input'\r\n                onChange={(e) => setPasswordValue(e.target.value)}\r\n                value={passwordValue}\r\n              />\r\n              <span\r\n                className='account_password_visible_icon'\r\n                onClick={() => setHidePassword(!hidePassword)}\r\n              >\r\n                {!hidePassword ? <AiFillEye /> : <AiFillEyeInvisible />}\r\n              </span>\r\n\r\n              {/* NEW PASSWORD */}\r\n              {changingPassword && (\r\n                <>\r\n                  <input\r\n                    className='account_password_input'\r\n                    onChange={(e) => setNewPasswordValue(e.target.value)}\r\n                    value={newPasswordValue}\r\n                    placeholder='Enter new password'\r\n                    autoFocus\r\n                  />\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => {\r\n                      setNewPasswordValue('');\r\n                      setChangingPassword(false);\r\n                    }}\r\n                    className='account_password_save_btn'\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </>\r\n              )}\r\n              <button\r\n                type='button'\r\n                onClick={passwordChangeHandler}\r\n                className='save_btn'\r\n              >\r\n                {!changingPassword ? 'Change Password' : 'Save Password'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        {/* FORM ACTIONS */}\r\n        <div\r\n          className='form_actions'\r\n          style={{ justifyContent: 'space-between' }}\r\n        >\r\n          <button className='cancel_btn' onClick={closeAccountSettings}>\r\n            Back\r\n          </button>\r\n          <button\r\n            className='delete_account_btn'\r\n            onClick={() => setDeletingAccount(true)}\r\n          >\r\n            Delete Account\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {deletingAccount && (\r\n        <div className='delete_account_modal'>\r\n          <div className='delete_account_modal_content'>\r\n            <h4>Are you sure you want to delete your account?</h4>\r\n            <div className='delete_account_modal_actions'>\r\n              <div className='modal_action_option'>\r\n                <p>Yes</p>\r\n                <span\r\n                  className='video-game-button'\r\n                  onClick={deleteAccountHandler}\r\n                >\r\n                  A\r\n                </span>\r\n              </div>\r\n              <div className='modal_action_option'>\r\n                <p>No</p>\r\n                <span\r\n                  className='video-game-button'\r\n                  onClick={() => setDeletingAccount(false)}\r\n                >\r\n                  B\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountEditor;\r\n","import React, { useRef } from 'react';\r\nimport './Nav.css';\r\nimport logo from '../../assets/images/gameflix-logo.png';\r\nimport defaultAvatar from '../../assets/images/basic_avatar.png';\r\nimport { useEffect, useState } from 'react';\r\nimport { FaSistrix, FaAngleUp } from 'react-icons/fa';\r\nimport NavDropdown from './NavDropdown';\r\nimport ProfileEditor from '../Login/Profiles/ProfileEditor/ProfileEditor';\r\nimport AccountEditor from '../Login/Profiles/ProfileEditor/AccountEditor';\r\n\r\nfunction Nav(props) {\r\n  const [displayNav, setDisplayNav] = useState(false);\r\n  const [displayDropdown, setDisplayDropdown] = useState(false);\r\n  const [displaySearch, setDisplaySearch] = useState(false);\r\n  const searchRef = useRef('');\r\n  const [editingProfile, setEditingProfile] = useState(false);\r\n  const [editingAccount, setEditingAccount] = useState(false);\r\n\r\n  const profile = props.activeProfile;\r\n\r\n  const closeNavDropdown = () => {\r\n    setDisplayDropdown(false);\r\n  };\r\n\r\n  const closeSearch = () => {\r\n    if (searchRef.current.value.length > 0) {\r\n      return;\r\n    }\r\n    setDisplaySearch(false);\r\n  };\r\n\r\n  const formSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const searchValue = searchRef.current.value.trim();\r\n    if (searchValue.length == 0) return;\r\n    props.fetchSubmittedGame(searchValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // If the user scrolls down from the top of page, add a black background to the nav\r\n    const scrollNavListener = () => {\r\n      window.addEventListener('scroll', () => {\r\n        if (window.scrollY > 100) {\r\n          setDisplayNav(true);\r\n        } else setDisplayNav(false);\r\n      });\r\n    };\r\n    scrollNavListener();\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', scrollNavListener);\r\n    };\r\n  }, []);\r\n\r\n  const cancelEdit = () => {\r\n    document.body.style.overflowY = 'scroll';\r\n    setEditingProfile(false);\r\n    setEditingAccount(false);\r\n  };\r\n\r\n  const editProfileHandler = () => {\r\n    document.body.style.overflowY = 'hidden';\r\n    setEditingProfile(true);\r\n  };\r\n\r\n  const editAccountHandler = () => {\r\n    document.body.style.overflowY = 'hidden';\r\n    setEditingAccount(true);\r\n  };\r\n\r\n  const saveEdit = () => {\r\n    props.saveEdit();\r\n    setEditingProfile(false);\r\n  };\r\n\r\n  // Handles escape key press for search input\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        // If the search input is open, close it\r\n        setDisplaySearch(false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${displayNav && 'nav__hide'}`}>\r\n      {editingProfile && (\r\n        <div className='nav_edit_profile'>\r\n          <ProfileEditor\r\n            currentProfile={profile}\r\n            userEmail={props.currentUser.email}\r\n            viewAllProfiles={cancelEdit}\r\n            saveEdit={saveEdit}\r\n            getProfile={(test) => props.selectProfile(test)}\r\n            twitchToken={props.twitchToken}\r\n          />\r\n        </div>\r\n      )}\r\n      {editingAccount && (\r\n        <div className='nav_edit_profile'>\r\n          {' '}\r\n          <AccountEditor\r\n            closeAccountSettings={cancelEdit}\r\n            setLoggedUser={(user) => props.setLoggedUser(user)}\r\n            currentUser={props.currentUser}\r\n          />{' '}\r\n        </div>\r\n      )}\r\n      <img\r\n        className='nav__logo'\r\n        src={logo}\r\n        alt='GameFlix Logo'\r\n        onClick={() => (window.location = '/')}\r\n      />\r\n      <div className='nav__right'>\r\n        <div className='nav__search'>\r\n          {displaySearch && (\r\n            <form className='nav__search_form' onSubmit={formSubmitHandler}>\r\n              <input\r\n                ref={searchRef}\r\n                autoFocus\r\n                type='text'\r\n                placeholder='Titles, publishers, genres'\r\n                defaultValue={\r\n                  props.searchedGame ? `${props.searchedGame.name}` : ''\r\n                }\r\n                onBlur={closeSearch}\r\n              />\r\n            </form>\r\n          )}\r\n          <FaSistrix\r\n            className={`nav__search_icon ${displaySearch && 'search_active'}`}\r\n            onClick={() => setDisplaySearch(!displaySearch)}\r\n          />\r\n        </div>\r\n        <div\r\n          className='nav__actions'\r\n          onMouseLeave={() => setDisplayDropdown(false)}\r\n        >\r\n          <div\r\n            className='nav__avatar_container'\r\n            onMouseOver={() => setDisplayDropdown(true)}\r\n          >\r\n            <img\r\n              className='nav__avatar'\r\n              src={profile.avatar ? profile.avatar : defaultAvatar}\r\n              // style={{ backgroundColor: profile.color }}\r\n              alt=\"User's avatar\"\r\n            />\r\n          </div>\r\n          <FaAngleUp\r\n            className='nav__avatar_arrow'\r\n            style={{\r\n              transform: `${\r\n                displayDropdown ? 'rotate(180deg)' : 'rotate(0deg)'\r\n              }`,\r\n            }}\r\n          />\r\n          {/* <NavDropdown /> */}\r\n          {displayDropdown && (\r\n            <NavDropdown\r\n              changeProfile={props.changeUser}\r\n              activeProfile={profile}\r\n              allProfiles={props.currentUser.profiles}\r\n              logoutHandler={props.onLogout}\r\n              closeNavDropdown={closeNavDropdown}\r\n              toProfilePage={props.toProfilePage}\r\n              spotifyToken={props.spotifyToken}\r\n              editProfile={editProfileHandler}\r\n              editAccount={editAccountHandler}\r\n              updateCollection={props.updateCollection}\r\n              currentCollection={props.currentCollection}\r\n              viewCollection={props.viewCollection}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './MainRow.css';\r\nimport axios from 'axios';\r\nimport { FaAngleUp } from 'react-icons/fa';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\n\r\nconst MainRow = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [currentFilter, setCurrentFilter] = useState('Week');\r\n  const [changingFilter, setChangingFilter] = useState(false);\r\n  const [currentlyViewing, setCurrentlyViewing] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  let todaysDate = new Date();\r\n  const weekDateFormat = Math.floor(\r\n    new Date(todaysDate.getTime() + 7 * 24 * 60 * 60 * 1000) / 1000\r\n  );\r\n  const monthDateFormat = Math.floor(\r\n    new Date(\r\n      new Date(weekDateFormat * 1000).setMonth(\r\n        new Date(weekDateFormat * 1000).getMonth() + 1\r\n      )\r\n    ).getTime() / 1000\r\n  );\r\n  const yearDateFormat = Math.floor(\r\n    new Date(\r\n      new Date(monthDateFormat * 1000).setMonth(\r\n        new Date(monthDateFormat * 1000).getMonth() + 12\r\n      )\r\n    ).getTime() / 1000\r\n  );\r\n\r\n  // use pagination (scroll api) to get all game titles and year. Maybe get it every 24 hours using a cron job. Cache it locally and use that to autocomplete game titles. That's what we do internally.\r\n\r\n  const filterUniques = (list) => {\r\n    const uniques = [];\r\n    const filteredList = [];\r\n    list.map((game) => {\r\n      if (uniques.indexOf(game.game.name) === -1) {\r\n        uniques.push(game.game.name);\r\n        filteredList.push(game);\r\n      }\r\n    });\r\n    return filteredList;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Grab upcoming games based on current date filter\r\n    if (!twitchToken) return;\r\n    setLoading(true);\r\n    async function fetchData() {\r\n      let startDate;\r\n      let targetDate;\r\n\r\n      switch (currentFilter) {\r\n        case 'Month':\r\n          startDate = weekDateFormat;\r\n          targetDate = monthDateFormat;\r\n          break;\r\n        case 'Year':\r\n          startDate = monthDateFormat;\r\n          targetDate = yearDateFormat;\r\n          break;\r\n        default:\r\n          startDate = Math.floor(todaysDate.getTime() / 1000);\r\n          targetDate = weekDateFormat;\r\n          break;\r\n      }\r\n\r\n      try {\r\n        const retries = 3;\r\n        for (let i = 0; i < retries; i++) {\r\n          try {\r\n            const request = await axios.post(`${baseURL}/app/upcoming`, {\r\n              token: twitchToken,\r\n              currentDate: startDate,\r\n              targetDate,\r\n            });\r\n            setGames(filterUniques(request.data));\r\n            setLoading(false);\r\n            break;\r\n          } catch (error) {\r\n            console.log('Issue fetching data');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [currentFilter, twitchToken]);\r\n\r\n  // Handler to change the filter type (Week, Month, Year)\r\n  const changeFilterDate = (e) => {\r\n    setCurrentFilter(e.target.innerText);\r\n    setChangingFilter(false);\r\n  };\r\n\r\n  // Convert the YYYY-MM-DD to Month, Day, Year\r\n  const convertDate = (date) => {\r\n    let months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December',\r\n    ];\r\n\r\n    // Replace hypens with dashes to get correct date\r\n    // Hypens returned the date previous from current due to some weird Date bug\r\n    let now = new Date(date.replace(/-/g, '/'));\r\n    let currentDay = now.getDate();\r\n    let formattedDay;\r\n\r\n    // Give the numbered day the appropriate abbriviation\r\n    switch (currentDay) {\r\n      case 1:\r\n      case 21:\r\n      case 31:\r\n        formattedDay = currentDay + 'st';\r\n        break;\r\n      case 2:\r\n      case 22:\r\n        formattedDay = currentDay + 'nd';\r\n        break;\r\n      case 3:\r\n      case 23:\r\n        formattedDay = currentDay + 'rd';\r\n        break;\r\n      // Most days have the th ending (28th) so set as default\r\n      default:\r\n        formattedDay = currentDay + 'th';\r\n        break;\r\n    }\r\n    return (\r\n      months[now.getMonth()] + ' ' + formattedDay + ', ' + now.getFullYear()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onMouseOver={() => setCurrentlyViewing(true)}\r\n      onMouseOut={() => setCurrentlyViewing(false)}\r\n      className='main_row'\r\n    >\r\n      <div\r\n        className='main_row__filters'\r\n        onMouseLeave={() => setChangingFilter(false)}\r\n      >\r\n        <h2>Coming Soon</h2>\r\n        {/* Filter Type */}\r\n        <p\r\n          className='filters_filter'\r\n          onMouseOver={() => setChangingFilter(true)}\r\n        >\r\n          {currentFilter}{' '}\r\n          <FaAngleUp\r\n            size={10}\r\n            className={changingFilter ? 'arrow_active' : 'arrow'}\r\n          />\r\n        </p>{' '}\r\n        {changingFilter && (\r\n          <div className='filter_options'>\r\n            <ul>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Week' ? 'white' : '',\r\n                  color: currentFilter == 'Week' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Week\r\n              </li>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Month' ? 'white' : '',\r\n                  color: currentFilter == 'Month' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Month\r\n              </li>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Year' ? 'white' : '',\r\n                  color: currentFilter == 'Year' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Year\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className='main_row__row_posters'>\r\n        {games &&\r\n          !loading &&\r\n          games.map((game, i) => (\r\n            <div\r\n              className={`main_row__poster_container ${\r\n                currentlyViewing && 'dimmed'\r\n              }`}\r\n              onClick={() => setGameDetails(game.game)}\r\n              key={game.id}\r\n            >\r\n              <h4 className='main__poster_released'>\r\n                {convertDate(game.human)}\r\n              </h4>\r\n              <img\r\n                key={game.id}\r\n                className='main_poster'\r\n                src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.game.cover?.image_id}.jpg`}\r\n                alt={game.name}\r\n              />\r\n            </div>\r\n          ))}\r\n        {loading && (\r\n          <div className='main_row__loading_container'>\r\n            {[...Array(4)].map((item, i) => (\r\n              <div key={i} className='main_row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainRow;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './TrendingRow.css';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport axios from 'axios';\r\n\r\nconst TrendingRow = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  let currentDate = Math.floor(new Date().getTime() / 1000);\r\n  let trendingTitlesFetched = JSON.parse(sessionStorage.getItem('trending'));\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken) return;\r\n    if (trendingTitlesFetched && trendingTitlesFetched.length > 0) {\r\n      setGames(trendingTitlesFetched);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    // Grab games from each genre\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      try {\r\n        let trendingTitles = [];\r\n        const request = await axios.post(`${baseURL}/app/trending`, {\r\n          token: twitchToken,\r\n          currentDate: currentDate,\r\n        });\r\n\r\n        const uniqueTitles = new Set();\r\n        request.data.filter(\r\n          (item) =>\r\n            !uniqueTitles.has(item.game.id) &&\r\n            uniqueTitles.add(item.game.id).add(item.game)\r\n        );\r\n\r\n        uniqueTitles.forEach(\r\n          (game) => typeof game == 'object' && trendingTitles.push(game)\r\n        );\r\n\r\n        trendingTitles.sort(\r\n          (a, b) =>\r\n            b.release_dates.findLast((dates) => dates.date) -\r\n              a.release_dates.findLast((dates) => dates.date) ||\r\n            b.hypes - a.hypes\r\n        );\r\n\r\n        setGames(trendingTitles.slice(0, 10));\r\n\r\n        sessionStorage.setItem(\r\n          'trending',\r\n          JSON.stringify(trendingTitles.slice(0, 10))\r\n        );\r\n        setLoading(false);\r\n        return request;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [twitchToken]);\r\n\r\n  if (loading)\r\n    return (\r\n      <div className='row__loading_container'>\r\n        {[...Array(10)].map((item, i) => (\r\n          <div key={i} className='trending_row__placeholder__wrapper'>\r\n            <Placeholder key={i} delay={i} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className='trending_row'>\r\n      <h2>TRENDING TITLES</h2>\r\n\r\n      <div className='trending_row__posters'>\r\n        {games.map((game, i) => (\r\n          <React.Fragment key={game.name}>\r\n            <div className='trending_row__poster_wrapper'>\r\n              <div className='trending_row__rank'>{i + 1}</div>\r\n              <div\r\n                className='trending_row__poster_container'\r\n                style={{\r\n                  marginLeft: (i == 9 && '160px') || (i == 0 && '65px'),\r\n                }}\r\n                onClick={() => setGameDetails(game)}\r\n              >\r\n                {' '}\r\n                {!loading && (\r\n                  <>\r\n                    <img\r\n                      loading='lazy'\r\n                      className='trending_row__poster'\r\n                      src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                      alt={game.name}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendingRow;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './NewReleases.css';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport GamePreview from '../Row/GamePreview/GamePreview';\r\nimport axios from 'axios';\r\n\r\nconst NewReleases = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const newReleases = [];\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken) return;\r\n\r\n    async function fetchNewReleases() {\r\n      setLoading(true);\r\n\r\n      try {\r\n        // const scrape_request = await axios.get(`${baseURL}/steam/new_releases`);\r\n        // console.log(scrape_request);\r\n        return;\r\n        // const newReleasesData = await Promise.all(\r\n        //   newReleases.map(async (game) => {\r\n        //     const res = await axios.post(\r\n        //       `${baseURL}/app/search_trending_game`,\r\n        //       {\r\n        //         token: twitchToken,\r\n        //         gameName: game,\r\n        //       }\r\n        //     );\r\n        //     return res.data[0].game;\r\n        //   })\r\n        // );\r\n        // setGames(newReleasesData);\r\n        // setLoading(false);\r\n        // return newReleasesData;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchNewReleases();\r\n  }, [twitchToken]);\r\n\r\n  // Grab trailer video from selected game\r\n  // const fetchGameDetails = (game) => {\r\n  //   setGameDetails(game);\r\n  //   setCurrentlyOpen(game.name);\r\n  //   setCurrentGame(game);\r\n  // };\r\n\r\n  const closeGameDetails = () => {\r\n    // setCurrentlyOpen(null);\r\n    // setCurrentGame(null);\r\n  };\r\n\r\n  games?.sort((a, b) =>\r\n    a.rating_count > b.rating_count\r\n      ? -1\r\n      : b.rating_count > a.rating_count\r\n      ? 1\r\n      : 0\r\n  );\r\n\r\n  return '';\r\n\r\n  return (\r\n    <div className='new_releases_row'>\r\n      <h2>NEW RELEASES</h2>\r\n\r\n      <div className='new_releases_row__posters'>\r\n        {games.map((game, i) => (\r\n          <React.Fragment key={game.name}>\r\n            <div className='new_releases_row__poster_wrapper'>\r\n              <div\r\n                className='new_releases_row__poster_container'\r\n                onClick={() => setGameDetails(game)}\r\n              >\r\n                {' '}\r\n                {!loading && (\r\n                  <>\r\n                    <img\r\n                      loading='lazy'\r\n                      className='new_releases_row__poster'\r\n                      src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                      alt={game.name}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n              {/* {currentlyOpen === game.name && (\r\n                <GamePreview\r\n                  game={currentGame}\r\n                  displayDetails={displayDetails}\r\n                  hideDetails={closeGameDetails}\r\n                />\r\n              )} */}\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n        {loading && (\r\n          <div className='row__loading_container'>\r\n            {[...Array(10)].map((item, i) => (\r\n              <div key={i} className='new_releases_row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewReleases;\r\n","import React, { useEffect } from 'react';\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport SpotifyWebApi from 'spotify-web-api-node';\r\nimport './SpotifyPlayback.css';\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  clientId: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\r\n});\r\n\r\nconst activeProfile = localStorage.getItem('profile');\r\n\r\nconst SpotifyPlayback = ({\r\n  trackUri,\r\n  playAudio,\r\n  beginPlayback,\r\n  pausePlayback,\r\n  spotifyToken,\r\n}) => {\r\n  useEffect(() => {\r\n    spotifyApi.setAccessToken(spotifyToken);\r\n  }, [spotifyToken]);\r\n\r\n  useEffect(() => {\r\n    beginPlayback();\r\n  }, [trackUri]);\r\n\r\n  if (!spotifyToken) return;\r\n  return (\r\n    <>\r\n      <div className='playback_container'>\r\n        <SpotifyPlayer\r\n          token={spotifyToken}\r\n          callback={(state) => {\r\n            if (!state.isPlaying) pausePlayback();\r\n          }}\r\n          uris={trackUri ? [trackUri] : []}\r\n          play={playAudio}\r\n          styles={{\r\n            color: 'white',\r\n            bgColor: 'rgba(0,0,0,0.8)',\r\n            sliderColor: activeProfile.color,\r\n            trackArtistColor: 'white',\r\n            trackNameColor: activeProfile.color,\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpotifyPlayback;\r\n","// Get todays date based off current timezone\r\nlet todaysDate = new Date();\r\nlet igdbDate = Math.floor(todaysDate.getTime() / 1000);\r\nlet filterDate = igdbDate * 1000;\r\n\r\n// List of endpoints for the Rawg.io API\r\nconst requests = [\r\n  {\r\n    requestId: 'fetchAdventureTitles',\r\n    genreId: 31,\r\n    title: 'ACTION/ADVENTURE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchArcadeTitles',\r\n    genreId: 33,\r\n    title: 'ARCADE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchMusicTitles',\r\n    genreId: 7,\r\n    title: 'MUSIC GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchHackTitles',\r\n    genreId: 25,\r\n    title: 'HACK/SLASH TITLES',\r\n  },\r\n  {\r\n    requestId: 'fetchFightingTitles',\r\n    genreId: 4,\r\n    title: 'FIGHTING GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchIndieTitles',\r\n    genreId: 32,\r\n    title: 'INDIE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchMassivelyMultiplayerTitles',\r\n    genreId: 36,\r\n    title: 'MOBA GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchPlatformerTitles',\r\n    genreId: 8,\r\n    title: 'PLATFORMER GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchPuzzleTitles',\r\n    genreId: 9,\r\n    title: 'PUZZLE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchRacingTitles',\r\n    genreId: 10,\r\n    title: 'RACING GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchRPGTitles',\r\n    genreId: 12,\r\n    title: 'RPG GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchShooterTitles',\r\n    genreId: 5,\r\n    title: 'SHOOTER GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchSimulationTitles',\r\n    genreId: 13,\r\n    title: 'SIMULATION GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchSportsTitles',\r\n    genreId: 14,\r\n    title: 'SPORTS GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchStrategy',\r\n    genreId: (11, 15),\r\n    title: 'STRATEGY GAMES',\r\n  },\r\n];\r\n\r\nexport default requests;\r\n","import { useState, useEffect, memo, lazy, Suspense } from 'react';\r\n\r\n// Component Imports\r\nimport Row from '../Row/Row';\r\nimport Banner from '../Banner/Banner';\r\nimport Nav from '../Nav/Nav';\r\nimport MainRow from '../MainRow/MainRow';\r\nimport TrendingRow from '../TrendingRow/TrendingRow';\r\nimport NewReleases from '../NewReleases/NewReleases';\r\n\r\n// File Imports\r\nimport SpotifyPlayback from '../SpotifyPlayback/SpotifyPlayback';\r\nimport useSpotifyAuth from '../../hooks/useSpotifyAuth';\r\nimport useSteamAuth from '../../hooks/useSteamAuth';\r\nimport useFetchGenres from '../../hooks/useFetchGenres';\r\nimport { SlOptions } from 'react-icons/sl';\r\n\r\nconst GameDetails = lazy(() => import('../GameDetails/GameDetails'));\r\nconst Notification = lazy(() => import('../Notification/Notification'));\r\nconst UserCollection = lazy(() =>\r\n  import('../UserCollectionPage/UserCollection')\r\n);\r\n\r\nconst code = new URLSearchParams(window.location.search).get('code');\r\nconst windowUrl = window.location.search;\r\nconst id = windowUrl.split('?')[1];\r\n\r\nconst Dashboard = ({\r\n  currentUser,\r\n  twitchToken,\r\n  currentProfile,\r\n  currentCollection,\r\n  userNotes,\r\n  manageProfiles,\r\n  updateCollection,\r\n  selectProfile,\r\n  fetchGame,\r\n  addGame,\r\n  removeGame,\r\n  logoutUser,\r\n}) => {\r\n  const allGenres = useFetchGenres();\r\n  const [displayNotification, setDisplayNotification] = useState(false);\r\n  const [notification, setNotification] = useState({ status: '', message: '' });\r\n\r\n  // Spotify States\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [playAudio, setPlayAudio] = useState(false);\r\n  const [rowsLoading, setRowsLoading] = useState();\r\n\r\n  // User states\r\n  const [changingUser, setChangingUser] = useState(false);\r\n  const [editingUser, setEditingUser] = useState(false);\r\n  const [loggedUser, setLoggedUser] = useState(null);\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n  const [viewingCollection, setViewingCollection] = useState(false);\r\n\r\n  // Row States\r\n  const [currentGameOpen, setCurrentGameOpen] = useState(null);\r\n  const [viewingGameOptions, setViewingGameOptions] = useState(false);\r\n  const [hoveringGame, setHoveringGame] = useState(null);\r\n\r\n  // Search States\r\n  const [gameDetails, setGameDetails] = useState(null);\r\n\r\n  // Local Variables\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const spotifyAccessToken = useSpotifyAuth(code);\r\n  const steamCollection = useSteamAuth(id);\r\n\r\n  useEffect(() => {\r\n    if (!currentGameOpen) document.body.style.overflow = 'auto';\r\n  }, []);\r\n\r\n  const changeProfile = (user) => {\r\n    setChangingUser(true);\r\n    localStorage.setItem('profile', user.name);\r\n    setTimeout(() => {\r\n      setChangingUser(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const openGameWindow = (game) => {\r\n    console.log(game);\r\n    setCurrentGameOpen(game.id);\r\n    document.body.style.overflow = 'hidden';\r\n  };\r\n\r\n  const closeGameWindow = () => {\r\n    document.body.style.overflow = 'auto';\r\n    setCurrentGameOpen(null);\r\n  };\r\n\r\n  const seeGameOptions = () => {\r\n    setViewingGameOptions(true);\r\n  };\r\n\r\n  const playTrack = (track) => {\r\n    setCurrentTrack(track);\r\n  };\r\n\r\n  // Loading screen for profile change\r\n  if (changingUser) {\r\n    return (\r\n      <div className='loading_profile__container'>\r\n        <div className='loading_profile'>\r\n          <img src={currentProfile.avatar} alt='current user avatar' />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (currentProfile) {\r\n    if (gameDetails !== null) {\r\n      return (\r\n        <>\r\n          <Suspense fallback={<>...</>}>\r\n            <GameDetails\r\n              setNotification={(status, message) =>\r\n                setNotification({ status, message })\r\n              }\r\n              game={gameDetails}\r\n              closeDetails={() => setGameDetails(null)}\r\n              twitchToken={twitchToken}\r\n              addGame={(game) => addGame(game)}\r\n              removeGame={(game) => removeGame(game)}\r\n              activeProfile={currentProfile}\r\n            />\r\n            <Notification\r\n              notification={notification}\r\n              displayNotification={displayNotification}\r\n              hideNotification={() => {\r\n                setNotification({ message: '', status: '' });\r\n              }}\r\n            />\r\n          </Suspense>\r\n        </>\r\n      );\r\n    }\r\n\r\n    if (viewingCollection)\r\n      return (\r\n        <Suspense fallback={<>...</>}>\r\n          <UserCollection\r\n            collection={currentCollection}\r\n            activeProfile={currentProfile}\r\n            backToHome={() => setViewingCollection(false)}\r\n            currentTrack={currentTrack}\r\n            playTrack={playTrack}\r\n            isPlaying={playAudio}\r\n            pausePlayback={() => setPlayAudio(false)}\r\n            resumePlayback={() => setPlayAudio(true)}\r\n            setSelectedProfile={(profile) => setSelectedProfile(profile)}\r\n            spotifyToken={spotifyAccessToken}\r\n            removeGame={(game) => removeGame(game)}\r\n            updateCollection={updateCollection}\r\n            userNotes={userNotes}\r\n          />\r\n        </Suspense>\r\n      );\r\n\r\n    return (\r\n      <div className='App'>\r\n        <Nav\r\n          currentUser={currentUser}\r\n          activeProfile={currentProfile}\r\n          changeUser={changeProfile}\r\n          onLogout={logoutUser}\r\n          fetchSubmittedGame={fetchGame}\r\n          toProfilePage={() => localStorage.removeItem('profile')}\r\n          selectProfile={(profile) => setSelectedProfile(profile)}\r\n          spotifyToken={spotifyAccessToken}\r\n          twitchToken={twitchToken}\r\n          saveEdit={() => setEditingUser(true)}\r\n          setLoggedUser={(user) => setLoggedUser(user)}\r\n          updateCollection={updateCollection}\r\n          currentCollection={currentCollection}\r\n          viewCollection={() => setViewingCollection(true)}\r\n        />\r\n\r\n        <Banner\r\n          setGameDetails={(id) => setGameDetails(id)}\r\n          addGame={(game) => addGame(game)}\r\n          activeProfile={currentProfile}\r\n        />\r\n        <MainRow\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        <NewReleases\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        <TrendingRow\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        {currentGameOpen && (\r\n          <>\r\n            <h1 className='row__preview_close' onClick={closeGameWindow}>\r\n              X\r\n            </h1>\r\n            <h1 className='row__preview_close options' onClick={seeGameOptions}>\r\n              <SlOptions />\r\n            </h1>\r\n          </>\r\n        )}\r\n        <div\r\n          className={`${currentGameOpen !== null && 'game_preview__modal'}`}\r\n        />\r\n\r\n        {allGenres.genreGamesList.map((request) => (\r\n          <Row\r\n            key={Object.keys(request)}\r\n            activeProfile={currentProfile}\r\n            spotifyToken={spotifyAccessToken}\r\n            genreDetails={Object.entries(request)}\r\n            playTrack={playTrack}\r\n            currentTrack={currentTrack}\r\n            setGameDetails={(game) => setGameDetails(game)}\r\n            resumePlayback={(e) => setPlayAudio(true)}\r\n            pausePlayback={(e) => setPlayAudio(false)}\r\n            isPlaying={playAudio}\r\n            currentGameOpen={currentGameOpen}\r\n            openGame={(game) => openGameWindow(game)}\r\n            closeGameWindow={closeGameWindow}\r\n            addGame={(game) => addGame(game)}\r\n            setNotification={(status, message) =>\r\n              setNotification({ status, message })\r\n            }\r\n            loading={rowsLoading}\r\n            hoverGame={(game) => setHoveringGame(game)}\r\n            hoverAway={() => setHoveringGame(null)}\r\n            currentHover={hoveringGame}\r\n          />\r\n        ))}\r\n\r\n        {spotifyAccessToken && (\r\n          <SpotifyPlayback\r\n            spotifyToken={spotifyAccessToken}\r\n            playAudio={playAudio}\r\n            beginPlayback={(e) => setPlayAudio(true)}\r\n            pausePlayback={(e) => setPlayAudio(false)}\r\n            trackUri={currentTrack?.uri}\r\n          />\r\n        )}\r\n\r\n        <Notification\r\n          notification={notification}\r\n          displayNotification={displayNotification}\r\n          hideNotification={() => {\r\n            setNotification({ message: '', status: '' });\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(Dashboard);\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport requestsIGDB from '../requestsIGDB';\r\n\r\nexport default function useFetchGenres() {\r\n  const existingToken = localStorage.getItem('twitch_auth');\r\n  const [genreGamesList, setGenreGamesList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const currentDate = new Date();\r\n\r\n  useEffect(() => {\r\n    const fetchGenres = async () => {\r\n      const request = await axios.get(`${baseURL}/app/get_genres`);\r\n      const last_updated = new Date(request.data.last_updated);\r\n\r\n      if (currentDate > last_updated.setDate(last_updated.getDate() + 1)) {\r\n        return updateGenresAPI();\r\n      } else {\r\n        setGenreGamesList(request.data[0].genres_list);\r\n        setIsLoading(false);\r\n        return request.data;\r\n      }\r\n    };\r\n\r\n    const updateGenresAPI = async () => {\r\n      if (!existingToken) return;\r\n\r\n      const genreTitles = await Promise.all(\r\n        requestsIGDB.map((genre) => {\r\n          return axios.post(`${baseURL}/app/game_genre`, {\r\n            token: existingToken,\r\n            genreId: genre.genreId,\r\n            genreTitle: genre.title,\r\n          });\r\n        })\r\n      );\r\n      const completeGenreList = genreTitles.map((genre) => genre.data);\r\n      updateGenresCollection(completeGenreList);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchGenres();\r\n  }, [existingToken]);\r\n\r\n  const updateGenresCollection = async (list) => {\r\n    const request = await axios.post(`${baseURL}/app/update_genres`, {\r\n      genreList: list,\r\n      date: currentDate,\r\n    });\r\n    setGenreGamesList(request.data.genres_list);\r\n  };\r\n\r\n  return { genreGamesList, isLoading };\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useSpotifyAuth(code) {\r\n  const [accessToken, setAccessToken] = useState();\r\n  const [refreshToken, setRefreshToken] = useState();\r\n  const [expiresIn, setExpiresIn] = useState();\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const prevToken = sessionStorage.getItem('spotify_auth');\r\n\r\n  useEffect(() => {\r\n    if (prevToken) {\r\n      console.log(prevToken);\r\n      setAccessToken(JSON.parse(prevToken));\r\n      return;\r\n    }\r\n    if (!code) return;\r\n    const spotifyAuthentication = async () => {\r\n      try {\r\n        const request = await axios.post(\r\n          `${baseURL}/app/spotify_authentication`,\r\n          {\r\n            code,\r\n            baseURL,\r\n          }\r\n        );\r\n        setAccessToken(request.data.tokenRequest.body.access_token);\r\n        setRefreshToken(request.data.tokenRequest.body.refresh_token);\r\n        setExpiresIn(request.data.tokenRequest.body.expires_in);\r\n        sessionStorage.setItem(\r\n          'spotify_auth',\r\n          JSON.stringify(request.data.tokenRequest.body.access_token)\r\n        );\r\n        window.history.pushState({}, null, '/');\r\n      } catch (error) {\r\n        console.log(error);\r\n        window.location = '/';\r\n      }\r\n    };\r\n    spotifyAuthentication();\r\n  }, [code]);\r\n\r\n  useEffect(() => {\r\n    if (!refreshToken || !expiresIn) return;\r\n    const refreshSpotifyToken = async () => {\r\n      try {\r\n        const request = await axios.post(`${baseURL}/app/refresh_token`, {\r\n          refreshToken,\r\n          baseURL,\r\n        });\r\n        setAccessToken(request.data.body.body.access_token);\r\n        setRefreshToken(request.data.body.body.refresh_token);\r\n        setExpiresIn(request.data.body.body.expires_in);\r\n      } catch (error) {\r\n        console.log('REFRESH TOKEN ERROR');\r\n        window.location = '/';\r\n      }\r\n    };\r\n    const interval = setInterval(() => {\r\n      refreshSpotifyToken();\r\n    }, (expiresIn - 60) * 1000);\r\n\r\n    return () => clearTimeout(interval);\r\n  }, [refreshToken, expiresIn]);\r\n\r\n  return accessToken;\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useSteamAuth(id) {\r\n  const [steamCollection, setSteamCollection] = useState([]);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  useEffect(() => {\r\n    if (!id) return;\r\n    const fetchUserLibrary = async () => {\r\n      try {\r\n        const request = await axios.get(`${baseURL}/steam/get_owned_games`, {\r\n          params: {\r\n            id,\r\n          },\r\n        });\r\n        localStorage.setItem('steamID', request.config.params.id);\r\n        console.log(request.data);\r\n        setSteamCollection(request.data);\r\n        window.history.pushState({}, null, '/');\r\n      } catch (error) {\r\n        console.log(error);\r\n        console.log('GET STEAM COLLECTION ERROR');\r\n      }\r\n    };\r\n    fetchUserLibrary();\r\n  }, [id]);\r\n\r\n  return steamCollection;\r\n}\r\n"],"names":["delay","className","style","animationDelay","onClick","e","stopPropagation","GamePreview","lazy","activeProfile","spotifyToken","genreDetails","playTrack","currentTrack","setGameDetails","resumePlayback","pausePlayback","isPlaying","currentGameOpen","closeGameWindow","openGame","addGame","setNotification","loading","hoverGame","hoverAway","currentHover","useState","currentGame","setCurrentGame","baseURL","process","currentPlaylist","setCurrentPlaylist","viewingSoundtrack","setViewingSoundtrack","viewingPreview","setViewingPreview","playlistLoading","setPlaylistLoading","genreTitle","genreList","fetchGameOST","game","axios","params","name","token","request","data","status","console","log","id","tracks","addGameHandler","determineESRB","age_ratings","src","rpRating","hasRating","filter","rating","category","length","alt","eRating","tRating","mRating","map","undefined","cover","zIndex","onMouseOver","onMouseLeave","display","fetchGameDetails","viewGameSoundtrack","closeGameSoundtrack","track","color","fontWeight","title","split","selectTrackHandler","transformStyle","image_id","Suspense","fallback","gameCover","ratingImage","closeGame","Array","item","i","isLoading","setIsLoading","bannerGamesList","setBannerGamesList","currentGameTrailer","setCurrentGameTrailer","serverError","setServerError","twitchToken","localStorage","getItem","fetchData","gameName","sort","a","b","filteredList","selectedGame","Math","floor","random","trailer","videos","find","video","includes","video_id","useEffect","displayNewBanner","newGame","newGameTrailer","str","n","bannerGame","useFetchBanner","bannerRef","useRef","exists","collection","some","mutedVideo","setMutedVideo","playingVideo","setPlayingVideo","trailerEnded","setTrailerEnded","observer","IntersectionObserver","isIntersecting","root","rootMargin","threshold","current","observe","ref","width","height","url","playing","muted","onEnded","light","summary","substr","size","SPOTIFY_AUTH_URL","props","allProfiles","handleEsc","event","keyCode","closeNavDropdown","window","addEventListener","removeEventListener","generatePlaystationTitles","earnedTrophies","earned","allTrophies","currentCollection","ownedGame","inCollection","toLowerCase","trophies","email","gameId","currentProfile","imageURL","playtime","origin","user","changeProfile","changeUserHandler","avatar","backgroundColor","toProfilePage","editProfile","viewCollection","editAccount","href","alignItems","justifyContent","paddingBottom","paddingLeft","to","logoutHandler","closeAccountSettings","setLoggedUser","currentUser","deletingAccount","setDeletingAccount","updateStatus","setUpdateStatus","emailValue","setEmailValue","newEmailValue","setNewEmailValue","changingEmail","setChangingEmail","password","passwordValue","setPasswordValue","hidePassword","setHidePassword","newPasswordValue","setNewPasswordValue","changingPassword","setChangingPassword","hiddenPassword","replace","updateEmail","originalEmail","newEmail","type","message","deleteAccountHandler","_id","location","removeItem","fontSize","marginLeft","onChange","target","value","placeholder","autoFocus","displayNav","setDisplayNav","displayDropdown","setDisplayDropdown","displaySearch","setDisplaySearch","searchRef","editingProfile","setEditingProfile","editingAccount","setEditingAccount","profile","scrollNavListener","scrollY","cancelEdit","document","body","overflowY","ProfileEditor","userEmail","viewAllProfiles","saveEdit","getProfile","test","selectProfile","onSubmit","preventDefault","searchValue","trim","fetchSubmittedGame","defaultValue","searchedGame","onBlur","defaultAvatar","transform","changeUser","profiles","onLogout","updateCollection","games","setGames","currentFilter","setCurrentFilter","changingFilter","setChangingFilter","currentlyViewing","setCurrentlyViewing","setLoading","todaysDate","Date","weekDateFormat","getTime","monthDateFormat","setMonth","getMonth","yearDateFormat","filterUniques","list","uniques","indexOf","push","startDate","targetDate","retries","currentDate","changeFilterDate","innerText","convertDate","date","formattedDay","now","currentDay","getDate","getFullYear","onMouseOut","human","trendingTitlesFetched","JSON","parse","sessionStorage","trendingTitles","uniqueTitles","Set","has","add","forEach","release_dates","findLast","dates","hypes","slice","setItem","stringify","fetchNewReleases","rating_count","spotifyApi","SpotifyWebApi","clientId","trackUri","playAudio","beginPlayback","setAccessToken","callback","state","uris","play","styles","bgColor","sliderColor","trackArtistColor","trackNameColor","requestId","genreId","GameDetails","Notification","UserCollection","code","URLSearchParams","search","get","Dashboard","userNotes","manageProfiles","fetchGame","removeGame","logoutUser","allGenres","existingToken","genreGamesList","setGenreGamesList","fetchGenres","last_updated","setDate","updateGenresAPI","genres_list","Promise","all","requestsIGDB","genre","genreTitles","completeGenreList","updateGenresCollection","useFetchGenres","displayNotification","notification","setCurrentTrack","setPlayAudio","rowsLoading","changingUser","setChangingUser","setEditingUser","setSelectedProfile","viewingCollection","setViewingCollection","setCurrentGameOpen","setViewingGameOptions","hoveringGame","setHoveringGame","gameDetails","spotifyAccessToken","accessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","prevToken","spotifyAuthentication","tokenRequest","access_token","refresh_token","expires_in","history","pushState","refreshSpotifyToken","interval","setInterval","clearTimeout","useSpotifyAuth","steamCollection","setSteamCollection","fetchUserLibrary","config","useSteamAuth","overflow","closeDetails","hideNotification","backToHome","setTimeout","Object","entries","openGameWindow","keys","uri","memo"],"sourceRoot":""}