{"version":3,"file":"static/js/626.9322066c.chunk.js","mappings":"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","sources":["components/Placeholder/Placeholder.js","components/Row/Row.js","hooks/useFetchBanner.js","components/Banner/Banner.js","components/Nav/NavDropdown.js","components/Login/Profiles/ProfileEditor/AccountEditor.js","components/Nav/Nav.js","components/MainRow/MainRow.js","components/TrendingRow/TrendingRow.js","components/SpotifyPlayback/SpotifyPlayback.js","hooks/useContextMenu.js","components/UserGame/NoteDetails.js","components/UserGame/UserNotes.js","components/UserGame/UserGame.js","components/UserCollectionPage/UserCollection.js","requestsIGDB.js","components/NewReleases/NewReleases.js","components/Dashboard/Dashboard.js","hooks/useFetchGenres.js","hooks/useSpotifyAuth.js","hooks/useSteamAuth.js"],"sourcesContent":["import React from 'react';\r\nimport './Placeholder.css';\r\n\r\nconst Placeholder = ({ delay }) => {\r\n  return (\r\n    <div\r\n      className='placeholder'\r\n      style={{ animationDelay: `${delay}ms` }}\r\n      onClick={(e) => e.stopPropagation()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Placeholder;\r\n","import React, { useState } from 'react';\r\nimport GamePreview from './GamePreview/GamePreview';\r\nimport './Row.css';\r\nimport axios from 'axios';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport {\r\n  FaPlay,\r\n  FaPause,\r\n  FaPlusSquare,\r\n  FaGamepad,\r\n  FaMusic,\r\n} from 'react-icons/fa';\r\nimport { CiSquareMore } from 'react-icons/ci';\r\n// ESRB Logos\r\nimport eRating from '../../assets/images/ESRB_E.png';\r\nimport tRating from '../../assets/images/ESRB_T.png';\r\nimport mRating from '../../assets/images/ESRB_M.png';\r\nimport rpRating from '../../assets/images/ESRB_RP.png';\r\n\r\nfunction Row({\r\n  activeProfile,\r\n  spotifyToken,\r\n  genreDetails,\r\n  playTrack,\r\n  currentTrack,\r\n  setGameDetails,\r\n  resumePlayback,\r\n  pausePlayback,\r\n  isPlaying,\r\n  currentGameOpen,\r\n  closeGameWindow,\r\n  openGame,\r\n  addGame,\r\n  setNotification,\r\n  loading,\r\n  hoverGame,\r\n  hoverAway,\r\n  currentHover,\r\n}) {\r\n  const [currentGame, setCurrentGame] = useState(null);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const [currentPlaylist, setCurrentPlaylist] = useState([]);\r\n  const [viewingSoundtrack, setViewingSoundtrack] = useState(false);\r\n  const [viewingPreview, setViewingPreview] = useState(false);\r\n  const [playlistLoading, setPlaylistLoading] = useState(false);\r\n\r\n  const genreTitle = genreDetails[0][0];\r\n  const genreList = genreDetails[0][1];\r\n\r\n  const fetchGameOST = async (game) => {\r\n    if (!spotifyToken) {\r\n      setCurrentGame(null);\r\n      setNotification(\r\n        'ERROR',\r\n        'Please connect to Spotify through the nav dropdown!'\r\n      );\r\n      return;\r\n    }\r\n    try {\r\n      setPlaylistLoading(true);\r\n      const request = await axios.get(`${baseURL}/app/spotify_album`, {\r\n        params: {\r\n          game: game.name,\r\n          token: spotifyToken,\r\n          baseURL,\r\n        },\r\n      });\r\n      if (request.data.status !== 'OK') {\r\n        console.log(request.data);\r\n\r\n        setPlaylistLoading(false);\r\n      } else {\r\n        setCurrentGame(game.id);\r\n        setCurrentPlaylist(request.data.tracks);\r\n        setViewingSoundtrack(true);\r\n        setPlaylistLoading(false);\r\n\r\n        return request.data.tracks;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      console.log('OST FETCH ISSUE');\r\n      setPlaylistLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // Grab trailer video from selected game\r\n  const fetchGameDetails = (game) => {\r\n    closeGameWindow();\r\n    setGameDetails(game);\r\n  };\r\n\r\n  const addGameHandler = (e, game) => {\r\n    e.stopPropagation();\r\n    addGame(game);\r\n  };\r\n\r\n  const viewGameSoundtrack = (e, game) => {\r\n    e.stopPropagation();\r\n    closeGameWindow();\r\n    setCurrentGame(game.id);\r\n    fetchGameOST(game);\r\n  };\r\n\r\n  const closeGameSoundtrack = (e) => {\r\n    e.stopPropagation();\r\n    setCurrentGame(null);\r\n    setViewingSoundtrack(false);\r\n  };\r\n\r\n  const selectTrackHandler = (e, track) => {\r\n    e.stopPropagation();\r\n    if (currentTrack !== null && track.name == currentTrack.name) {\r\n      resumePlayback();\r\n    }\r\n    playTrack(track);\r\n  };\r\n\r\n  const formatTrackTitle = (title) => {\r\n    return title.split('-')[0].split('(')[0];\r\n  };\r\n\r\n  // Return a ESRB rating picture according to fetched game\r\n  const determineESRB = (game) => {\r\n    if (!game || !game.age_ratings)\r\n      return <img className='row__poster__esrb_img' src={rpRating} />;\r\n    const hasRating = game?.age_ratings.filter(\r\n      (rating) => rating.category == 1 || rating.category == 2\r\n    );\r\n\r\n    if (hasRating.length == 0 || !game.age_ratings)\r\n      return <img className='row__poster__esrb_img' src={rpRating} />;\r\n    const esrb = hasRating[0].rating;\r\n\r\n    switch (esrb) {\r\n      case 1:\r\n      case 2:\r\n      case 8:\r\n      case 9:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb E rating'\r\n            src={eRating}\r\n          />\r\n        );\r\n      case 3:\r\n      case 4:\r\n      case 10:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb T rating'\r\n            src={tRating}\r\n          />\r\n        );\r\n      case 5:\r\n      case 11:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb M rating'\r\n            src={mRating}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb RP rating'\r\n            src={rpRating}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='row'>\r\n      <h2 className='row__title'>{genreTitle}</h2>\r\n      <div className='row__posters'>\r\n        {genreList.map(\r\n          (game) =>\r\n            game.cover !== undefined && (\r\n              <React.Fragment key={game.id}>\r\n                {!loading && (\r\n                  <div\r\n                    className={`row__poster_wrapper ${\r\n                      currentGameOpen == game.id && 'viewing_game'\r\n                    }`}\r\n                    style={{\r\n                      zIndex:\r\n                        currentGameOpen !== game.id &&\r\n                        currentGameOpen !== null &&\r\n                        '-1',\r\n                    }}\r\n                    onMouseOver={() => hoverGame(game.id)}\r\n                    onMouseLeave={() =>\r\n                      viewingSoundtrack ? hoverGame(game.id) : hoverAway()\r\n                    }\r\n                  >\r\n                    {currentHover == game.id && !currentGameOpen && (\r\n                      <div className='row__blur_wrapper'>\r\n                        {!playlistLoading ? (\r\n                          <div\r\n                            className='row__blur_details'\r\n                            style={{\r\n                              display: currentGame == game.id && 'none',\r\n                            }}\r\n                          >\r\n                            {/* ADD GAME */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={(e) => addGameHandler(e, game)}\r\n                            >\r\n                              <FaPlusSquare className='blur_item_icon' />\r\n                              <p>Add</p>\r\n                            </div>\r\n                            {/* GET DETAILS */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={() => {\r\n                                fetchGameDetails(game);\r\n                              }}\r\n                            >\r\n                              <CiSquareMore className='blur_item_icon more' />\r\n                              <p>See Details</p>\r\n                            </div>\r\n                            {/* GET SOUNDTRACK */}\r\n                            <div\r\n                              onClick={(e) => viewGameSoundtrack(e, game)}\r\n                              className='row__blur_item'\r\n                            >\r\n                              <FaMusic className='blur_item_icon music' />\r\n                              <p>Play Soundtrack</p>\r\n                            </div>\r\n                            {/* VIEW 3D CASE */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={() => openGame(game)}\r\n                            >\r\n                              <FaGamepad className='blur_item_icon' />\r\n                              <p>View Case</p>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className='playlist_loading'>\r\n                            <div className='playlist_loading_dot' />\r\n                            <div className='playlist_loading_dot' />\r\n                            <div className='playlist_loading_dot' />\r\n                          </div>\r\n                        )}\r\n                        {viewingSoundtrack && currentGame == game.id && (\r\n                          <div className='soundtrack_container'>\r\n                            <span onClick={(e) => closeGameSoundtrack(e)}>\r\n                              ←\r\n                            </span>\r\n                            <h3>Spotify OST</h3>\r\n                            <ul className='soundtracks'>\r\n                              {currentPlaylist?.map((track) => (\r\n                                <li\r\n                                  key={track.id}\r\n                                  onClick={(e) => e.stopPropagation()}\r\n                                  className='soundtrack'\r\n                                >\r\n                                  <p\r\n                                    style={{\r\n                                      color:\r\n                                        currentTrack !== null &&\r\n                                        currentTrack.name == track.name\r\n                                          ? 'green'\r\n                                          : 'white',\r\n                                      fontWeight:\r\n                                        currentTrack !== null &&\r\n                                        currentTrack.name == track.name\r\n                                          ? '600'\r\n                                          : '400',\r\n                                    }}\r\n                                  >\r\n                                    {formatTrackTitle(track.name)}\r\n                                  </p>\r\n                                  {(currentTrack !== null &&\r\n                                    currentTrack.name !== track.name) ||\r\n                                  !isPlaying ? (\r\n                                    <FaPlay\r\n                                      onClick={(e) =>\r\n                                        selectTrackHandler(e, track)\r\n                                      }\r\n                                    />\r\n                                  ) : (\r\n                                    <FaPause onClick={(e) => pausePlayback()} />\r\n                                  )}\r\n                                </li>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                    <div className='row__poster_container'>\r\n                      <>\r\n                        {/* FRONT OF POSTER */}\r\n                        <div\r\n                          className='row__poster_front'\r\n                          style={{\r\n                            transformStyle: currentGameOpen && 'revert',\r\n                          }}\r\n                        >\r\n                          <img\r\n                            loading='lazy'\r\n                            className='row__poster'\r\n                            src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                            alt={game.name + ' cover image'}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    </div>\r\n                    {currentGameOpen === game.id && (\r\n                      <GamePreview\r\n                        game={game}\r\n                        gameCover={`//images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover?.image_id}.jpg`}\r\n                        ratingImage={determineESRB(game)}\r\n                        addGame={addGameHandler}\r\n                        viewingPreview={viewingPreview}\r\n                        openGame={() => setViewingPreview(true)}\r\n                        closeGame={() => setViewingPreview(false)}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </React.Fragment>\r\n            )\r\n        )}\r\n        {loading && (\r\n          <div className='row__loading_container'>\r\n            {[...Array(10)].map((item, i) => (\r\n              <div key={i} className='row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useFetchBanner = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [bannerGamesList, setBannerGamesList] = useState([]);\r\n  const [currentGame, setCurrentGame] = useState('');\r\n  const [currentGameTrailer, setCurrentGameTrailer] = useState('');\r\n  const [serverError, setServerError] = useState(null);\r\n  const twitchToken = localStorage.getItem('twitch_auth');\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  const fetchData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/search_game`, {\r\n        token: twitchToken,\r\n        gameName: '',\r\n      });\r\n      const filteredList = await request.data.sort(function (a, b) {\r\n        return b.rating - a.rating;\r\n      });\r\n      const selectedGame =\r\n        filteredList[Math.floor(Math.random() * request.data.length - 1)];\r\n      setBannerGamesList(filteredList);\r\n      setCurrentGame(selectedGame);\r\n      let trailer = selectedGame.videos.find((video) =>\r\n        video.name.includes('Trailer')\r\n      );\r\n      setCurrentGameTrailer(\r\n        `https://www.youtube.com/watch?v=${trailer.video_id}`\r\n      );\r\n\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setServerError(error);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken || bannerGamesList.length > 0) return;\r\n\r\n    fetchData();\r\n  }, [twitchToken]);\r\n\r\n  useEffect(() => {\r\n    if (!serverError) return;\r\n    fetchData();\r\n  }, [serverError]);\r\n\r\n  const displayNewBanner = () => {\r\n    const newGame =\r\n      bannerGamesList[Math.floor(Math.random() * bannerGamesList.length - 1)];\r\n    const newGameTrailer = newGame.videos.find((video) =>\r\n      video.name.includes('Trailer')\r\n    );\r\n    setCurrentGame(newGame);\r\n    setCurrentGameTrailer(\r\n      `https://www.youtube.com/watch?v=${newGameTrailer.video_id}`\r\n    );\r\n    return;\r\n  };\r\n\r\n  return {\r\n    isLoading,\r\n    serverError,\r\n    currentGame,\r\n    currentGameTrailer,\r\n    displayNewBanner,\r\n  };\r\n};\r\n\r\nexport default useFetchBanner;\r\n","import './Banner.css';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { BiRefresh, BiVolumeMute, BiVolumeFull } from 'react-icons/bi';\r\nimport useFetchBanner from '../../hooks/useFetchBanner';\r\nimport ReactPlayer from 'react-player/youtube';\r\n\r\nfunction Banner({ setGameDetails, addGame, activeProfile }) {\r\n  const bannerGame = useFetchBanner();\r\n  const bannerRef = useRef();\r\n\r\n  // Don't allow user to add game if already in collection\r\n  const exists =\r\n    activeProfile.collection &&\r\n    activeProfile.collection.some(\r\n      (title) => title?.id === bannerGame.currentGame.id\r\n    );\r\n  const [mutedVideo, setMutedVideo] = useState(true);\r\n\r\n  const [playingVideo, setPlayingVideo] = useState(true);\r\n  const [trailerEnded, setTrailerEnded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (bannerGame.isLoading || !bannerRef) return;\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setPlayingVideo(true);\r\n        } else {\r\n          setPlayingVideo(false);\r\n        }\r\n      },\r\n      {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.1,\r\n      }\r\n    );\r\n    if (bannerRef.current) {\r\n      observer.observe(bannerRef.current);\r\n    }\r\n  }, [bannerRef, bannerGame.isLoading, bannerGame.currentGameTrailer]);\r\n\r\n  useEffect(() => {\r\n    setPlayingVideo(true);\r\n  }, [bannerGame.currentGameTrailer]);\r\n\r\n  // If the game description is longer that 150 characters, replace the reaminder with the ellipsis '...'\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n  };\r\n\r\n  // Wait for game deatils to finish loading or the game name shows up undefined\r\n  // Undefined is a game name apart of the dataset and will display jibberish\r\n  if (bannerGame.isLoading) {\r\n    return (\r\n      <div className='banner__loading'>\r\n        <div className='banner__spinner' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <header className='banner' key={bannerGame.currentGame.id}>\r\n      <div ref={bannerRef} style={{ width: '100%', height: '100%' }}>\r\n        {bannerGame.currentGameTrailer && (\r\n          <ReactPlayer\r\n            className='banner__trailer'\r\n            url={bannerGame.currentGameTrailer}\r\n            playing={playingVideo ? true : false}\r\n            muted={mutedVideo ? true : false}\r\n            onEnded={() => setTrailerEnded(true)}\r\n            light={\r\n              trailerEnded\r\n                ? `//images.igdb.com/igdb/image/upload/t_1080p_2x/${bannerGame.currentGame.cover?.image_id}.jpg`\r\n                : false\r\n            }\r\n          />\r\n        )}\r\n\r\n        <div className='banner__contents'>\r\n          <h1 className='banner__title'>{bannerGame.currentGame?.name}</h1>\r\n\r\n          <div className='banner__buttons'>\r\n            <button\r\n              className='banner__button'\r\n              onClick={() => setGameDetails(bannerGame.currentGame)}\r\n            >\r\n              See Details\r\n            </button>\r\n            {!exists && (\r\n              <button\r\n                className='banner__button'\r\n                onClick={() => addGame(bannerGame.currentGame)}\r\n              >\r\n                Add to My List\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <h1 className='banner__description'>\r\n            {truncate(bannerGame.currentGame?.summary, 150)}\r\n          </h1>\r\n        </div>\r\n        <div className='banner--fadeBottom' />\r\n\r\n        {\r\n          <BiRefresh\r\n            size={35}\r\n            className='banner__refresh_icon'\r\n            onClick={bannerGame.displayNewBanner}\r\n          />\r\n        }\r\n        {mutedVideo ? (\r\n          <BiVolumeMute\r\n            size={27}\r\n            className='banner__mute_btn'\r\n            onClick={() => setMutedVideo(false)}\r\n          />\r\n        ) : (\r\n          <BiVolumeFull\r\n            size={27}\r\n            className='banner__volume_btn'\r\n            onClick={() => setMutedVideo(true)}\r\n          />\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './NavDropdown.css';\r\nimport { Link } from 'react-router-dom';\r\n// React Icons\r\nimport {\r\n  FaSortUp,\r\n  FaSpotify,\r\n  FaUserEdit,\r\n  FaPlaystation,\r\n  FaGamepad,\r\n} from 'react-icons/fa';\r\nimport { IoSettingsOutline } from 'react-icons/io5';\r\nimport { MdEdit } from 'react-icons/md';\r\n\r\nimport steamAuthBtn from '../../assets/images/steam-auth-btn.png';\r\n\r\nconst SPOTIFY_AUTH_URL = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_SPOTIFY_CLIENT_ID}&response_type=code&redirect_uri=${process.env.REACT_APP_BASE_URL}&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state`;\r\n\r\nconst NavDropdown = (props) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const allProfiles = props.allProfiles;\r\n\r\n  // Listens for escape key press to close nav dropdown\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        props.closeNavDropdown();\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  // Change current user\r\n  const changeUserHandler = (user) => {\r\n    props.changeProfile(user);\r\n  };\r\n\r\n  const generatePlaystationTitles = async () => {\r\n    try {\r\n      const request = await axios.get(`${baseURL}/playstation/user_titles`);\r\n      console.log(request.data);\r\n      for (let game of request.data) {\r\n        for (let i = 0; i < game.earnedTrophies.length; i++) {\r\n          if (game.earnedTrophies[i].earned) {\r\n            game.allTrophies[i].earned = true;\r\n          } else game.allTrophies[i].earned = false;\r\n        }\r\n      }\r\n\r\n      props.currentCollection.filter((ownedGame) => {\r\n        const inCollection = request.data.some((game) => {\r\n          if (ownedGame.name.toLowerCase() === game.name.toLowerCase()) {\r\n            ownedGame.trophies = game.allTrophies;\r\n            axios.put(`${baseURL}/app/update_game_trophies`, {\r\n              email: localStorage.getItem('user'),\r\n              name: props.activeProfile.name,\r\n              gameId: ownedGame.id,\r\n              trophies: game.allTrophies,\r\n            });\r\n          } else {\r\n            console.log('New game bruh');\r\n            axios.post(`${baseURL}/app/update_collection`, {\r\n              email: localStorage.getItem('user'),\r\n              currentProfile: localStorage.getItem('profile'),\r\n              name: game.name,\r\n              id: game.id,\r\n              imageURL: `//images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover.image_id}.jpg`,\r\n              playtime: 0,\r\n              origin: 'gameflix',\r\n            });\r\n          }\r\n        });\r\n        return inCollection;\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      return err;\r\n    }\r\n  };\r\n\r\n  allProfiles.sort((a, b) => (a.name - b.name ? 1 : -1));\r\n\r\n  return (\r\n    <div className='dropdown'>\r\n      <FaSortUp className='dropdown__arrow' />\r\n      <div className='dropdown__profiles'>\r\n        <ul className='dropdown__profiles_list'>\r\n          {allProfiles.map((user) => {\r\n            if (user.name !== props.activeProfile.name) {\r\n              return (\r\n                <li\r\n                  className='dropdown__profiles_item'\r\n                  key={user.name}\r\n                  onClick={() => changeUserHandler(user)}\r\n                >\r\n                  <img\r\n                    src={user.avatar}\r\n                    className='dropdown__profile_icon'\r\n                    alt={`${user.name} avatar icon`}\r\n                    style={{ backgroundColor: user.color }}\r\n                  />\r\n                  <p className='dropdown__profile_name'>{user.name}</p>\r\n                </li>\r\n              );\r\n            }\r\n          })}\r\n          <li className='dropdown__profiles_item' onClick={props.toProfilePage}>\r\n            <span className='dropdown__profiles_manage'>\r\n              <MdEdit size={22} />\r\n            </span>\r\n            <p className='dropdown__profile_name'>Manage Profiles</p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className='dropdown__settings'>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={() => props.editProfile()}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaUserEdit size={18} />\r\n          </span>\r\n          <p>My Profile</p>\r\n        </div>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={() => props.viewCollection()}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaGamepad size={18} />\r\n          </span>\r\n          <p>My Collection</p>\r\n        </div>\r\n        <div className='dropdown__settings_item' onClick={props.editAccount}>\r\n          <span className='dropdown__settings_item_icon'>\r\n            <IoSettingsOutline size={18} />\r\n          </span>\r\n          <p>Account Settings</p>\r\n        </div>\r\n      </div>\r\n      <div className='dropdown__settings'>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={generatePlaystationTitles}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaPlaystation size={18} />\r\n          </span>\r\n          <p>Link Playstation</p>\r\n        </div>\r\n        <a href={SPOTIFY_AUTH_URL} className='dropdown__settings_item'>\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaSpotify\r\n              size={18}\r\n              style={{ color: props.spotifyToken ? '#1DB954' : '#FFF' }}\r\n            />\r\n          </span>\r\n          <p>Spotify Authentication</p>\r\n        </a>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          style={{\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            paddingBottom: '0',\r\n            paddingLeft: '0',\r\n          }}\r\n        >\r\n          <Link to={`http://localhost:3001/api/auth/steam`}>\r\n            <img className='steam_btn' src={steamAuthBtn} />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div className='dropdown__settings_links'>\r\n        <Link\r\n          to='/login'\r\n          className='dropdown__settings_link'\r\n          onClick={props.logoutHandler}\r\n        >\r\n          Sign out of GameFlix\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavDropdown;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { AiFillEyeInvisible, AiFillEye } from 'react-icons/ai';\r\nimport axios from 'axios';\r\n\r\nconst AccountEditor = ({\r\n  closeAccountSettings,\r\n  setLoggedUser,\r\n  currentUser,\r\n}) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const [deletingAccount, setDeletingAccount] = useState(false);\r\n  const [updateStatus, setUpdateStatus] = useState('');\r\n  // EMAIL STATES\r\n  const [emailValue, setEmailValue] = useState(currentUser.email);\r\n  const [newEmailValue, setNewEmailValue] = useState('');\r\n  let repeatValue = '';\r\n  const [changingEmail, setChangingEmail] = useState(false);\r\n  // PASSWORD STATES\r\n  const [passwordValue, setPasswordValue] = useState(currentUser.password);\r\n  const [hidePassword, setHidePassword] = useState(true);\r\n  const [newPasswordValue, setNewPasswordValue] = useState('');\r\n  const [changingPassword, setChangingPassword] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (hidePassword) {\r\n      const hiddenPassword = currentUser.password.replace(/./gi, '*');\r\n      setPasswordValue(hiddenPassword);\r\n    } else {\r\n      setPasswordValue(currentUser.password);\r\n    }\r\n  }, [hidePassword]);\r\n\r\n  const updateEmail = async (email) => {\r\n    setUpdateStatus('');\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/update_user_email`, {\r\n        originalEmail: currentUser.email,\r\n        newEmail: email,\r\n      });\r\n\r\n      if (request.data.status < 400) {\r\n        setLoggedUser(request.data.user);\r\n        setUpdateStatus({ type: 'success', message: request.data.message });\r\n        setEmailValue(request.data.user.email);\r\n        setNewEmailValue('');\r\n        setChangingEmail(false);\r\n      } else {\r\n        setUpdateStatus({ type: 'error', message: request.data.message });\r\n        setNewEmailValue('');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const emailChangeHandler = () => {\r\n    if (!changingEmail) {\r\n      setChangingEmail(true);\r\n      setChangingPassword(false);\r\n    } else {\r\n      if (newEmailValue !== '') {\r\n        updateEmail(newEmailValue);\r\n      } else {\r\n        setChangingEmail(false);\r\n        setNewEmailValue('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteAccountHandler = async () => {\r\n    try {\r\n      await axios.delete(`${baseURL}/app/delete_account`, {\r\n        data: { id: currentUser._id },\r\n      });\r\n      window.location = '/';\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('profile');\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const passwordChangeHandler = () => {\r\n    if (!changingPassword) {\r\n      setChangingPassword(true);\r\n      setChangingEmail(false);\r\n    } else {\r\n      if (newPasswordValue !== '') {\r\n        repeatValue = newEmailValue;\r\n      } else {\r\n        setChangingPassword(false);\r\n        setNewPasswordValue('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const determineEmailValidity = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/update_user_profile`, {\r\n        originalEmail: emailValue,\r\n        newEmail: newEmailValue,\r\n      });\r\n      console.log(request);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='profile_edit__container'>\r\n      <div className='profile_edit__header'>\r\n        <h3>GAMEFLIX</h3>\r\n      </div>\r\n      <div className='profile_edit__form_wrapper' style={{ height: '350px' }}>\r\n        <h3>Account Settings</h3>\r\n        <div className='form_container'>\r\n          <form className='account_edit__form'>\r\n            {/* EMAIL CONTAINER */}\r\n            <div className='account_email_container'>\r\n              {updateStatus.type == 'error' ? (\r\n                <p className='account_email_error'>{updateStatus.message}</p>\r\n              ) : (\r\n                <p className='account_email_success'>{updateStatus.message}</p>\r\n              )}\r\n              <h4\r\n                style={{ color: 'white', fontSize: '2rem', marginLeft: '2px' }}\r\n              >\r\n                Email\r\n              </h4>\r\n              <input\r\n                className='account_email_input'\r\n                onChange={(e) => setEmailValue(e.target.value)}\r\n                value={emailValue}\r\n              />\r\n\r\n              {/* NEW EMAIL */}\r\n              {changingEmail && (\r\n                <>\r\n                  <input\r\n                    className='account_email_input'\r\n                    onChange={(e) => setNewEmailValue(e.target.value)}\r\n                    value={newEmailValue}\r\n                    placeholder='Enter new email'\r\n                    autoFocus\r\n                  />\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => {\r\n                      setNewEmailValue('');\r\n                      setChangingEmail(false);\r\n                    }}\r\n                    className='account_email_save_btn'\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </>\r\n              )}\r\n\r\n              <button\r\n                type='button'\r\n                onClick={emailChangeHandler}\r\n                className='save_btn'\r\n              >\r\n                {!changingEmail ? 'Change Email' : 'Save Email'}\r\n              </button>\r\n            </div>\r\n\r\n            {/* PASSWORD CONTAINER */}\r\n            <div className='account_password_container'>\r\n              <h4\r\n                style={{ color: 'white', fontSize: '2rem', marginLeft: '2px' }}\r\n              >\r\n                Password\r\n              </h4>\r\n              <input\r\n                className='account_password_input'\r\n                onChange={(e) => setPasswordValue(e.target.value)}\r\n                value={passwordValue}\r\n              />\r\n              <span\r\n                className='account_password_visible_icon'\r\n                onClick={() => setHidePassword(!hidePassword)}\r\n              >\r\n                {!hidePassword ? <AiFillEye /> : <AiFillEyeInvisible />}\r\n              </span>\r\n\r\n              {/* NEW PASSWORD */}\r\n              {changingPassword && (\r\n                <>\r\n                  <input\r\n                    className='account_password_input'\r\n                    onChange={(e) => setNewPasswordValue(e.target.value)}\r\n                    value={newPasswordValue}\r\n                    placeholder='Enter new password'\r\n                    autoFocus\r\n                  />\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => {\r\n                      setNewPasswordValue('');\r\n                      setChangingPassword(false);\r\n                    }}\r\n                    className='account_password_save_btn'\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </>\r\n              )}\r\n              <button\r\n                type='button'\r\n                onClick={passwordChangeHandler}\r\n                className='save_btn'\r\n              >\r\n                {!changingPassword ? 'Change Password' : 'Save Password'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        {/* FORM ACTIONS */}\r\n        <div\r\n          className='form_actions'\r\n          style={{ justifyContent: 'space-between' }}\r\n        >\r\n          <button className='cancel_btn' onClick={closeAccountSettings}>\r\n            Back\r\n          </button>\r\n          <button\r\n            className='delete_account_btn'\r\n            onClick={() => setDeletingAccount(true)}\r\n          >\r\n            Delete Account\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {deletingAccount && (\r\n        <div className='delete_account_modal'>\r\n          <div className='delete_account_modal_content'>\r\n            <h4>Are you sure you want to delete your account?</h4>\r\n            <div className='delete_account_modal_actions'>\r\n              <div className='modal_action_option'>\r\n                <p>Yes</p>\r\n                <span\r\n                  className='video-game-button'\r\n                  onClick={deleteAccountHandler}\r\n                >\r\n                  A\r\n                </span>\r\n              </div>\r\n              <div className='modal_action_option'>\r\n                <p>No</p>\r\n                <span\r\n                  className='video-game-button'\r\n                  onClick={() => setDeletingAccount(false)}\r\n                >\r\n                  B\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountEditor;\r\n","import React, { useRef } from 'react';\r\nimport './Nav.css';\r\nimport logo from '../../assets/images/gameflix-logo.png';\r\nimport defaultAvatar from '../../assets/images/basic_avatar.png';\r\nimport { useEffect, useState } from 'react';\r\nimport { FaSistrix, FaAngleUp } from 'react-icons/fa';\r\nimport NavDropdown from './NavDropdown';\r\nimport ProfileEditor from '../Login/Profiles/ProfileEditor/ProfileEditor';\r\nimport AccountEditor from '../Login/Profiles/ProfileEditor/AccountEditor';\r\n\r\nfunction Nav(props) {\r\n  const [displayNav, setDisplayNav] = useState(false);\r\n  const [displayDropdown, setDisplayDropdown] = useState(false);\r\n  const [displaySearch, setDisplaySearch] = useState(false);\r\n  const searchRef = useRef('');\r\n  const [editingProfile, setEditingProfile] = useState(false);\r\n  const [editingAccount, setEditingAccount] = useState(false);\r\n\r\n  const profile = props.activeProfile;\r\n\r\n  const closeNavDropdown = () => {\r\n    setDisplayDropdown(false);\r\n  };\r\n\r\n  const closeSearch = () => {\r\n    if (searchRef.current.value.length > 0) {\r\n      return;\r\n    }\r\n    setDisplaySearch(false);\r\n  };\r\n\r\n  const formSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const searchValue = searchRef.current.value.trim();\r\n    if (searchValue.length == 0) return;\r\n    props.fetchSubmittedGame(searchValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // If the user scrolls down from the top of page, add a black background to the nav\r\n    const scrollNavListener = () => {\r\n      window.addEventListener('scroll', () => {\r\n        if (window.scrollY > 100) {\r\n          setDisplayNav(true);\r\n        } else setDisplayNav(false);\r\n      });\r\n    };\r\n    scrollNavListener();\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', scrollNavListener);\r\n    };\r\n  }, []);\r\n\r\n  const cancelEdit = () => {\r\n    document.body.style.overflowY = 'scroll';\r\n    setEditingProfile(false);\r\n    setEditingAccount(false);\r\n  };\r\n\r\n  const editProfileHandler = () => {\r\n    document.body.style.overflowY = 'hidden';\r\n    setEditingProfile(true);\r\n  };\r\n\r\n  const editAccountHandler = () => {\r\n    document.body.style.overflowY = 'hidden';\r\n    setEditingAccount(true);\r\n  };\r\n\r\n  const saveEdit = () => {\r\n    props.saveEdit();\r\n    setEditingProfile(false);\r\n  };\r\n\r\n  // Handles escape key press for search input\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        // If the search input is open, close it\r\n        setDisplaySearch(false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${displayNav && 'nav__hide'}`}>\r\n      {editingProfile && (\r\n        <div className='nav_edit_profile'>\r\n          <ProfileEditor\r\n            currentProfile={profile}\r\n            userEmail={props.currentUser.email}\r\n            viewAllProfiles={cancelEdit}\r\n            saveEdit={saveEdit}\r\n            getProfile={(test) => props.selectProfile(test)}\r\n            twitchToken={props.twitchToken}\r\n          />\r\n        </div>\r\n      )}\r\n      {editingAccount && (\r\n        <div className='nav_edit_profile'>\r\n          {' '}\r\n          <AccountEditor\r\n            closeAccountSettings={cancelEdit}\r\n            setLoggedUser={(user) => props.setLoggedUser(user)}\r\n            currentUser={props.currentUser}\r\n          />{' '}\r\n        </div>\r\n      )}\r\n      <img\r\n        className='nav__logo'\r\n        src={logo}\r\n        alt='GameFlix Logo'\r\n        onClick={() => (window.location = '/')}\r\n      />\r\n      <div className='nav__right'>\r\n        <div className='nav__search'>\r\n          {displaySearch && (\r\n            <form className='nav__search_form' onSubmit={formSubmitHandler}>\r\n              <input\r\n                ref={searchRef}\r\n                autoFocus\r\n                type='text'\r\n                placeholder='Titles, publishers, genres'\r\n                defaultValue={\r\n                  props.searchedGame ? `${props.searchedGame.name}` : ''\r\n                }\r\n                onBlur={closeSearch}\r\n              />\r\n            </form>\r\n          )}\r\n          <FaSistrix\r\n            className={`nav__search_icon ${displaySearch && 'search_active'}`}\r\n            onClick={() => setDisplaySearch(!displaySearch)}\r\n          />\r\n        </div>\r\n        <div\r\n          className='nav__actions'\r\n          onMouseLeave={() => setDisplayDropdown(false)}\r\n        >\r\n          <div\r\n            className='nav__avatar_container'\r\n            onMouseOver={() => setDisplayDropdown(true)}\r\n          >\r\n            <img\r\n              className='nav__avatar'\r\n              src={profile.avatar ? profile.avatar : defaultAvatar}\r\n              // style={{ backgroundColor: profile.color }}\r\n              alt=\"User's avatar\"\r\n            />\r\n          </div>\r\n          <FaAngleUp\r\n            className='nav__avatar_arrow'\r\n            style={{\r\n              transform: `${\r\n                displayDropdown ? 'rotate(180deg)' : 'rotate(0deg)'\r\n              }`,\r\n            }}\r\n          />\r\n          {/* <NavDropdown /> */}\r\n          {displayDropdown && (\r\n            <NavDropdown\r\n              changeProfile={props.changeUser}\r\n              activeProfile={profile}\r\n              allProfiles={props.currentUser.profiles}\r\n              logoutHandler={props.onLogout}\r\n              closeNavDropdown={closeNavDropdown}\r\n              toProfilePage={props.toProfilePage}\r\n              spotifyToken={props.spotifyToken}\r\n              editProfile={editProfileHandler}\r\n              editAccount={editAccountHandler}\r\n              updateCollection={props.updateCollection}\r\n              currentCollection={props.currentCollection}\r\n              viewCollection={props.viewCollection}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './MainRow.css';\r\nimport axios from 'axios';\r\nimport { FaAngleUp } from 'react-icons/fa';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\n\r\nconst MainRow = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [currentFilter, setCurrentFilter] = useState('Week');\r\n  const [changingFilter, setChangingFilter] = useState(false);\r\n  const [currentlyViewing, setCurrentlyViewing] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  let todaysDate = new Date();\r\n  const weekDateFormat = Math.floor(\r\n    new Date(todaysDate.getTime() + 7 * 24 * 60 * 60 * 1000) / 1000\r\n  );\r\n  const monthDateFormat = Math.floor(\r\n    new Date(\r\n      new Date(weekDateFormat * 1000).setMonth(\r\n        new Date(weekDateFormat * 1000).getMonth() + 1\r\n      )\r\n    ).getTime() / 1000\r\n  );\r\n  const yearDateFormat = Math.floor(\r\n    new Date(\r\n      new Date(monthDateFormat * 1000).setMonth(\r\n        new Date(monthDateFormat * 1000).getMonth() + 12\r\n      )\r\n    ).getTime() / 1000\r\n  );\r\n\r\n  // use pagination (scroll api) to get all game titles and year. Maybe get it every 24 hours using a cron job. Cache it locally and use that to autocomplete game titles. That's what we do internally.\r\n\r\n  const filterUniques = (list) => {\r\n    const uniques = [];\r\n    const filteredList = [];\r\n    list.map((game) => {\r\n      if (uniques.indexOf(game.game.name) === -1) {\r\n        uniques.push(game.game.name);\r\n        filteredList.push(game);\r\n      }\r\n    });\r\n    return filteredList;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Grab upcoming games based on current date filter\r\n    if (!twitchToken) return;\r\n    setLoading(true);\r\n    async function fetchData() {\r\n      let startDate;\r\n      let targetDate;\r\n\r\n      switch (currentFilter) {\r\n        case 'Month':\r\n          startDate = weekDateFormat;\r\n          targetDate = monthDateFormat;\r\n          break;\r\n        case 'Year':\r\n          startDate = monthDateFormat;\r\n          targetDate = yearDateFormat;\r\n          break;\r\n        default:\r\n          startDate = Math.floor(todaysDate.getTime() / 1000);\r\n          targetDate = weekDateFormat;\r\n          break;\r\n      }\r\n\r\n      try {\r\n        const retries = 3;\r\n        for (let i = 0; i < retries; i++) {\r\n          try {\r\n            const request = await axios.post(`${baseURL}/app/upcoming`, {\r\n              token: twitchToken,\r\n              currentDate: startDate,\r\n              targetDate,\r\n            });\r\n            setGames(filterUniques(request.data));\r\n            setLoading(false);\r\n            break;\r\n          } catch (error) {\r\n            console.log('Issue fetching data');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [currentFilter, twitchToken]);\r\n\r\n  // Handler to change the filter type (Week, Month, Year)\r\n  const changeFilterDate = (e) => {\r\n    setCurrentFilter(e.target.innerText);\r\n    setChangingFilter(false);\r\n  };\r\n\r\n  // Convert the YYYY-MM-DD to Month, Day, Year\r\n  const convertDate = (date) => {\r\n    let months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December',\r\n    ];\r\n\r\n    // Replace hypens with dashes to get correct date\r\n    // Hypens returned the date previous from current due to some weird Date bug\r\n    let now = new Date(date.replace(/-/g, '/'));\r\n    let currentDay = now.getDate();\r\n    let formattedDay;\r\n\r\n    // Give the numbered day the appropriate abbriviation\r\n    switch (currentDay) {\r\n      case 1:\r\n      case 21:\r\n      case 31:\r\n        formattedDay = currentDay + 'st';\r\n        break;\r\n      case 2:\r\n      case 22:\r\n        formattedDay = currentDay + 'nd';\r\n        break;\r\n      case 3:\r\n      case 23:\r\n        formattedDay = currentDay + 'rd';\r\n        break;\r\n      // Most days have the th ending (28th) so set as default\r\n      default:\r\n        formattedDay = currentDay + 'th';\r\n        break;\r\n    }\r\n    return (\r\n      months[now.getMonth()] + ' ' + formattedDay + ', ' + now.getFullYear()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onMouseOver={() => setCurrentlyViewing(true)}\r\n      onMouseOut={() => setCurrentlyViewing(false)}\r\n      className='main_row'\r\n    >\r\n      <div\r\n        className='main_row__filters'\r\n        onMouseLeave={() => setChangingFilter(false)}\r\n      >\r\n        <h2>Coming Soon</h2>\r\n        {/* Filter Type */}\r\n        <p\r\n          className='filters_filter'\r\n          onMouseOver={() => setChangingFilter(true)}\r\n        >\r\n          {currentFilter}{' '}\r\n          <FaAngleUp\r\n            size={10}\r\n            className={changingFilter ? 'arrow_active' : 'arrow'}\r\n          />\r\n        </p>{' '}\r\n        {changingFilter && (\r\n          <div className='filter_options'>\r\n            <ul>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Week' ? 'white' : '',\r\n                  color: currentFilter == 'Week' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Week\r\n              </li>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Month' ? 'white' : '',\r\n                  color: currentFilter == 'Month' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Month\r\n              </li>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Year' ? 'white' : '',\r\n                  color: currentFilter == 'Year' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Year\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className='main_row__row_posters'>\r\n        {games &&\r\n          !loading &&\r\n          games.map((game, i) => (\r\n            <div\r\n              className={`main_row__poster_container ${\r\n                currentlyViewing && 'dimmed'\r\n              }`}\r\n              onClick={() => setGameDetails(game.game)}\r\n              key={game.id}\r\n            >\r\n              <h4 className='main__poster_released'>\r\n                {convertDate(game.human)}\r\n              </h4>\r\n              <img\r\n                key={game.id}\r\n                className='main_poster'\r\n                src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.game.cover?.image_id}.jpg`}\r\n                alt={game.name}\r\n              />\r\n            </div>\r\n          ))}\r\n        {loading && (\r\n          <div className='main_row__loading_container'>\r\n            {[...Array(4)].map((item, i) => (\r\n              <div key={i} className='main_row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainRow;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './TrendingRow.css';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport GamePreview from '../Row/GamePreview/GamePreview';\r\nimport axios from 'axios';\r\n\r\nconst TrendingRow = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [currentGame, setCurrentGame] = useState('');\r\n  const [displayDetails, setDisplayDetails] = useState(false);\r\n  const [currentlyOpen, setCurrentlyOpen] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  let currentDate = Math.floor(new Date().getTime() / 1000);\r\n  let trendingTitlesFetched = JSON.parse(sessionStorage.getItem('trending'));\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken) return;\r\n    if (trendingTitlesFetched && trendingTitlesFetched.length > 0) {\r\n      setGames(trendingTitlesFetched);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    // Grab games from each genre\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      try {\r\n        let trendingTitles = [];\r\n        const request = await axios.post(`${baseURL}/app/trending`, {\r\n          token: twitchToken,\r\n          currentDate: currentDate,\r\n        });\r\n\r\n        const uniqueTitles = new Set();\r\n        request.data.filter(\r\n          (item) =>\r\n            !uniqueTitles.has(item.game.id) &&\r\n            uniqueTitles.add(item.game.id).add(item.game)\r\n        );\r\n\r\n        uniqueTitles.forEach(\r\n          (game) => typeof game == 'object' && trendingTitles.push(game)\r\n        );\r\n\r\n        trendingTitles.sort(\r\n          (a, b) =>\r\n            b.release_dates.findLast((dates) => dates.date) -\r\n              a.release_dates.findLast((dates) => dates.date) ||\r\n            b.hypes - a.hypes\r\n        );\r\n\r\n        setGames(trendingTitles.slice(0, 10));\r\n\r\n        sessionStorage.setItem(\r\n          'trending',\r\n          JSON.stringify(trendingTitles.slice(0, 10))\r\n        );\r\n        setLoading(false);\r\n        return request;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [twitchToken]);\r\n\r\n  // Grab trailer video from selected game\r\n  const fetchGameDetails = (game) => {\r\n    setGameDetails(game);\r\n    setCurrentlyOpen(game.name);\r\n    setCurrentGame(game);\r\n  };\r\n\r\n  const closeGameDetails = () => {\r\n    setCurrentlyOpen(null);\r\n    setCurrentGame(null);\r\n  };\r\n\r\n  if (loading)\r\n    return (\r\n      <div className='row__loading_container'>\r\n        {[...Array(10)].map((item, i) => (\r\n          <div key={i} className='trending_row__placeholder__wrapper'>\r\n            <Placeholder key={i} delay={i} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className='trending_row'>\r\n      <h2>TRENDING TITLES</h2>\r\n\r\n      <div className='trending_row__posters'>\r\n        {games.map((game, i) => (\r\n          <React.Fragment key={game.name}>\r\n            <div className='trending_row__poster_wrapper'>\r\n              <div className='trending_row__rank'>{i + 1}</div>\r\n              <div\r\n                className='trending_row__poster_container'\r\n                style={{\r\n                  marginLeft: (i == 9 && '160px') || (i == 0 && '65px'),\r\n                }}\r\n                onClick={() => setGameDetails(game.game)}\r\n              >\r\n                {' '}\r\n                {!loading && (\r\n                  <>\r\n                    <img\r\n                      loading='lazy'\r\n                      className='trending_row__poster'\r\n                      src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                      alt={game.name}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n              {currentlyOpen === game.name && (\r\n                <GamePreview\r\n                  game={currentGame}\r\n                  displayDetails={displayDetails}\r\n                  hideDetails={closeGameDetails}\r\n                />\r\n              )}\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendingRow;\r\n","import React, { useEffect } from 'react';\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport SpotifyWebApi from 'spotify-web-api-node';\r\nimport './SpotifyPlayback.css';\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  clientId: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\r\n});\r\n\r\nconst activeProfile = localStorage.getItem('profile');\r\n\r\nconst SpotifyPlayback = ({\r\n  trackUri,\r\n  playAudio,\r\n  beginPlayback,\r\n  pausePlayback,\r\n  spotifyToken,\r\n}) => {\r\n  useEffect(() => {\r\n    spotifyApi.setAccessToken(spotifyToken);\r\n  }, [spotifyToken]);\r\n\r\n  useEffect(() => {\r\n    beginPlayback();\r\n  }, [trackUri]);\r\n\r\n  if (!spotifyToken) return;\r\n  return (\r\n    <>\r\n      <div className='playback_container'>\r\n        <SpotifyPlayer\r\n          token={spotifyToken}\r\n          callback={(state) => {\r\n            if (!state.isPlaying) pausePlayback();\r\n          }}\r\n          uris={trackUri ? [trackUri] : []}\r\n          play={playAudio}\r\n          styles={{\r\n            color: 'white',\r\n            bgColor: 'rgba(0,0,0,0.8)',\r\n            sliderColor: activeProfile.color,\r\n            trackArtistColor: 'white',\r\n            trackNameColor: activeProfile.color,\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpotifyPlayback;\r\n","import { useEffect, useCallback, useState } from 'react';\r\n\r\nconst useContextMenu = () => {\r\n  const [anchorPoint, setAnchorPoint] = useState({ x: 0, y: 0 });\r\n  const [showBannerMenu, setShowBannerMenu] = useState(false);\r\n  const [showTitleMenu, setShowTitleMenu] = useState(false);\r\n  const handleContextMenu = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n      if (\r\n        event.target.className === 'user_game_banner_img' &&\r\n        !showBannerMenu\r\n      ) {\r\n        setAnchorPoint({ x: event.offsetX, y: event.pageY });\r\n        setShowBannerMenu(true);\r\n        setShowTitleMenu(false);\r\n      }\r\n      if (event.target.className === 'title_list__item') {\r\n        setAnchorPoint({ x: event.movementX + 5, y: event.y + 20 });\r\n        setShowTitleMenu(true);\r\n        setShowBannerMenu(false);\r\n      }\r\n    },\r\n    [setAnchorPoint]\r\n  );\r\n\r\n  const handleClick = useCallback(() => {\r\n    if (showTitleMenu) setShowTitleMenu(false);\r\n    if (showBannerMenu) setShowBannerMenu(false);\r\n  }, [showTitleMenu, showBannerMenu]);\r\n\r\n  const resetContext = () => {\r\n    setShowBannerMenu(false);\r\n    setShowTitleMenu(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('click', handleClick);\r\n    document.addEventListener('contextmenu', handleContextMenu);\r\n    return () => {\r\n      document.removeEventListener('click', handleClick);\r\n      document.removeEventListener('contextmenu', handleContextMenu);\r\n    };\r\n  });\r\n  return { anchorPoint, showTitleMenu, showBannerMenu, resetContext };\r\n};\r\n\r\nexport default useContextMenu;\r\n","import React, { useState } from 'react';\r\nimport './UserNotes.css';\r\nimport { BsArrowLeft } from 'react-icons/bs';\r\n\r\nconst NoteDetails = ({ note, closeNote, updateNote, deleteNote }) => {\r\n  const [noteValue, setNoteValue] = useState(note.note);\r\n\r\n  return (\r\n    <div className='note_details__container'>\r\n      <span className='note_details__date'>{note.date}</span>\r\n      <BsArrowLeft className='note_details__back_icon' onClick={closeNote} />\r\n      <div className='note_details__details'>\r\n        <h4 className='note_details_note'>Note Details</h4>\r\n        <textarea\r\n          value={noteValue}\r\n          onChange={(e) => setNoteValue(e.target.value)}\r\n          className='note_details__editor'\r\n        />\r\n      </div>\r\n      <div className='note_details__actions'>\r\n        <button onClick={() => updateNote(note, noteValue)}>Save Note</button>\r\n        <button onClick={() => deleteNote(note.note)}>Delete Note</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteDetails;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './UserNotes.css';\r\nimport { AiOutlinePlus } from 'react-icons/ai';\r\nimport { MdEditNote } from 'react-icons/md';\r\nimport { FaAngleDown } from 'react-icons/fa';\r\nimport { IoTrashOutline } from 'react-icons/io5';\r\nimport axios from 'axios';\r\nimport NoteDetails from './NoteDetails';\r\n\r\n// Get current date and format it\r\nconst today = new Date();\r\nconst yyyy = today.getFullYear();\r\nlet mm = today.getMonth() + 1; // Months start at 0!\r\nlet dd = today.getDate();\r\nif (dd < 10) dd = '0' + dd;\r\nif (mm < 10) mm = '0' + mm;\r\nconst formattedToday = mm + '/' + dd + '/' + yyyy;\r\n\r\nconst UserGameNotes = ({\r\n  profile,\r\n  windowViewHandler,\r\n  viewStatus,\r\n  gameNotes,\r\n}) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const userEmail = localStorage.getItem('user');\r\n\r\n  // Tab Hooks\r\n  const [currentTab, setCurrentTab] = useState('');\r\n  const [editingTab, setEditingTab] = useState(false);\r\n  const [tabValue, setTabValue] = useState('');\r\n  const [addingTab, setAddingTab] = useState(false);\r\n  // Note Hooks\r\n  const [noteValue, setNoteValue] = useState('');\r\n  const [currentNote, setCurrentNote] = useState(null);\r\n  let noteTab = gameNotes?.gameNotes?.filter(\r\n    (item) => item.tabName == currentTab\r\n  )[0];\r\n  const notesRef = useRef(null);\r\n  const tabRef = useRef(null);\r\n  const tabEndRef = useRef(null);\r\n\r\n  const createNotes = async () => {\r\n    const request = await axios.post(`${baseURL}/notes/create_note`, {\r\n      email: userEmail,\r\n      profile: profile.name,\r\n    });\r\n    return request;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!profile.notesId) {\r\n      createNotes();\r\n    } else {\r\n      if (currentNote !== null) return;\r\n      notesRef?.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [gameNotes, currentTab]);\r\n\r\n  useEffect(() => {\r\n    const handleEnter = (event) => {\r\n      if (editingTab) {\r\n        if (event.keyCode == 13) {\r\n          console.log(tabValue);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEnter);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEnter);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!gameNotes) return;\r\n    setCurrentTab(gameNotes?.gameNotes[0]?.tabName);\r\n    console.log('new game');\r\n  }, [gameNotes]);\r\n\r\n  useEffect(() => {\r\n    if (currentNote !== null) return;\r\n    tabRef.current.focus();\r\n    setEditingTab(false);\r\n    setNoteValue('');\r\n    setTabValue('');\r\n  }, [tabRef, noteTab]);\r\n\r\n  useEffect(() => {\r\n    // tabEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n  console.log(gameNotes);\r\n\r\n  const updateProfileNotes = async () => {\r\n    if (!gameNotes) return;\r\n    const request = await axios.put(`${baseURL}/notes/update_notes`, {\r\n      userNotesId: profile.notesId,\r\n      noteId: gameNotes.id,\r\n      notes: gameNotes,\r\n    });\r\n\r\n    console.log(request);\r\n  };\r\n\r\n  const editTabHandler = () => {\r\n    if (!editingTab) {\r\n      setEditingTab(true);\r\n    } else {\r\n      noteTab.tabName = tabRef.current.innerText;\r\n      updateProfileNotes();\r\n      setCurrentTab(tabRef.current.innerText);\r\n      setEditingTab(false);\r\n    }\r\n  };\r\n\r\n  let timer;\r\n  const addTabHandler = (e) => {\r\n    e.stopPropagation();\r\n    setAddingTab(true);\r\n    timer = setTimeout(\r\n      () => tabEndRef.current.scrollIntoView({ behavior: 'smooth' }),\r\n      150\r\n    );\r\n  };\r\n\r\n  const formSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (noteValue == '') return;\r\n    noteTab.notes.push({\r\n      id: noteTab.notes.length + 1,\r\n      note: noteValue,\r\n      date: formattedToday,\r\n    });\r\n    updateProfileNotes();\r\n    setNoteValue('');\r\n  };\r\n\r\n  const tabFormSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (tabValue == '') return;\r\n    gameNotes.gameNotes.push({\r\n      tabName: tabValue,\r\n      notes: [],\r\n    });\r\n    setCurrentTab(tabValue);\r\n    updateProfileNotes();\r\n    setTabValue('');\r\n    setAddingTab(false);\r\n  };\r\n\r\n  const viewNoteHandler = (note) => {\r\n    setCurrentNote(note);\r\n    setAddingTab(false);\r\n    setEditingTab(false);\r\n  };\r\n\r\n  const saveNoteHandler = (oldNote, newNote) => {\r\n    console.log(oldNote);\r\n    oldNote.note = newNote;\r\n    oldNote.date = formattedToday;\r\n    updateProfileNotes();\r\n\r\n    setCurrentNote(null);\r\n  };\r\n\r\n  const deleteNoteHandler = (note) => {\r\n    const updatedList = noteTab.notes.filter((item) => item.note !== note);\r\n    noteTab.notes = updatedList;\r\n    updateProfileNotes();\r\n\r\n    setCurrentNote(null);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`user_notes__wrapper ${\r\n        !viewStatus.notes && 'minimized_notes'\r\n      }`}\r\n    >\r\n      <FaAngleDown\r\n        style={{\r\n          transform: !viewStatus.notes ? 'rotate(0)' : 'rotate(180deg)',\r\n          display: currentNote && 'none',\r\n        }}\r\n        className='user_game__minimize_icon'\r\n        onClick={() => windowViewHandler('notes')}\r\n      />\r\n      {currentNote ? (\r\n        <NoteDetails\r\n          note={currentNote}\r\n          closeNote={() => setCurrentNote(null)}\r\n          updateNote={saveNoteHandler}\r\n          deleteNote={deleteNoteHandler}\r\n        />\r\n      ) : (\r\n        <>\r\n          <>\r\n            <h4\r\n              contentEditable={editingTab}\r\n              suppressContentEditableWarning={true}\r\n              onBlur={editTabHandler}\r\n              // onInput={(e) => e.preventDefault()}\r\n              onKeyPress={(e) => {\r\n                e.preventDefault();\r\n                console.log(e.currentTarget);\r\n                if (e.key === 'Enter') editTabHandler();\r\n              }}\r\n              // onKeyUp={(e) => {\r\n              //   if (e.key === 'Enter') editTabHandler();\r\n              // }}\r\n            >\r\n              <p\r\n                ref={tabRef}\r\n                style={{\r\n                  borderBottom: editingTab\r\n                    ? '2px solid #9147ff'\r\n                    : '2px solid transparent',\r\n                  userSelect: editingTab ? 'auto' : 'none',\r\n                  padding: '0px 6px',\r\n                  transition: 'all 200ms',\r\n                }}\r\n              >\r\n                {currentTab}\r\n              </p>{' '}\r\n              <MdEditNote\r\n                className='edit_tab_icon'\r\n                onClick={() => setEditingTab(!editingTab)}\r\n              />{' '}\r\n            </h4>\r\n            <div className='user_notes__header'>\r\n              <ul className='user_notes__tabs'>\r\n                {gameNotes?.gameNotes?.map((item) => (\r\n                  <li\r\n                    key={item.tabName}\r\n                    className='user_notes__tab'\r\n                    onClick={() => setCurrentTab(item.tabName)}\r\n                    style={{\r\n                      borderBottom:\r\n                        currentTab == item.tabName && '1px solid transparent',\r\n                    }}\r\n                  >\r\n                    {item.tabName}\r\n                  </li>\r\n                ))}\r\n                <li\r\n                  className={`user_notes__tab ${\r\n                    addingTab ? 'add_tab' : 'new_tab'\r\n                  }`}\r\n                  // onClick={() => !addingTab && setAddingTab(true)}\r\n                  onClick={addTabHandler}\r\n                >\r\n                  {!addingTab ? (\r\n                    <AiOutlinePlus />\r\n                  ) : (\r\n                    <div className='new_tab__container'>\r\n                      <form onSubmit={tabFormSubmitHandler}>\r\n                        <input\r\n                          value={tabValue}\r\n                          onChange={(e) => setTabValue(e.target.value)}\r\n                        />\r\n                      </form>\r\n                      <p\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          setAddingTab(false);\r\n                        }}\r\n                      >\r\n                        X\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </li>\r\n                <div ref={tabEndRef} />\r\n              </ul>\r\n            </div>\r\n          </>\r\n          <div className='user_notes__notes_wrapper'>\r\n            <ul className='user_notes__notes'>\r\n              {gameNotes?.gameNotes?.filter(\r\n                (item) => item.tabName == currentTab\r\n              )[0]?.notes?.length > 0 ? (\r\n                gameNotes?.gameNotes\r\n                  ?.filter((item) => item.tabName == currentTab)[0]\r\n                  ?.notes.map((note) => (\r\n                    <li\r\n                      key={note.note}\r\n                      className='user_note'\r\n                      onClick={() => viewNoteHandler(note)}\r\n                    >\r\n                      {note.note}\r\n                    </li>\r\n                  ))\r\n              ) : (\r\n                <p className='no_notes_msg'>No Notes</p>\r\n              )}\r\n            </ul>\r\n          </div>\r\n          <div ref={notesRef} style={{ width: '10px', marginLeft: '5px' }} />\r\n          <div\r\n            className='user_notes__form_container'\r\n            style={{ display: `${!viewStatus.notes ? 'none' : 'block'}` }}\r\n          >\r\n            <form className='user_notes__form' onSubmit={formSubmitHandler}>\r\n              <input\r\n                value={noteValue}\r\n                onChange={(e) => setNoteValue(e.target.value)}\r\n                className='user_notes__input'\r\n                placeholder='I think Clark Kent is Batman'\r\n              />\r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserGameNotes;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './UserGame.css';\r\nimport axios from 'axios';\r\nimport { FiClock } from 'react-icons/fi';\r\nimport { FaMedal, FaMusic, FaAngleDown } from 'react-icons/fa';\r\nimport { DynamicStar } from 'react-dynamic-star';\r\nimport useContextMenu from '../../hooks/useContextMenu';\r\nimport UserGameNotes from './UserNotes';\r\n\r\nconst today = new Date();\r\nconst yyyy = today.getFullYear();\r\nlet mm = today.getMonth() + 1; // Months start at 0!\r\nlet dd = today.getDate();\r\nif (dd < 10) dd = '0' + dd;\r\nif (mm < 10) mm = '0' + mm;\r\nconst formattedToday = mm + '/' + dd + '/' + yyyy;\r\n\r\nconst UserGame = ({\r\n  game,\r\n  activeProfile,\r\n  closeStats,\r\n  setProfile,\r\n  setNotification,\r\n  setCurrentGame,\r\n  updateCollection,\r\n  userNotes,\r\n}) => {\r\n  // RATING, PLAYTIME, ACHIEVEMENTS, SPOTIFY, NOTES, STATUS(COMPLETED, BACKLOG, ETC.), PLATFORMS OWNED\r\n  const { anchorPoint, showBannerMenu, resetContext } = useContextMenu();\r\n  // Achievement States\r\n  const [viewStatus, setViewStatus] = useState({\r\n    achievements: true,\r\n    notes: true,\r\n    trophies: true,\r\n  });\r\n  const [achievements, setAchievements] = useState(game.achievements);\r\n  const [trophies, setTrophies] = useState(game.trophies);\r\n  const [achievementFilter, setAchievementFilter] = useState('unlocked');\r\n  const [trophyFilter, setTrophyFilter] = useState('unlocked');\r\n  // Playtime States\r\n  const [playtime, setPlaytime] = useState(Math.floor(game.playtime / 60));\r\n  const [changingPlaytime, setChangingPlaytime] = useState(false);\r\n  // Rating States\r\n  const [rating, setRating] = useState(game.user_rating);\r\n  const [changingRating, setChangingRating] = useState(false);\r\n  const [gameNews, setGameNews] = useState(null);\r\n  const [changingBanner, setChangingBanner] = useState(false);\r\n  const [bannerLink, setBannerLink] = useState('');\r\n  // BACKLOG, CURRENTLY PLAYING, COMPLETED, STARTED, ABANDONED, 100%, NOT OWNED\r\n  const [backlogStatus, setBacklogStatus] = useState(game.status);\r\n  const [changingBacklog, setChangingBacklog] = useState(false);\r\n  // Hooks and Storage Variables\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const steamID = localStorage.getItem('steamID');\r\n  const achievementsIntegrated = localStorage.getItem('achivementsConn');\r\n  const userEmail = localStorage.getItem('user');\r\n  const trophyPercentage = Math.floor(\r\n    (trophies?.filter((game) => game.earned == true).length /\r\n      trophies?.length) *\r\n      100\r\n  );\r\n  const achievementPercentage = Math.floor(\r\n    (achievements?.filter(\r\n      (game) => game.achieved == true || game.earned == true\r\n    ).length /\r\n      achievements?.length) *\r\n      100\r\n  );\r\n\r\n  console.log(game);\r\n\r\n  const gamefaqsURL = `https://gamefaqs.gamespot.com/search?game=${game.name.replaceAll(\r\n    ' ',\r\n    '+'\r\n  )}`;\r\n\r\n  const addNoteItem = () => {\r\n    userNotes.notes_collection.push({\r\n      id: game.id,\r\n      gameNotes: [\r\n        {\r\n          tabName: 'Notes',\r\n          notes: [\r\n            {\r\n              id: 0,\r\n              note: `These are your notes for ${game.name}! Click me to edit this or start your own tab by clicking the +!`,\r\n              date: formattedToday,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userNotes.notes_collection.filter((g) => g.id == game.id).length > 0)\r\n      return;\r\n    else addNoteItem();\r\n  }, [game]);\r\n\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        setChangingRating(false);\r\n        setChangingBacklog(false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  // Runs everytime game changes\r\n  useEffect(() => {\r\n    setChangingPlaytime(false);\r\n    setChangingRating(false);\r\n    setChangingBacklog(false);\r\n    setBacklogStatus(game.status || 'BACKLOG');\r\n    setPlaytime(Math.floor(game.playtime / 60));\r\n    setRating(game.user_rating);\r\n    setAchievements(game.achievements);\r\n    setTrophies(game.trophies);\r\n    if (!steamID) {\r\n      console.log('No steam id');\r\n      return;\r\n    }\r\n\r\n    // Compare both achievement lists to get Icons\r\n    const getAchievementData = (arr1, arr2) => {\r\n      let dataList = [];\r\n      arr2.map(function (x) {\r\n        var result = arr1.filter((a1) => a1.name == x.displayName);\r\n        if (result.length > 0) {\r\n          x.achieved = result[0].achieved;\r\n        }\r\n        dataList.push(x);\r\n      });\r\n\r\n      // Sort Alphabetically\r\n      dataList.sort(function (a, b) {\r\n        var textA = a.displayName.toUpperCase();\r\n        var textB = b.displayName.toUpperCase();\r\n        return textA < textB ? -1 : textA > textB ? 1 : 0;\r\n      });\r\n\r\n      dataList.sort(function (a, b) {\r\n        return a.achieved < b.achieved ? 1 : a.achieved > b.achieved ? -1 : 0;\r\n      });\r\n      return dataList;\r\n    };\r\n\r\n    // Sort by unlocked Achievements\r\n    const fetchAppData = async () => {\r\n      const steamGameStats = await axios.get(\r\n        `${baseURL}/steam/get_game_stats`,\r\n        {\r\n          params: {\r\n            gameId: game.id,\r\n          },\r\n        }\r\n      );\r\n      if (Object.keys(steamGameStats.data).length == 0) {\r\n        setAchievements(null);\r\n        return;\r\n      }\r\n      try {\r\n        if (!game.achievements) {\r\n          const request = await axios.get(\r\n            `${baseURL}/steam/get_steam_achievements`,\r\n            {\r\n              params: {\r\n                gameId: game.id,\r\n                steamId: steamID,\r\n              },\r\n            }\r\n          );\r\n\r\n          const userAchievementData = getAchievementData(\r\n            request.data.achievements,\r\n            steamGameStats.data.availableGameStats.achievements\r\n          );\r\n\r\n          const addAchievements = await axios.put(\r\n            `${baseURL}/app/update_game_achievements`,\r\n            {\r\n              email: userEmail,\r\n              currentProfile: activeProfile.name,\r\n              achievements: userAchievementData,\r\n              gameId: game.id,\r\n            }\r\n          );\r\n\r\n          console.log(addAchievements);\r\n          setCurrentGame(request.data.response.game);\r\n          updateCollection(request.data.response.profile.collection);\r\n          setAchievements(addAchievements.data.response.game.achievements);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n\r\n      // setPlaytime(Math.floor(game.playtime / 60));\r\n      // setRating(game.user_rating);\r\n    };\r\n    fetchAppData();\r\n  }, [game]);\r\n\r\n  const handleMouseMove = (event) => {\r\n    const bounds = event.currentTarget.getBoundingClientRect();\r\n    const position = Math.floor(event.clientX - bounds.left) / 20;\r\n    setRating(Math.floor(event.clientX - bounds.left) / 20);\r\n  };\r\n\r\n  const getAchievementCount = (list) => {\r\n    if (!list) return 'N/A';\r\n    const numberAchieved = list.filter(\r\n      (game) => game.achieved == true || game.earned == true\r\n    ).length;\r\n    return numberAchieved + '/' + list.length;\r\n  };\r\n\r\n  // Convert steam minutes to numbers\r\n  function padTo2Digits(num) {\r\n    return num.toString().padStart(2, '0');\r\n  }\r\n\r\n  function toHoursAndMinutes(totalMinutes) {\r\n    if (totalMinutes <= 0 && game.type == 'steam') return 'Not Started';\r\n    else if (totalMinutes <= 0 && game.type !== 'steam') return 0 + ' hours';\r\n    else {\r\n      const minutes = totalMinutes % 60;\r\n      const hours = Math.floor(totalMinutes / 60);\r\n      if (minutes == 0) return hours + ' hours';\r\n      // setPlaytime(hours)\r\n      return `${hours}.${padTo2Digits(minutes)} hours`;\r\n    }\r\n  }\r\n\r\n  const updateRatingHandler = async () => {\r\n    let ratingValue = rating * 20;\r\n    if (rating * 20 >= 100) {\r\n      ratingValue = 100;\r\n    }\r\n\r\n    try {\r\n      const request = await axios.put(`${baseURL}/app/update_game_rating`, {\r\n        email: userEmail,\r\n        currentProfile: activeProfile.name,\r\n        rating: ratingValue,\r\n        gameId: game.id,\r\n      });\r\n      console.log(request);\r\n      localStorage.setItem('profile', request.data.response.profile.name);\r\n      // setProfile(request.data.response.profile);\r\n      setCurrentGame(request.data.response.game);\r\n      updateCollection(request.data.response.profile.collection);\r\n      // setNotification({\r\n      //   message: `${game.name} playtime successfully updated!`,\r\n      //   status: 'SUCCESS',\r\n      // });\r\n      setChangingRating(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // setNotification({\r\n      //   message: `Something went wrong, please try again!`,\r\n      //   status: 'ERROR',\r\n      // });\r\n    }\r\n  };\r\n\r\n  const updatePlaytime = async () => {\r\n    if (game.playtime == playtime) {\r\n      console.log('No new changes');\r\n      return;\r\n    } else {\r\n      try {\r\n        const request = await axios.put(`${baseURL}/app/update_game_playtime`, {\r\n          email: userEmail,\r\n          currentProfile: activeProfile.name,\r\n          playtime: playtime * 60,\r\n          gameId: game.id,\r\n        });\r\n        console.log(request);\r\n        localStorage.setItem('profile', request.data.response.profile.name);\r\n        // setProfile(request.data.response.profile);\r\n        setCurrentGame(request.data.response.game);\r\n        updateCollection(request.data.response.profile.collection);\r\n        // setNotification({\r\n        //   message: `${game.name} playtime successfully updated!`,\r\n        //   status: 'SUCCESS',\r\n        // });\r\n        setChangingPlaytime(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        // setNotification({\r\n        //   message: `Something went wrong, please try again!`,\r\n        //   status: 'ERROR',\r\n        // });\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateBacklog = async (status) => {\r\n    console.log('HAPPENING');\r\n\r\n    try {\r\n      const request = await axios.put(`${baseURL}/app/update_game_backlog`, {\r\n        email: userEmail,\r\n        currentProfile: activeProfile.name,\r\n        status: status,\r\n        gameId: game.id,\r\n      });\r\n      console.log(request);\r\n      localStorage.setItem('profile', request.data.response.profile.name);\r\n      console.log(request.data);\r\n      console.log(request.data.response.profile.collection);\r\n      setCurrentGame(request.data.response.game);\r\n      updateCollection(request.data.response.profile.collection);\r\n      // setNotification({\r\n      //   message: `${game.name} backlog successfully updated!`,\r\n      //   status: 'SUCCESS',\r\n      // });\r\n      setChangingBacklog(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      // setNotification({\r\n      //   message: `Something went wrong, please try again!`,\r\n      //   status: 'ERROR',\r\n      // });\r\n    }\r\n  };\r\n\r\n  const updateBacklogHandler = (status) => {\r\n    updateBacklog(status);\r\n    setChangingBacklog(false);\r\n  };\r\n\r\n  // Minimzie or Maximize Height of Game Component\r\n  const windowViewHandler = (data) => {\r\n    setViewStatus({ ...viewStatus, [data]: !viewStatus[data] });\r\n  };\r\n\r\n  // Determine if user is updating or canceling playtime change\r\n  const determinePlaytimeAction = (e) => {\r\n    if (e.key === 'Enter') {\r\n      updatePlaytime();\r\n    }\r\n    if (e.key === 'Escape') {\r\n      setChangingPlaytime(false);\r\n      setPlaytime(Math.floor(game.playtime / 60));\r\n    }\r\n  };\r\n\r\n  const changeBannerHandler = (e) => {\r\n    e.preventDefault();\r\n    setChangingBanner(true);\r\n    resetContext();\r\n  };\r\n\r\n  const updateBanner = async () => {\r\n    if (bannerLink.trim() == '') return;\r\n    try {\r\n      const request = await axios.put(`${baseURL}/app/update_game_banner`, {\r\n        email: userEmail,\r\n        currentProfile: activeProfile.name,\r\n        url: bannerLink,\r\n        gameId: game.id,\r\n      });\r\n      localStorage.setItem('profile', request.data.response.profile.name);\r\n      setCurrentGame(request.data.response.game);\r\n      updateCollection(request.data.response.profile.collection);\r\n      // setNotification({\r\n      //   message: `${game.name} playtime successfully updated!`,\r\n      //   status: 'SUCCESS',\r\n      // });\r\n    } catch (error) {\r\n      console.log(error);\r\n      //   setNotification({\r\n      //     message: `Something went wrong, please try again!`,\r\n      //     status: 'ERROR',\r\n      //   });\r\n    }\r\n    setChangingBanner(false);\r\n    setBannerLink('');\r\n  };\r\n\r\n  return (\r\n    <div className='user_game__wrapper'>\r\n      {changingBanner && (\r\n        <div className='user_game__modal'>\r\n          <div className='modal_content'>\r\n            <h2\r\n              style={{\r\n                maxWidth: '75%',\r\n                textAlign: 'center',\r\n                marginBottom: '25px',\r\n              }}\r\n            >\r\n              Please enter the link to any image or gif below.\r\n            </h2>\r\n\r\n            <div className='modal_form' style={{ width: '100%' }}>\r\n              <input\r\n                style={{ width: '80%' }}\r\n                value={bannerLink}\r\n                onChange={(e) => setBannerLink(e.target.value)}\r\n              />\r\n              <button onClick={updateBanner}>Submit</button>\r\n              <button onClick={() => setChangingBanner(false)}>Back</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className='user_game__banner'>\r\n        {showBannerMenu && (\r\n          <ul\r\n            className='user_game__banner_context'\r\n            style={{ top: anchorPoint.y + 5, left: anchorPoint.x }}\r\n          >\r\n            <li className='banner_context__item' onClick={changeBannerHandler}>\r\n              Set Custom Banner\r\n            </li>\r\n            <li className='banner_context__item'>Set Custom Logo</li>\r\n            <li className='banner_context__item'>Set Default Image</li>\r\n          </ul>\r\n        )}\r\n\r\n        <div className='user_game__exit' onClick={closeStats}>\r\n          X\r\n        </div>\r\n        <img\r\n          className='user_game_banner_img'\r\n          src={\r\n            game.banner_image ||\r\n            game.imageURL.replace('cover_big_2x', '1080p_2x')\r\n          }\r\n        />\r\n        <div className='user_game__current_stats'>\r\n          {/* PLAYTIME */}\r\n          <div className='playtime_container'>\r\n            <FiClock className='playtime_clock_icon' />\r\n            <div className='stats_item'>\r\n              <h3 style={{ color: changingPlaytime && '#9147ff' }}>\r\n                PLAY TIME\r\n              </h3>\r\n              <span\r\n                style={{ display: changingPlaytime && 'none' }}\r\n                className='previous_playtime'\r\n                onClick={() => setChangingPlaytime(true)}\r\n              >\r\n                {toHoursAndMinutes(game.playtime)}\r\n              </span>\r\n              <input\r\n                type='number'\r\n                value={playtime}\r\n                min='0'\r\n                onKeyDown={determinePlaytimeAction}\r\n                onChange={(e) => setPlaytime(e.target.value)}\r\n                className={`playtime_input ${\r\n                  changingPlaytime && 'playtime_focused'\r\n                }`}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* RATING */}\r\n          <div className='rating_container'>\r\n            <div className='stats_item'>\r\n              <h3 style={{ paddingBottom: changingRating && '4px' }}>RATING</h3>\r\n              <span\r\n                onClick={() => setChangingRating(true)}\r\n                className='previous_rating'\r\n                style={{ display: changingRating && 'none' }}\r\n              >\r\n                {game.user_rating || 0}%\r\n              </span>\r\n              <div\r\n                className='rating_stars'\r\n                onMouseMove={handleMouseMove}\r\n                onClick={updateRatingHandler}\r\n                style={{\r\n                  width: !changingRating && '0px',\r\n                  display: !changingRating && 'none',\r\n                }}\r\n              >\r\n                <DynamicStar\r\n                  rating={rating}\r\n                  totalStars={5}\r\n                  width={20}\r\n                  height={20}\r\n                  outlined={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* BACKLOG STATUS */}\r\n          <div className='achievement_count_container'>\r\n            <div className='stats_item'>\r\n              <h3 style={{ paddingTop: '5px' }}>STATUS</h3>\r\n              <button\r\n                onClick={() => setChangingBacklog(!changingBacklog)}\r\n                style={{\r\n                  backgroundColor:\r\n                    backlogStatus == 'BACKLOG'\r\n                      ? 'dodgerblue'\r\n                      : backlogStatus == 'STARTED'\r\n                      ? 'aqua'\r\n                      : backlogStatus == 'FINISHED'\r\n                      ? 'green'\r\n                      : backlogStatus == 'PLAYING'\r\n                      ? 'pink'\r\n                      : backlogStatus == '100%'\r\n                      ? 'gold'\r\n                      : backlogStatus == 'ABANDONDED'\r\n                      ? 'red'\r\n                      : 'grey',\r\n                }}\r\n                className='status_btn'\r\n              >\r\n                {backlogStatus}\r\n              </button>\r\n            </div>\r\n            {changingBacklog && (\r\n              <div className='backlog_items'>\r\n                <ul className='backlog_items_list'>\r\n                  <li\r\n                    style={{\r\n                      backgroundColor: 'BACKLOG' == game.status && '#9147ff',\r\n                      color: 'BACKLOG' == game.status && 'white',\r\n                    }}\r\n                    className='backlog_items_item'\r\n                    onClick={() => {\r\n                      updateBacklogHandler('BACKLOG');\r\n                    }}\r\n                  >\r\n                    Backlog\r\n                  </li>\r\n                  <li\r\n                    style={{\r\n                      backgroundColor: 'STARTED' == game.status && '#9147ff',\r\n                      color: 'STARTED' == game.status && 'white',\r\n                    }}\r\n                    className='backlog_items_item'\r\n                    onClick={() => {\r\n                      updateBacklogHandler('STARTED');\r\n                    }}\r\n                  >\r\n                    Started\r\n                  </li>\r\n                  <li\r\n                    style={{\r\n                      backgroundColor: 'PLAYING' == game.status && '#9147ff',\r\n                      color: 'PLAYING' == game.status && 'white',\r\n                    }}\r\n                    className='backlog_items_item'\r\n                    onClick={() => {\r\n                      updateBacklogHandler('PLAYING');\r\n                    }}\r\n                  >\r\n                    Currently Playing\r\n                  </li>\r\n                  <li\r\n                    style={{\r\n                      backgroundColor: 'FINISHED' == game.status && '#9147ff',\r\n                      color: 'FINISHED' == game.status && 'white',\r\n                    }}\r\n                    className='backlog_items_item'\r\n                    onClick={() => {\r\n                      updateBacklogHandler('FINISHED');\r\n                    }}\r\n                  >\r\n                    Finished\r\n                  </li>\r\n                  <li\r\n                    style={{\r\n                      backgroundColor: '100%' == game.status && '#9147ff',\r\n                      color: '100%' == game.status && 'white',\r\n                    }}\r\n                    className='backlog_items_item'\r\n                    onClick={() => {\r\n                      updateBacklogHandler('100%');\r\n                    }}\r\n                  >\r\n                    100% Completed\r\n                  </li>\r\n                  <li\r\n                    style={{\r\n                      backgroundColor: 'ABANDONDED' == game.status && '#9147ff',\r\n                      color: 'ABANDONDED' == game.status && 'white',\r\n                    }}\r\n                    className='backlog_items_item'\r\n                    onClick={() => {\r\n                      updateBacklogHandler('ABANDONDED');\r\n                    }}\r\n                  >\r\n                    Abandonded\r\n                  </li>\r\n                  <li\r\n                    style={{\r\n                      backgroundColor: 'NOT OWNED' == game.status && '#9147ff',\r\n                      color: 'NOT OWNED' == game.status && 'white',\r\n                    }}\r\n                    className='backlog_items_item'\r\n                    onClick={() => {\r\n                      updateBacklogHandler('NOT OWNED');\r\n                    }}\r\n                  >\r\n                    Not Owned\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* SPOTIFY MUSIC */}\r\n          <div className='music_icon_container'>\r\n            <div className='stats_item' style={{ alignItems: 'center' }}>\r\n              <h3>MUSIC</h3>\r\n              <FaMusic className='music_icon' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* GAME NEWS AND DATA */}\r\n      <div className='user_game__data_wrapper'>\r\n        <div className='user_game__data'>\r\n          {/* OWNED PLATFORMS */}\r\n          {/* <div className='user_game__platforms'>\r\n            <h4>Platforms Owned</h4>\r\n            <ul>{game.origin == 'steam' && <li>Steam</li>}</ul>\r\n          </div> */}\r\n\r\n          {/* ACHIEVEMENT LIST */}\r\n          {achievements && (\r\n            <div\r\n              className={`user_game__achievements_wrapper ${\r\n                !viewStatus.achievements && 'minimized'\r\n              }`}\r\n            >\r\n              <div className='user_game__achievements'>\r\n                <div className='user_game__achievements_banner'>\r\n                  <FaAngleDown\r\n                    style={{\r\n                      transform: !viewStatus.achievements\r\n                        ? 'rotate(0)'\r\n                        : 'rotate(180deg)',\r\n                    }}\r\n                    className='user_game__minimize_icon'\r\n                    onClick={() => windowViewHandler('achievements')}\r\n                  />\r\n                  {achievementPercentage === 100 && (\r\n                    <FaMedal className='user_game__completion_medal' />\r\n                  )}\r\n                  <h4>\r\n                    <p>Achievements</p>\r\n                  </h4>\r\n                  <p>\r\n                    You've unlocked {getAchievementCount(achievements)} (\r\n                    {achievementPercentage}\r\n                    %)\r\n                  </p>\r\n                  <div className='user_game__achievements_progress_bar_container'>\r\n                    <div\r\n                      className='user_game__achievements_progress_bar'\r\n                      style={{\r\n                        width: `${achievementPercentage}%`,\r\n                        background: activeProfile.color,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className='user_game__achievements_actions'>\r\n                    <button\r\n                      className={achievementFilter == 'unlocked' && 'active'}\r\n                      onClick={() => setAchievementFilter('unlocked')}\r\n                    >\r\n                      Unlocked\r\n                    </button>\r\n                    <button\r\n                      className={`${achievementFilter == 'locked' && 'active'}`}\r\n                      onClick={() => setAchievementFilter('locked')}\r\n                    >\r\n                      In Progress\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <ul className='user_game__achievements_list'>\r\n                  {achievements\r\n                    .filter((achievement) =>\r\n                      achievementFilter == 'unlocked'\r\n                        ? achievement.achieved\r\n                        : !achievement.achieved\r\n                    )\r\n                    .sort((a, b) =>\r\n                      a.displayName > b.displayName\r\n                        ? 1\r\n                        : b.displayName > a.displayName\r\n                        ? -1\r\n                        : 0\r\n                    )\r\n                    .map((item) => (\r\n                      <li className='achievement_item'>\r\n                        <div\r\n                          className='achievement_item_icon'\r\n                          style={{ border: `1px solid ${activeProfile.color}` }}\r\n                        >\r\n                          <img\r\n                            className='achievement_item_icon__img'\r\n                            src={item.achieved ? item.icon : item.icongray}\r\n                          />\r\n                        </div>\r\n                        <div className='achievement_item_headers'>\r\n                          <h4>{item.displayName}</h4>\r\n                          {item.description && <p>{item.description}</p>}\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* PLAYSTATION TROPHIES */}\r\n          {trophies && (\r\n            <div\r\n              className={`user_game__achievements_wrapper ${\r\n                !viewStatus.trophies && 'minimized'\r\n              }`}\r\n            >\r\n              <div\r\n                className={`user_game__achievements ${\r\n                  trophyPercentage == 100 && 'completed'\r\n                }`}\r\n              >\r\n                <div className='user_game__achievements_banner'>\r\n                  <FaAngleDown\r\n                    style={{\r\n                      transform: !viewStatus.trophies\r\n                        ? 'rotate(0)'\r\n                        : 'rotate(180deg)',\r\n                    }}\r\n                    className='user_game__minimize_icon'\r\n                    onClick={() => windowViewHandler('trophies')}\r\n                  />\r\n                  {trophyPercentage === 100 && (\r\n                    <FaMedal className='user_game__completion_medal' />\r\n                  )}\r\n                  <h4>\r\n                    <p>Trophies</p>\r\n                  </h4>\r\n                  <p>\r\n                    You've unlocked {getAchievementCount(trophies)} (\r\n                    {trophyPercentage}%)\r\n                  </p>\r\n                  <div className='user_game__achievements_progress_bar_container'>\r\n                    <div\r\n                      className='user_game__achievements_progress_bar'\r\n                      style={{\r\n                        width: `${trophyPercentage}%`,\r\n                        background: activeProfile.color,\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className='user_game__achievements_actions'>\r\n                    <button\r\n                      className={trophyFilter == 'unlocked' && 'active'}\r\n                      onClick={() => setTrophyFilter('unlocked')}\r\n                    >\r\n                      Unlocked\r\n                    </button>\r\n                    {trophyPercentage < 100 && (\r\n                      <button\r\n                        className={`${trophyFilter == 'locked' && 'active'}`}\r\n                        onClick={() => setTrophyFilter('locked')}\r\n                      >\r\n                        In Progress\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <ul className='user_game__achievements_list'>\r\n                  {trophies\r\n                    .filter((trophy) =>\r\n                      trophyFilter == 'unlocked'\r\n                        ? trophy.earned\r\n                        : !trophy.earned\r\n                    )\r\n                    .sort((a, b) =>\r\n                      a.trophyName > b.trophyName\r\n                        ? 1\r\n                        : b.trophyName > a.trophyName\r\n                        ? -1\r\n                        : 0\r\n                    )\r\n                    .map((item) => (\r\n                      <li className='achievement_item' key={item.trophyName}>\r\n                        <div\r\n                          className='achievement_item_icon'\r\n                          style={{ border: `1px solid ${activeProfile.color}` }}\r\n                        >\r\n                          <img\r\n                            className={`achievement_item_icon__img ${\r\n                              !item.earned && 'greyscale'\r\n                            }`}\r\n                            src={item.trophyIconUrl}\r\n                          />\r\n                        </div>\r\n                        <div className='achievement_item_headers'>\r\n                          <h4>{item.trophyName}</h4>\r\n                          {item.trophyDetail && <p>{item.trophyDetail}</p>}\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <UserGameNotes\r\n            profile={activeProfile}\r\n            windowViewHandler={windowViewHandler}\r\n            viewStatus={viewStatus}\r\n            gameNotes={\r\n              userNotes?.notes_collection?.filter(\r\n                (item) => item.id == game.id\r\n              )[0]\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserGame;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './UserCollection.css';\r\nimport { FaSistrix, FaHome, FaStar } from 'react-icons/fa';\r\nimport UserGame from '../UserGame/UserGame';\r\nimport useContextMenu from '../../hooks/useContextMenu';\r\nimport bronzeTrophy from '../../assets/images/ps-trophy-bronze.png';\r\nimport goldTrophy from '../../assets/images/ps-trophy-gold.png';\r\nimport platinumTrophy from '../../assets/images/ps-trophy-platinum.png';\r\n\r\nconst UserCollection = ({\r\n  collection,\r\n  activeProfile,\r\n  backToHome,\r\n  playTrack,\r\n  currentTrack,\r\n  isPlaying,\r\n  pausePlayback,\r\n  resumePlayback,\r\n  spotifyToken,\r\n  setSelectedProfile,\r\n  removeGame,\r\n  updateCollection,\r\n  userNotes,\r\n}) => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [searchList, setSearchList] = useState([]);\r\n  const [viewingList, setViewingList] = useState(false);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [currentGame, setCurrentGame] = useState(null);\r\n  const [currentlyAdjusting, setCurrentlyAdjusting] = useState(null);\r\n  const [changingGame, setChangingGame] = useState(false);\r\n  // SPOTLIGHT STATES\r\n  const [spotlightList, setSpotlightList] = useState([]);\r\n  const [spotlightFilter, setSpotlightFilter] = useState('playtime');\r\n  // COVER LIST STATES\r\n  const [listFilter, setListFilter] = useState('alphabetical');\r\n  const [filteredList, setFilteredList] = useState([]);\r\n  // STATUS LIST STATES\r\n  const [statusFilter, setStatusFilter] = useState('backlog');\r\n  const filterRef = useRef();\r\n\r\n  const { anchorPoint, showTitleMenu } = useContextMenu();\r\n  const trophies = [platinumTrophy, goldTrophy, bronzeTrophy];\r\n\r\n  // If user is typing, filter titles that reflect inputted value\r\n  useEffect(() => {\r\n    if (searchValue == '') {\r\n      setSearchList([]);\r\n      return;\r\n    }\r\n    const delaySearch = setTimeout(() => {\r\n      const res = collection.filter((item) =>\r\n        item.name.toLowerCase().includes(searchValue.toLowerCase())\r\n      );\r\n      setSearchList(res);\r\n    }, 250);\r\n\r\n    return () => clearTimeout(delaySearch);\r\n  }, [searchValue]);\r\n\r\n  // Listen for screen size to determine if user is on mobile\r\n  useEffect(() => {\r\n    if (window.innerWidth <= 600) {\r\n      setIsMobile(true);\r\n    }\r\n    function handleResize() {\r\n      if (window.innerWidth <= 600) {\r\n        setIsMobile(true);\r\n      } else {\r\n        setIsMobile(false);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  // Listen for spotlight filter change\r\n  useEffect(() => {\r\n    if (spotlightFilter == 'playtime') {\r\n      setSpotlightList(\r\n        [...collection].sort((a, b) => b[spotlightFilter] - a[spotlightFilter])\r\n      );\r\n    } else if (spotlightFilter == 'user_rating') {\r\n      setSpotlightList(\r\n        collection\r\n          .filter((game) => game.user_rating)\r\n          .sort((a, b) => b['user_rating'] - a['user_rating'])\r\n      );\r\n    } else {\r\n      setSpotlightList(\r\n        collection\r\n          .filter((game) => game.achievements)\r\n          .sort((a, b) => b['achievements'] - a['achievements'])\r\n      );\r\n    }\r\n  }, [spotlightFilter, collection]);\r\n\r\n  // Listen for list filter change\r\n  useEffect(() => {\r\n    if (listFilter == 'achievements') {\r\n      setFilteredList(\r\n        [...collection]\r\n          .filter((game) => game.achievements)\r\n          .sort((a, b) => b['achievements'] - a['achievements'])\r\n      );\r\n    } else if (listFilter == 'playtime') {\r\n      setFilteredList(\r\n        [...collection]\r\n          .filter((game) => game.playtime > 0)\r\n          .sort((a, b) => b.playtime - a.playtime)\r\n      );\r\n    } else if (listFilter == 'status') {\r\n      setFilteredList(\r\n        [...collection].filter(\r\n          (game) => game.status == statusFilter.toUpperCase()\r\n        )\r\n      );\r\n    } else if (listFilter == 'rating') {\r\n      setFilteredList(\r\n        [...collection]\r\n          .filter((game) => game.user_rating)\r\n          .sort((a, b) => b.user_rating - a.user_rating)\r\n      );\r\n    } else if (listFilter == 'trophies') {\r\n      // const earnedTrophyCount = game.trophies.filter((game) => game.earned);\r\n      setFilteredList(\r\n        [...collection]\r\n          .filter((game) => game.trophies)\r\n          .sort((a, b) => a.trophies - b.trophies)\r\n      );\r\n    } else {\r\n      setFilteredList(\r\n        [...collection].sort((a, b) =>\r\n          a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n        )\r\n      );\r\n    }\r\n  }, [listFilter, statusFilter]);\r\n\r\n  // Select which game is being viewed\r\n  const viewGameHandler = (game) => {\r\n    setCurrentGame(game);\r\n  };\r\n\r\n  // Open up the menu when the user right clicks\r\n  const viewGameHeaders = (e, game) => {\r\n    e.preventDefault();\r\n    setCurrentlyAdjusting(game);\r\n  };\r\n\r\n  // Determine what stat to show based on current filter\r\n  const getFilterStat = (game) => {\r\n    switch (listFilter) {\r\n      case 'playtime':\r\n        if (Math.floor(game.playtime / 60) >= 1) {\r\n          return (\r\n            <span className='filter_stat'>\r\n              {Math.floor(game.playtime / 60)}{' '}\r\n              {Math.floor(game.playtime / 60) == 1 ? 'hour' : 'hours'}\r\n            </span>\r\n          );\r\n        } else {\r\n          return (\r\n            <span className='filter_stat'>\r\n              {game.playtime} {game.playtime == 1 ? 'minute' : 'minutes'}\r\n            </span>\r\n          );\r\n        }\r\n      case 'rating':\r\n        return (\r\n          <span className='filter_stat rating_stat'>{game.user_rating}%</span>\r\n        );\r\n      case 'trophies':\r\n        if (!game.trophies) break;\r\n        const earnedTrophyCount = game?.trophies?.filter((game) => game.earned);\r\n        return (\r\n          <span className='filter_stat'>\r\n            {Math.floor(\r\n              (earnedTrophyCount.length / game.trophies.length) * 100\r\n            )}\r\n            % earned\r\n          </span>\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const removeGameHandler = (e) => {\r\n    e.stopPropagation();\r\n    if (\r\n      Object.keys(currentGame).length > 0 &&\r\n      currentlyAdjusting.id === currentGame.id\r\n    )\r\n      setCurrentGame(null);\r\n    removeGame(currentlyAdjusting);\r\n    setCurrentlyAdjusting(null);\r\n  };\r\n\r\n  // HTML RENDER\r\n  return (\r\n    <div className='user_collection__wrapper'>\r\n      <div\r\n        className='user_collection__container'\r\n        style={{\r\n          background: '#111',\r\n        }}\r\n      >\r\n        {/* LEFT SIDE */}\r\n        <div\r\n          className='user_collection__left'\r\n          style={{\r\n            height: viewingList && '250%',\r\n            marginBottom: viewingList && '25px',\r\n            display: isMobile && currentGame && 'none',\r\n          }}\r\n        >\r\n          <div className='user_collection__left_header'>\r\n            <h2>\r\n              <img\r\n                style={{\r\n                  height: '50px',\r\n                  width: '50px',\r\n                  borderRadius: '4px',\r\n                }}\r\n                src={activeProfile.avatar}\r\n              />\r\n              {activeProfile.name.trim()}'s Collection\r\n              <FaHome\r\n                className='user_collection__home_icon'\r\n                onClick={backToHome}\r\n              />\r\n            </h2>\r\n\r\n            <div className='user_collection__search'>\r\n              <FaSistrix className='user_collection__search_icon' />\r\n              <input\r\n                className='user_collection__search_input'\r\n                value={searchValue}\r\n                onChange={(e) => setSearchValue(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <ul\r\n            className='user_collection__title_list'\r\n            style={{\r\n              height: viewingList && '100%',\r\n              display: viewingList && 'flex',\r\n            }}\r\n          >\r\n            <p\r\n              className='user_collection__total'\r\n              style={{\r\n                color: 'white',\r\n                paddingLeft: '7px',\r\n                marginBottom: '5px',\r\n                position: 'fixed',\r\n                top: '132px',\r\n                left: '1px',\r\n                fontSize: '.95rem',\r\n                width: '100%',\r\n                height: '22px',\r\n                background:\r\n                  'linear-gradient(to right, rgba(25,25,25,.5) 0%,rgba(17,17,17,1) 46%,rgba(1,1,1,1) 50%,rgba(10,10,10,1) 53%,rgba(78,78,78,1) 76%,rgba(56,56,56,1) 87%,rgba(27,27,27,1) 100%)',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              {searchList.length <= 0 && searchValue == '' ? 'All' : 'Results'}{' '}\r\n              (\r\n              <span style={{ fontSize: '.75rem' }}>\r\n                {searchValue == '' ? collection.length : searchList.length}\r\n              </span>\r\n              )\r\n            </p>\r\n\r\n            {searchValue == '' ? (\r\n              collection\r\n                .sort((a, b) =>\r\n                  a.name > b.name ? 1 : b.name > a.name ? -1 : 0\r\n                )\r\n                .map((game) => (\r\n                  <li\r\n                    className='title_list__item'\r\n                    key={game.id}\r\n                    onClick={() => viewGameHandler(game)}\r\n                    onContextMenu={(e) => viewGameHeaders(e, game)}\r\n                    style={{\r\n                      background: currentGame?.id == game.id && '#9147ff',\r\n                      color: currentGame?.id == game.id && 'white',\r\n                    }}\r\n                  >\r\n                    {' '}\r\n                    <img src={game.imageURL} />\r\n                    <p>{game.name}</p>\r\n                    {game.name == activeProfile.favorite_game && (\r\n                      <FaStar className='list_item_favorite' />\r\n                    )}\r\n                    {showTitleMenu && (\r\n                      <ul\r\n                        onMouseEnter={(e) => e.stopPropagation(true)}\r\n                        className='user_collection__game_context'\r\n                        style={{\r\n                          top: anchorPoint.y,\r\n                          left: anchorPoint.x,\r\n                          zIndex: 6,\r\n                        }}\r\n                      >\r\n                        <li className='banner_context__item'>\r\n                          Add to Favorites\r\n                        </li>\r\n                        <li\r\n                          className='banner_context__item'\r\n                          onClick={(e) => removeGameHandler(e, game)}\r\n                        >\r\n                          Delete Game\r\n                        </li>\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                ))\r\n            ) : searchList.length > 0 && searchValue != '' ? (\r\n              searchList.map((game) => (\r\n                <li\r\n                  className='title_list__item'\r\n                  key={game.id}\r\n                  onClick={() => viewGameHandler(game)}\r\n                >\r\n                  {' '}\r\n                  <img src={game.imageURL} />\r\n                  <p>{game.name}</p>\r\n                </li>\r\n              ))\r\n            ) : (\r\n              <p\r\n                style={{\r\n                  color: 'white',\r\n                  fontSize: '3.2rem',\r\n                  position: 'absolute',\r\n                  top: '44%',\r\n                  left: '16px',\r\n                }}\r\n              >\r\n                No Matches\r\n              </p>\r\n            )}\r\n            <div className='user_collection__title_list_shadow' />\r\n            <div className='user_collection__title_list_shadow top_shadow' />\r\n          </ul>\r\n          <div className='user_collection__actions'>\r\n            <button className='persona_font' onClick={backToHome}>\r\n              Back\r\n              {/* <div className='persona_box' style={{ background: '#1cfeff' }} />\r\n              <div className='persona_box' style={{ background: 'white' }} />\r\n              <div className='persona_box' style={{ background: '#ff0022' }} /> */}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* RIGHT SIDE */}\r\n        <div className='user_collection__right'>\r\n          {currentGame !== null && (\r\n            <>\r\n              <UserGame\r\n                game={currentGame}\r\n                activeProfile={activeProfile}\r\n                closeStats={() => setCurrentGame(null)}\r\n                setProfile={(profile) => setSelectedProfile(profile)}\r\n                setCurrentGame={(game) => setCurrentGame(game)}\r\n                updateCollection={updateCollection}\r\n                userNotes={userNotes}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          {!currentGame && (\r\n            // SPOTLIGHT\r\n            <>\r\n              {!isMobile && (\r\n                <div className='user_collection__spotlight_wrapper'>\r\n                  <div className='spotlight_filters'>\r\n                    {/* MOST PLAYED, HIGHEST RATED, MOST ACHIEVEMENTS */}\r\n                    <h2 className='spotlight_filter'>\r\n                      {spotlightFilter == 'playtime'\r\n                        ? 'Most Played'\r\n                        : spotlightFilter == 'user_rating'\r\n                        ? 'Highest Rated'\r\n                        : 'Most Achievements'}{' '}\r\n                    </h2>\r\n                    <ul className='spotlight_filter__options'>\r\n                      <li\r\n                        onClick={() => setSpotlightFilter('playtime')}\r\n                        style={{\r\n                          color: spotlightFilter == 'playtime' && 'white',\r\n                        }}\r\n                      >\r\n                        Most Played\r\n                      </li>\r\n                      <li\r\n                        onClick={() => setSpotlightFilter('user_rating')}\r\n                        style={{\r\n                          color: spotlightFilter == 'user_rating' && 'white',\r\n                        }}\r\n                      >\r\n                        Highest Rated\r\n                      </li>\r\n                      <li\r\n                        onClick={() => setSpotlightFilter('achievements')}\r\n                        style={{\r\n                          color: spotlightFilter == 'achievements' && 'white',\r\n                        }}\r\n                      >\r\n                        Most Achievements\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                  <div className='user_collection__spotlight'>\r\n                    {spotlightList.slice(0, 3).map((top, i) => (\r\n                      <figure\r\n                        key={top.id}\r\n                        className='spotlight_container'\r\n                        onClick={() => viewGameHandler(top)}\r\n                      >\r\n                        <img\r\n                          className='spotlight_image'\r\n                          src={top.banner_url || top.imageURL}\r\n                        />\r\n                        <div className='spotlight_container__row'>\r\n                          <img\r\n                            className='spotlight_trophy_image'\r\n                            src={trophies[i]}\r\n                          />\r\n                          <figcaption className='spotlight_details'>\r\n                            <p>\r\n                              {spotlightFilter == 'playtime'\r\n                                ? `${Math.floor(top.playtime / 60)} hours`\r\n                                : spotlightFilter == 'user_rating'\r\n                                ? top.user_rating + '%'\r\n                                : 'ACHIEVE'}{' '}\r\n                            </p>\r\n                          </figcaption>\r\n                        </div>\r\n                      </figure>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* COVER LIST */}\r\n              <div className='user_collection__list_container'>\r\n                <div className='user_collection__list_filters'>\r\n                  <p style={{ marginBottom: '2px', fontSize: '1.5rem' }}>\r\n                    {listFilter == 'alphabetical'\r\n                      ? 'All Games'\r\n                      : listFilter == 'achievements'\r\n                      ? 'Achievements'\r\n                      : listFilter == 'playtime'\r\n                      ? 'Playtime'\r\n                      : listFilter == 'rating'\r\n                      ? 'Rating'\r\n                      : listFilter == 'status'\r\n                      ? 'Status'\r\n                      : 'Trophies'}\r\n                  </p>\r\n                  <ul className='user_collection__list_filters__list'>\r\n                    <li\r\n                      style={{ color: listFilter == 'alphabetical' && 'white' }}\r\n                      onClick={() => setListFilter('alphabetical')}\r\n                    >\r\n                      All\r\n                    </li>\r\n                    <span> | </span>\r\n                    <li\r\n                      style={{ color: listFilter == 'achievements' && 'white' }}\r\n                      onClick={() => setListFilter('achievements')}\r\n                    >\r\n                      Achievements\r\n                    </li>\r\n                    <span> | </span>\r\n\r\n                    <li\r\n                      style={{ color: listFilter == 'playtime' && 'white' }}\r\n                      onClick={() => setListFilter('playtime')}\r\n                    >\r\n                      Playtime\r\n                    </li>\r\n                    <span> | </span>\r\n\r\n                    <li\r\n                      style={{ color: listFilter == 'rating' && 'white' }}\r\n                      onClick={() => setListFilter('rating')}\r\n                    >\r\n                      Rating\r\n                    </li>\r\n                    <span> | </span>\r\n\r\n                    <li\r\n                      style={{ color: listFilter == 'status' && 'white' }}\r\n                      onClick={() => {\r\n                        setListFilter('status');\r\n                        setStatusFilter('backlog');\r\n                      }}\r\n                    >\r\n                      Status\r\n                    </li>\r\n                    <span> | </span>\r\n\r\n                    <li\r\n                      style={{ color: listFilter == 'trophies' && 'white' }}\r\n                      onClick={() => setListFilter('trophies')}\r\n                    >\r\n                      Trophies\r\n                    </li>\r\n                  </ul>\r\n                  {listFilter == 'status' && (\r\n                    <div\r\n                      className='user_collection__list_filters__list'\r\n                      style={{ margin: '0' }}\r\n                    >\r\n                      <ul\r\n                        className='user_collection__list_filters__list_status'\r\n                        style={{ flexDirection: 'row' }}\r\n                      >\r\n                        <li\r\n                          style={{\r\n                            color: statusFilter == 'backlog' && 'white',\r\n                          }}\r\n                          onClick={() => setStatusFilter('backlog')}\r\n                        >\r\n                          Backlog\r\n                        </li>\r\n                        <span> | </span>\r\n                        <li\r\n                          style={{\r\n                            color: statusFilter == 'started' && 'white',\r\n                          }}\r\n                          onClick={() => setStatusFilter('started')}\r\n                        >\r\n                          Started\r\n                        </li>\r\n                        <span> | </span>\r\n                        <li\r\n                          style={{\r\n                            color: statusFilter == 'playing' && 'white',\r\n                          }}\r\n                          onClick={() => setStatusFilter('playing')}\r\n                        >\r\n                          Playing\r\n                        </li>\r\n                        <span> | </span>\r\n                        <li\r\n                          style={{\r\n                            color: statusFilter == 'finished' && 'white',\r\n                          }}\r\n                          onClick={() => setStatusFilter('finished')}\r\n                        >\r\n                          Finished\r\n                        </li>\r\n                        <span> | </span>\r\n                        <li\r\n                          style={{\r\n                            color: statusFilter == '100%' && 'white',\r\n                          }}\r\n                          onClick={() => setStatusFilter('100%')}\r\n                        >\r\n                          100%\r\n                        </li>\r\n                        <span> | </span>\r\n                        <li\r\n                          style={{\r\n                            color: statusFilter == 'abandonded' && 'white',\r\n                          }}\r\n                          onClick={() => setStatusFilter('abandonded')}\r\n                        >\r\n                          Abandonded\r\n                        </li>\r\n                        <span> | </span>\r\n                        <li\r\n                          style={{\r\n                            color: statusFilter == 'not owned' && 'white',\r\n                          }}\r\n                          onClick={() => setStatusFilter('not owned')}\r\n                        >\r\n                          Not Owned\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <ul className='user_collection__list'>\r\n                  {!isMobile || (isMobile && searchValue == '')\r\n                    ? filteredList.map((game) => (\r\n                        <li\r\n                          className='list_item'\r\n                          key={game.id}\r\n                          onClick={() => viewGameHandler(game)}\r\n                        >\r\n                          <div className='user_collection__poster_container'>\r\n                            <div className='gradient' />\r\n                            <>\r\n                              {/* FRONT OF POSTER */}\r\n                              <div className='user_collection__poster_front'>\r\n                                <img\r\n                                  loading='lazy'\r\n                                  className='user_collection__poster'\r\n                                  src={game.imageURL}\r\n                                  alt={game.name}\r\n                                />\r\n                              </div>\r\n                            </>\r\n                          </div>\r\n                          {getFilterStat(game)}\r\n                        </li>\r\n                      ))\r\n                    : searchList.map((game) => (\r\n                        <li\r\n                          className='list_item'\r\n                          key={game.id}\r\n                          onClick={() => viewGameHandler(game)}\r\n                        >\r\n                          <div className='user_collection__poster_container'>\r\n                            <div className='gradient' />\r\n                            <>\r\n                              {/* FRONT OF POSTER */}\r\n                              <div className='user_collection__poster_front'>\r\n                                <img\r\n                                  loading='lazy'\r\n                                  className='user_collection__poster'\r\n                                  src={\r\n                                    isMobile\r\n                                      ? game.imageURL.replace(\r\n                                          'cover_big',\r\n                                          '1080p'\r\n                                        )\r\n                                      : game.imageURL\r\n                                  }\r\n                                  alt={game.name}\r\n                                />\r\n                              </div>\r\n                            </>\r\n                          </div>\r\n                        </li>\r\n                      ))}\r\n                </ul>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCollection;\r\n","// Get todays date based off current timezone\r\nlet todaysDate = new Date();\r\nlet igdbDate = Math.floor(todaysDate.getTime() / 1000);\r\nlet filterDate = igdbDate * 1000;\r\n\r\n// List of endpoints for the Rawg.io API\r\nconst requests = [\r\n  {\r\n    requestId: 'fetchAdventureTitles',\r\n    genreId: 31,\r\n    title: 'ACTION/ADVENTURE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchArcadeTitles',\r\n    genreId: 33,\r\n    title: 'ARCADE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchMusicTitles',\r\n    genreId: 7,\r\n    title: 'MUSIC GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchHackTitles',\r\n    genreId: 25,\r\n    title: 'HACK/SLASH TITLES',\r\n  },\r\n  {\r\n    requestId: 'fetchFightingTitles',\r\n    genreId: 4,\r\n    title: 'FIGHTING GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchIndieTitles',\r\n    genreId: 32,\r\n    title: 'INDIE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchMassivelyMultiplayerTitles',\r\n    genreId: 36,\r\n    title: 'MOBA GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchPlatformerTitles',\r\n    genreId: 8,\r\n    title: 'PLATFORMER GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchPuzzleTitles',\r\n    genreId: 9,\r\n    title: 'PUZZLE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchRacingTitles',\r\n    genreId: 10,\r\n    title: 'RACING GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchRPGTitles',\r\n    genreId: 12,\r\n    title: 'RPG GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchShooterTitles',\r\n    genreId: 5,\r\n    title: 'SHOOTER GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchSimulationTitles',\r\n    genreId: 13,\r\n    title: 'SIMULATION GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchSportsTitles',\r\n    genreId: 14,\r\n    title: 'SPORTS GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchStrategy',\r\n    genreId: (11, 15),\r\n    title: 'STRATEGY GAMES',\r\n  },\r\n];\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './NewReleases.css';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport GamePreview from '../Row/GamePreview/GamePreview';\r\nimport axios from 'axios';\r\n\r\nconst NewReleases = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const newReleases = [];\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken) return;\r\n\r\n    async function fetchNewReleases() {\r\n      setLoading(true);\r\n\r\n      try {\r\n        // const scrape_request = await axios.get(`${baseURL}/steam/new_releases`);\r\n        // console.log(scrape_request);\r\n        return;\r\n        // const newReleasesData = await Promise.all(\r\n        //   newReleases.map(async (game) => {\r\n        //     const res = await axios.post(\r\n        //       `${baseURL}/app/search_trending_game`,\r\n        //       {\r\n        //         token: twitchToken,\r\n        //         gameName: game,\r\n        //       }\r\n        //     );\r\n        //     return res.data[0].game;\r\n        //   })\r\n        // );\r\n        // setGames(newReleasesData);\r\n        // setLoading(false);\r\n        // return newReleasesData;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchNewReleases();\r\n  }, [twitchToken]);\r\n\r\n  // Grab trailer video from selected game\r\n  // const fetchGameDetails = (game) => {\r\n  //   setGameDetails(game);\r\n  //   setCurrentlyOpen(game.name);\r\n  //   setCurrentGame(game);\r\n  // };\r\n\r\n  const closeGameDetails = () => {\r\n    // setCurrentlyOpen(null);\r\n    // setCurrentGame(null);\r\n  };\r\n\r\n  games?.sort((a, b) =>\r\n    a.rating_count > b.rating_count\r\n      ? -1\r\n      : b.rating_count > a.rating_count\r\n      ? 1\r\n      : 0\r\n  );\r\n\r\n  return '';\r\n\r\n  return (\r\n    <div className='new_releases_row'>\r\n      <h2>NEW RELEASES</h2>\r\n\r\n      <div className='new_releases_row__posters'>\r\n        {games.map((game, i) => (\r\n          <React.Fragment key={game.name}>\r\n            <div className='new_releases_row__poster_wrapper'>\r\n              <div\r\n                className='new_releases_row__poster_container'\r\n                onClick={() => setGameDetails(game)}\r\n              >\r\n                {' '}\r\n                {!loading && (\r\n                  <>\r\n                    <img\r\n                      loading='lazy'\r\n                      className='new_releases_row__poster'\r\n                      src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                      alt={game.name}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n              {/* {currentlyOpen === game.name && (\r\n                <GamePreview\r\n                  game={currentGame}\r\n                  displayDetails={displayDetails}\r\n                  hideDetails={closeGameDetails}\r\n                />\r\n              )} */}\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n        {loading && (\r\n          <div className='row__loading_container'>\r\n            {[...Array(10)].map((item, i) => (\r\n              <div key={i} className='new_releases_row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewReleases;\r\n","import { useState, useEffect, memo } from 'react';\r\n\r\n// Component Imports\r\nimport Row from '../Row/Row';\r\nimport Banner from '../Banner/Banner';\r\nimport Nav from '../Nav/Nav';\r\nimport MainRow from '../MainRow/MainRow';\r\nimport TrendingRow from '../TrendingRow/TrendingRow';\r\nimport { SlOptions } from 'react-icons/sl';\r\n\r\n// File Imports\r\nimport SpotifyPlayback from '../SpotifyPlayback/SpotifyPlayback';\r\nimport useSpotifyAuth from '../../hooks/useSpotifyAuth';\r\nimport useSteamAuth from '../../hooks/useSteamAuth';\r\nimport GameDetails from '../GameDetails/GameDetails';\r\nimport UserCollection from '../UserCollectionPage/UserCollection';\r\nimport Notification from '../Notification/Notification';\r\nimport useFetchGenres from '../../hooks/useFetchGenres';\r\nimport NewReleases from '../NewReleases/NewReleases';\r\n\r\nconst code = new URLSearchParams(window.location.search).get('code');\r\nconst windowUrl = window.location.search;\r\nconst id = windowUrl.split('?')[1];\r\n\r\nconst Dashboard = ({\r\n  currentUser,\r\n  twitchToken,\r\n  currentProfile,\r\n  currentCollection,\r\n  userNotes,\r\n  manageProfiles,\r\n  updateCollection,\r\n  selectProfile,\r\n  fetchGame,\r\n  addGame,\r\n  removeGame,\r\n  logoutUser,\r\n}) => {\r\n  const allGenres = useFetchGenres();\r\n  const [displayNotification, setDisplayNotification] = useState(false);\r\n  const [notification, setNotification] = useState({ status: '', message: '' });\r\n\r\n  // Spotify States\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [playAudio, setPlayAudio] = useState(false);\r\n  const [rowsLoading, setRowsLoading] = useState();\r\n\r\n  // User states\r\n  const [changingUser, setChangingUser] = useState(false);\r\n  const [editingUser, setEditingUser] = useState(false);\r\n  const [loggedUser, setLoggedUser] = useState(null);\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n  const [viewingCollection, setViewingCollection] = useState(false);\r\n\r\n  // Row States\r\n  const [currentGameOpen, setCurrentGameOpen] = useState(null);\r\n  const [viewingGameOptions, setViewingGameOptions] = useState(false);\r\n  const [hoveringGame, setHoveringGame] = useState(null);\r\n\r\n  // Search States\r\n  const [gameDetails, setGameDetails] = useState(null);\r\n\r\n  // Local Variables\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const spotifyAccessToken = useSpotifyAuth(code);\r\n  const steamCollection = useSteamAuth(id);\r\n\r\n  useEffect(() => {\r\n    if (!currentGameOpen) document.body.style.overflow = 'auto';\r\n  }, []);\r\n\r\n  const changeProfile = (user) => {\r\n    setChangingUser(true);\r\n    localStorage.setItem('profile', user.name);\r\n    setTimeout(() => {\r\n      setChangingUser(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const openGameWindow = (game) => {\r\n    console.log(game);\r\n    setCurrentGameOpen(game.id);\r\n    document.body.style.overflow = 'hidden';\r\n  };\r\n\r\n  const closeGameWindow = () => {\r\n    document.body.style.overflow = 'auto';\r\n    setCurrentGameOpen(null);\r\n  };\r\n\r\n  const seeGameOptions = () => {\r\n    setViewingGameOptions(true);\r\n  };\r\n\r\n  const playTrack = (track) => {\r\n    setCurrentTrack(track);\r\n  };\r\n\r\n  // Loading screen for profile change\r\n  if (changingUser) {\r\n    return (\r\n      <div className='loading_profile__container'>\r\n        <div className='loading_profile'>\r\n          <img src={currentProfile.avatar} alt='current user avatar' />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (currentProfile) {\r\n    if (gameDetails !== null) {\r\n      return (\r\n        <>\r\n          <GameDetails\r\n            setNotification={(status, message) =>\r\n              setNotification({ status, message })\r\n            }\r\n            game={gameDetails}\r\n            closeDetails={() => setGameDetails(null)}\r\n            twitchToken={twitchToken}\r\n            addGame={(game) => addGame(game)}\r\n            removeGame={(game) => removeGame(game)}\r\n            activeProfile={currentProfile}\r\n          />\r\n          <Notification\r\n            notification={notification}\r\n            displayNotification={displayNotification}\r\n            hideNotification={() => {\r\n              setNotification({ message: '', status: '' });\r\n            }}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n\r\n    if (viewingCollection)\r\n      return (\r\n        <UserCollection\r\n          collection={currentCollection}\r\n          activeProfile={currentProfile}\r\n          backToHome={() => setViewingCollection(false)}\r\n          currentTrack={currentTrack}\r\n          playTrack={playTrack}\r\n          isPlaying={playAudio}\r\n          pausePlayback={() => setPlayAudio(false)}\r\n          resumePlayback={() => setPlayAudio(true)}\r\n          setSelectedProfile={(profile) => setSelectedProfile(profile)}\r\n          spotifyToken={spotifyAccessToken}\r\n          removeGame={(game) => removeGame(game)}\r\n          updateCollection={updateCollection}\r\n          userNotes={userNotes}\r\n        />\r\n      );\r\n\r\n    return (\r\n      <div className='App'>\r\n        <Nav\r\n          currentUser={currentUser}\r\n          activeProfile={currentProfile}\r\n          changeUser={changeProfile}\r\n          onLogout={logoutUser}\r\n          fetchSubmittedGame={fetchGame}\r\n          toProfilePage={() => localStorage.removeItem('profile')}\r\n          selectProfile={(profile) => setSelectedProfile(profile)}\r\n          spotifyToken={spotifyAccessToken}\r\n          twitchToken={twitchToken}\r\n          saveEdit={() => setEditingUser(true)}\r\n          setLoggedUser={(user) => setLoggedUser(user)}\r\n          updateCollection={updateCollection}\r\n          currentCollection={currentCollection}\r\n          viewCollection={() => setViewingCollection(true)}\r\n        />\r\n\r\n        <Banner\r\n          setGameDetails={(id) => setGameDetails(id)}\r\n          addGame={(game) => addGame(game)}\r\n          activeProfile={currentProfile}\r\n        />\r\n        <MainRow\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        <NewReleases\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        <TrendingRow\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        {currentGameOpen && (\r\n          <>\r\n            <h1 className='row__preview_close' onClick={closeGameWindow}>\r\n              X\r\n            </h1>\r\n            <h1 className='row__preview_close options' onClick={seeGameOptions}>\r\n              <SlOptions />\r\n            </h1>\r\n          </>\r\n        )}\r\n        <div\r\n          className={`${currentGameOpen !== null && 'game_preview__modal'}`}\r\n        />\r\n\r\n        {allGenres.genreGamesList.map((request) => (\r\n          <Row\r\n            key={Object.keys(request)}\r\n            activeProfile={currentProfile}\r\n            spotifyToken={spotifyAccessToken}\r\n            genreDetails={Object.entries(request)}\r\n            playTrack={playTrack}\r\n            currentTrack={currentTrack}\r\n            setGameDetails={(game) => setGameDetails(game)}\r\n            resumePlayback={(e) => setPlayAudio(true)}\r\n            pausePlayback={(e) => setPlayAudio(false)}\r\n            isPlaying={playAudio}\r\n            currentGameOpen={currentGameOpen}\r\n            openGame={(game) => openGameWindow(game)}\r\n            closeGameWindow={closeGameWindow}\r\n            addGame={(game) => addGame(game)}\r\n            setNotification={(status, message) =>\r\n              setNotification({ status, message })\r\n            }\r\n            loading={rowsLoading}\r\n            hoverGame={(game) => setHoveringGame(game)}\r\n            hoverAway={() => setHoveringGame(null)}\r\n            currentHover={hoveringGame}\r\n          />\r\n        ))}\r\n\r\n        {spotifyAccessToken && (\r\n          <SpotifyPlayback\r\n            spotifyToken={spotifyAccessToken}\r\n            playAudio={playAudio}\r\n            beginPlayback={(e) => setPlayAudio(true)}\r\n            pausePlayback={(e) => setPlayAudio(false)}\r\n            trackUri={currentTrack?.uri}\r\n          />\r\n        )}\r\n\r\n        <Notification\r\n          notification={notification}\r\n          displayNotification={displayNotification}\r\n          hideNotification={() => {\r\n            setNotification({ message: '', status: '' });\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(Dashboard);\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport requestsIGDB from '../requestsIGDB';\r\n\r\nexport default function useFetchGenres() {\r\n  const existingToken = localStorage.getItem('twitch_auth');\r\n  const [genreGamesList, setGenreGamesList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const currentDate = new Date();\r\n\r\n  useEffect(() => {\r\n    const fetchGenres = async () => {\r\n      const request = await axios.get(`${baseURL}/app/get_genres`);\r\n      const last_updated = new Date(request.data.last_updated);\r\n\r\n      if (currentDate > last_updated.setDate(last_updated.getDate() + 1)) {\r\n        return updateGenresAPI();\r\n      } else {\r\n        setGenreGamesList(request.data[0].genres_list);\r\n        setIsLoading(false);\r\n        return request.data;\r\n      }\r\n    };\r\n\r\n    const updateGenresAPI = async () => {\r\n      if (!existingToken) return;\r\n\r\n      const genreTitles = await Promise.all(\r\n        requestsIGDB.map((genre) => {\r\n          return axios.post(`${baseURL}/app/game_genre`, {\r\n            token: existingToken,\r\n            genreId: genre.genreId,\r\n            genreTitle: genre.title,\r\n          });\r\n        })\r\n      );\r\n      const completeGenreList = genreTitles.map((genre) => genre.data);\r\n      updateGenresCollection(completeGenreList);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchGenres();\r\n  }, [existingToken]);\r\n\r\n  const updateGenresCollection = async (list) => {\r\n    const request = await axios.post(`${baseURL}/app/update_genres`, {\r\n      genreList: list,\r\n      date: currentDate,\r\n    });\r\n    setGenreGamesList(request.data.genres_list);\r\n  };\r\n\r\n  return { genreGamesList, isLoading };\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useSpotifyAuth(code) {\r\n  const [accessToken, setAccessToken] = useState();\r\n  const [refreshToken, setRefreshToken] = useState();\r\n  const [expiresIn, setExpiresIn] = useState();\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const prevToken = sessionStorage.getItem('spotify_auth');\r\n\r\n  useEffect(() => {\r\n    if (prevToken) {\r\n      console.log(prevToken);\r\n      setAccessToken(JSON.parse(prevToken));\r\n      return;\r\n    }\r\n    if (!code) return;\r\n    const spotifyAuthentication = async () => {\r\n      try {\r\n        const request = await axios.post(\r\n          `${baseURL}/app/spotify_authentication`,\r\n          {\r\n            code,\r\n            baseURL,\r\n          }\r\n        );\r\n        setAccessToken(request.data.tokenRequest.body.access_token);\r\n        setRefreshToken(request.data.tokenRequest.body.refresh_token);\r\n        setExpiresIn(request.data.tokenRequest.body.expires_in);\r\n        sessionStorage.setItem(\r\n          'spotify_auth',\r\n          JSON.stringify(request.data.tokenRequest.body.access_token)\r\n        );\r\n        window.history.pushState({}, null, '/');\r\n      } catch (error) {\r\n        console.log(error);\r\n        window.location = '/';\r\n      }\r\n    };\r\n    spotifyAuthentication();\r\n  }, [code]);\r\n\r\n  useEffect(() => {\r\n    if (!refreshToken || !expiresIn) return;\r\n    const refreshSpotifyToken = async () => {\r\n      try {\r\n        const request = await axios.post(`${baseURL}/app/refresh_token`, {\r\n          refreshToken,\r\n          baseURL,\r\n        });\r\n        setAccessToken(request.data.body.body.access_token);\r\n        setRefreshToken(request.data.body.body.refresh_token);\r\n        setExpiresIn(request.data.body.body.expires_in);\r\n      } catch (error) {\r\n        console.log('REFRESH TOKEN ERROR');\r\n        window.location = '/';\r\n      }\r\n    };\r\n    const interval = setInterval(() => {\r\n      refreshSpotifyToken();\r\n    }, (expiresIn - 60) * 1000);\r\n\r\n    return () => clearTimeout(interval);\r\n  }, [refreshToken, expiresIn]);\r\n\r\n  return accessToken;\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useSteamAuth(id) {\r\n  const [steamCollection, setSteamCollection] = useState([]);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  useEffect(() => {\r\n    if (!id) return;\r\n    const fetchUserLibrary = async () => {\r\n      try {\r\n        const request = await axios.get(`${baseURL}/steam/get_owned_games`, {\r\n          params: {\r\n            id,\r\n          },\r\n        });\r\n        localStorage.setItem('steamID', request.config.params.id);\r\n        console.log(request.data);\r\n        setSteamCollection(request.data);\r\n        window.history.pushState({}, null, '/');\r\n      } catch (error) {\r\n        console.log(error);\r\n        console.log('GET STEAM COLLECTION ERROR');\r\n      }\r\n    };\r\n    fetchUserLibrary();\r\n  }, [id]);\r\n\r\n  return steamCollection;\r\n}\r\n"],"names":["delay","className","style","animationDelay","onClick","e","stopPropagation","activeProfile","spotifyToken","genreDetails","playTrack","currentTrack","setGameDetails","resumePlayback","pausePlayback","isPlaying","currentGameOpen","closeGameWindow","openGame","addGame","setNotification","loading","hoverGame","hoverAway","currentHover","useState","currentGame","setCurrentGame","baseURL","process","currentPlaylist","setCurrentPlaylist","viewingSoundtrack","setViewingSoundtrack","viewingPreview","setViewingPreview","playlistLoading","setPlaylistLoading","genreTitle","genreList","fetchGameOST","game","axios","params","name","token","request","data","status","console","log","id","tracks","addGameHandler","determineESRB","age_ratings","src","rpRating","hasRating","filter","rating","category","length","alt","eRating","tRating","mRating","map","undefined","cover","zIndex","onMouseOver","onMouseLeave","display","fetchGameDetails","viewGameSoundtrack","closeGameSoundtrack","track","color","fontWeight","title","split","selectTrackHandler","transformStyle","image_id","GamePreview","gameCover","ratingImage","closeGame","Array","item","i","isLoading","setIsLoading","bannerGamesList","setBannerGamesList","currentGameTrailer","setCurrentGameTrailer","serverError","setServerError","twitchToken","localStorage","getItem","fetchData","gameName","sort","a","b","filteredList","selectedGame","Math","floor","random","trailer","videos","find","video","includes","video_id","useEffect","displayNewBanner","newGame","newGameTrailer","str","n","bannerGame","useFetchBanner","bannerRef","useRef","exists","collection","some","mutedVideo","setMutedVideo","playingVideo","setPlayingVideo","trailerEnded","setTrailerEnded","observer","IntersectionObserver","isIntersecting","root","rootMargin","threshold","current","observe","ref","width","height","url","playing","muted","onEnded","light","summary","substr","size","SPOTIFY_AUTH_URL","props","allProfiles","handleEsc","event","keyCode","closeNavDropdown","window","addEventListener","removeEventListener","generatePlaystationTitles","earnedTrophies","earned","allTrophies","currentCollection","ownedGame","inCollection","toLowerCase","trophies","email","gameId","currentProfile","imageURL","playtime","origin","user","changeProfile","changeUserHandler","avatar","backgroundColor","toProfilePage","editProfile","viewCollection","editAccount","href","alignItems","justifyContent","paddingBottom","paddingLeft","to","logoutHandler","closeAccountSettings","setLoggedUser","currentUser","deletingAccount","setDeletingAccount","updateStatus","setUpdateStatus","emailValue","setEmailValue","newEmailValue","setNewEmailValue","changingEmail","setChangingEmail","password","passwordValue","setPasswordValue","hidePassword","setHidePassword","newPasswordValue","setNewPasswordValue","changingPassword","setChangingPassword","hiddenPassword","replace","updateEmail","originalEmail","newEmail","type","message","deleteAccountHandler","_id","location","removeItem","fontSize","marginLeft","onChange","target","value","placeholder","autoFocus","displayNav","setDisplayNav","displayDropdown","setDisplayDropdown","displaySearch","setDisplaySearch","searchRef","editingProfile","setEditingProfile","editingAccount","setEditingAccount","profile","scrollNavListener","scrollY","cancelEdit","document","body","overflowY","ProfileEditor","userEmail","viewAllProfiles","saveEdit","getProfile","test","selectProfile","onSubmit","preventDefault","searchValue","trim","fetchSubmittedGame","defaultValue","searchedGame","onBlur","defaultAvatar","transform","changeUser","profiles","onLogout","updateCollection","games","setGames","currentFilter","setCurrentFilter","changingFilter","setChangingFilter","currentlyViewing","setCurrentlyViewing","setLoading","todaysDate","Date","weekDateFormat","getTime","monthDateFormat","setMonth","getMonth","yearDateFormat","filterUniques","list","uniques","indexOf","push","startDate","targetDate","retries","currentDate","changeFilterDate","innerText","convertDate","date","formattedDay","now","currentDay","getDate","getFullYear","onMouseOut","human","displayDetails","currentlyOpen","setCurrentlyOpen","trendingTitlesFetched","JSON","parse","sessionStorage","trendingTitles","uniqueTitles","Set","has","add","forEach","release_dates","findLast","dates","hypes","slice","setItem","stringify","closeGameDetails","hideDetails","spotifyApi","SpotifyWebApi","clientId","trackUri","playAudio","beginPlayback","setAccessToken","callback","state","uris","play","styles","bgColor","sliderColor","trackArtistColor","trackNameColor","x","y","anchorPoint","setAnchorPoint","showBannerMenu","setShowBannerMenu","showTitleMenu","setShowTitleMenu","handleContextMenu","useCallback","offsetX","pageY","movementX","handleClick","resetContext","note","closeNote","updateNote","deleteNote","noteValue","setNoteValue","today","yyyy","mm","dd","formattedToday","windowViewHandler","viewStatus","gameNotes","currentTab","setCurrentTab","editingTab","setEditingTab","tabValue","setTabValue","addingTab","setAddingTab","currentNote","setCurrentNote","noteTab","tabName","notesRef","tabRef","tabEndRef","createNotes","notesId","scrollIntoView","behavior","handleEnter","focus","clearTimeout","timer","updateProfileNotes","userNotesId","noteId","notes","editTabHandler","tabFormSubmitHandler","oldNote","newNote","updatedList","contentEditable","suppressContentEditableWarning","onKeyPress","currentTarget","key","borderBottom","userSelect","padding","transition","setTimeout","viewNoteHandler","closeStats","setProfile","userNotes","useContextMenu","achievements","setViewStatus","setAchievements","setTrophies","achievementFilter","setAchievementFilter","trophyFilter","setTrophyFilter","setPlaytime","changingPlaytime","setChangingPlaytime","user_rating","setRating","changingRating","setChangingRating","changingBanner","setChangingBanner","bannerLink","setBannerLink","backlogStatus","setBacklogStatus","changingBacklog","setChangingBacklog","steamID","trophyPercentage","achievementPercentage","achieved","replaceAll","notes_collection","g","getAchievementData","arr1","arr2","dataList","result","a1","displayName","textA","toUpperCase","textB","fetchAppData","steamGameStats","Object","keys","steamId","userAchievementData","availableGameStats","addAchievements","response","getAchievementCount","numberAchieved","updateRatingHandler","ratingValue","updatePlaytime","updateBacklog","updateBacklogHandler","updateBanner","maxWidth","textAlign","marginBottom","top","left","banner_image","totalMinutes","minutes","hours","toString","padStart","toHoursAndMinutes","min","onKeyDown","onMouseMove","bounds","getBoundingClientRect","clientX","totalStars","outlined","paddingTop","background","achievement","border","icon","icongray","description","trophy","trophyName","trophyIconUrl","trophyDetail","backToHome","setSelectedProfile","removeGame","setSearchValue","searchList","setSearchList","viewingList","isMobile","setIsMobile","currentlyAdjusting","setCurrentlyAdjusting","spotlightList","setSpotlightList","spotlightFilter","setSpotlightFilter","listFilter","setListFilter","setFilteredList","statusFilter","setStatusFilter","platinumTrophy","goldTrophy","bronzeTrophy","delaySearch","res","handleResize","innerWidth","viewGameHandler","getFilterStat","earnedTrophyCount","borderRadius","position","onContextMenu","viewGameHeaders","favorite_game","onMouseEnter","removeGameHandler","banner_url","margin","flexDirection","requestId","genreId","fetchNewReleases","rating_count","code","URLSearchParams","search","get","Dashboard","manageProfiles","fetchGame","logoutUser","allGenres","existingToken","genreGamesList","setGenreGamesList","fetchGenres","last_updated","setDate","updateGenresAPI","genres_list","Promise","all","requestsIGDB","genre","genreTitles","completeGenreList","updateGenresCollection","useFetchGenres","displayNotification","notification","setCurrentTrack","setPlayAudio","rowsLoading","changingUser","setChangingUser","setEditingUser","viewingCollection","setViewingCollection","setCurrentGameOpen","setViewingGameOptions","hoveringGame","setHoveringGame","gameDetails","spotifyAccessToken","accessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","prevToken","spotifyAuthentication","tokenRequest","access_token","refresh_token","expires_in","history","pushState","refreshSpotifyToken","interval","setInterval","useSpotifyAuth","steamCollection","setSteamCollection","fetchUserLibrary","config","useSteamAuth","overflow","GameDetails","closeDetails","Notification","hideNotification","entries","openGameWindow","uri","memo"],"sourceRoot":""}