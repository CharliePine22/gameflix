{"version":3,"file":"static/js/34.e16940de.chunk.js","mappings":"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","sources":["components/Placeholder/Placeholder.js","components/Row/Row.js","hooks/useFetchBanner.js","components/Banner/Banner.js","components/Nav/NavDropdown.js","components/Login/Profiles/ProfileEditor/AccountEditor.js","components/Nav/Nav.js","components/MainRow/MainRow.js","components/TrendingRow/TrendingRow.js","components/NewReleases/NewReleases.js","components/SpotifyPlayback/SpotifyPlayback.js","requestsIGDB.js","components/Dashboard/Dashboard.js","hooks/useFetchGenres.js","hooks/useSpotifyAuth.js","hooks/useSteamAuth.js","components/Login/Profiles/ProfileEditor/SearchList.js","components/Login/Profiles/ProfileEditor/ProfileEditor.js"],"sourcesContent":["import React from 'react';\r\nimport './Placeholder.css';\r\n\r\nconst Placeholder = ({ delay }) => {\r\n  return (\r\n    <div\r\n      className='placeholder'\r\n      style={{ animationDelay: `${delay}ms` }}\r\n      onClick={(e) => e.stopPropagation()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Placeholder;\r\n","import React, { useState, lazy, Suspense } from 'react';\r\nimport './Row.css';\r\nimport axios from 'axios';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport {\r\n  FaPlay,\r\n  FaPause,\r\n  FaPlusSquare,\r\n  FaMinusSquare,\r\n  FaGamepad,\r\n  FaMusic,\r\n} from 'react-icons/fa';\r\nimport { CiSquareMore } from 'react-icons/ci';\r\n// ESRB Logos\r\nimport eRating from '../../assets/images/ESRB_E.png';\r\nimport tRating from '../../assets/images/ESRB_T.png';\r\nimport mRating from '../../assets/images/ESRB_M.png';\r\nimport rpRating from '../../assets/images/ESRB_RP.png';\r\n\r\nconst GamePreview = lazy(() => import('./GamePreview/GamePreview'));\r\n\r\nfunction Row({\r\n  activeProfile,\r\n  spotifyToken,\r\n  genreDetails,\r\n  playTrack,\r\n  currentTrack,\r\n  setGameDetails,\r\n  resumePlayback,\r\n  pausePlayback,\r\n  isPlaying,\r\n  currentGameOpen,\r\n  closeGameWindow,\r\n  openGame,\r\n  updateGameStatus,\r\n  setNotification,\r\n  loading,\r\n  hoverGame,\r\n  hoverAway,\r\n  currentHover,\r\n  currentCollection,\r\n  gameStatus,\r\n}) {\r\n  const [currentGame, setCurrentGame] = useState(null);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const [currentPlaylist, setCurrentPlaylist] = useState([]);\r\n  const [viewingSoundtrack, setViewingSoundtrack] = useState(false);\r\n  const [viewingPreview, setViewingPreview] = useState(false);\r\n  const [playlistLoading, setPlaylistLoading] = useState(false);\r\n\r\n  const genreTitle = genreDetails[0][0];\r\n  const genreList = genreDetails[0][1];\r\n\r\n  const fetchGameOST = async (game) => {\r\n    if (!spotifyToken) {\r\n      setCurrentGame(null);\r\n      setNotification(\r\n        'ERROR',\r\n        'Please connect to Spotify through the nav dropdown!'\r\n      );\r\n      return;\r\n    }\r\n    try {\r\n      setPlaylistLoading(true);\r\n      const request = await axios.get(`${baseURL}/app/spotify_album`, {\r\n        params: {\r\n          game: game.name,\r\n          token: spotifyToken,\r\n          baseURL,\r\n        },\r\n      });\r\n      if (request.data.status !== 'OK') {\r\n        console.log(request.data);\r\n        setPlaylistLoading(false);\r\n      } else {\r\n        setCurrentGame(game.id);\r\n        setCurrentPlaylist(request.data.tracks);\r\n        setViewingSoundtrack(true);\r\n        setPlaylistLoading(false);\r\n\r\n        return request.data.tracks;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setPlaylistLoading(false);\r\n      return error;\r\n    }\r\n  };\r\n\r\n  // Grab trailer video from selected game\r\n  const fetchGameDetails = (game) => {\r\n    closeGameWindow();\r\n    setGameDetails(game);\r\n  };\r\n\r\n  const checkGameOwned = (game) => {\r\n    const exists = currentCollection.some((item) => item.id === game.id);\r\n    if (exists) {\r\n      return (\r\n        <div\r\n          className='row__blur_item'\r\n          onClick={() => updateGameStatus('REMOVE', game)}\r\n        >\r\n          <FaMinusSquare className='blur_item_icon' />\r\n          <p>Remove</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className='row__blur_item'\r\n          onClick={() => updateGameStatus('ADD', game)}\r\n        >\r\n          <FaPlusSquare className='blur_item_icon' />\r\n          <p>Add</p>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const viewGameSoundtrack = (e, game) => {\r\n    e.stopPropagation();\r\n    closeGameWindow();\r\n    setCurrentGame(game.id);\r\n    fetchGameOST(game);\r\n  };\r\n\r\n  const closeGameSoundtrack = (e) => {\r\n    e.stopPropagation();\r\n    setCurrentGame(null);\r\n    setViewingSoundtrack(false);\r\n  };\r\n\r\n  const selectTrackHandler = (e, track) => {\r\n    e.stopPropagation();\r\n    if (currentTrack !== null && track.name == currentTrack.name) {\r\n      resumePlayback();\r\n    }\r\n    playTrack(track);\r\n  };\r\n\r\n  const formatTrackTitle = (title) => {\r\n    return title.split('-')[0].split('(')[0];\r\n  };\r\n\r\n  // Return a ESRB rating picture according to fetched game\r\n  const determineESRB = (game) => {\r\n    if (!game || !game.age_ratings)\r\n      return <img className='row__poster__esrb_img' src={rpRating} />;\r\n    const hasRating = game?.age_ratings.filter(\r\n      (rating) => rating.category == 1 || rating.category == 2\r\n    );\r\n\r\n    if (hasRating.length == 0 || !game.age_ratings)\r\n      return <img className='row__poster__esrb_img' src={rpRating} />;\r\n    const esrb = hasRating[0].rating;\r\n\r\n    switch (esrb) {\r\n      case 1:\r\n      case 2:\r\n      case 8:\r\n      case 9:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb E rating'\r\n            src={eRating}\r\n          />\r\n        );\r\n      case 3:\r\n      case 4:\r\n      case 10:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb T rating'\r\n            src={tRating}\r\n          />\r\n        );\r\n      case 5:\r\n      case 11:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb M rating'\r\n            src={mRating}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <img\r\n            className='row__poster__esrb_img'\r\n            alt='esrb RP rating'\r\n            src={rpRating}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='row'>\r\n      <h2 className='row__title'>{genreTitle}</h2>\r\n      <div className='row__posters'>\r\n        {genreList.map(\r\n          (game) =>\r\n            game.cover !== undefined && (\r\n              <React.Fragment key={game.id}>\r\n                {!loading && (\r\n                  <div\r\n                    className={`row__poster_wrapper ${\r\n                      currentGameOpen == game.id && 'viewing_game'\r\n                    }`}\r\n                    style={{\r\n                      zIndex:\r\n                        currentGameOpen !== game.id &&\r\n                        currentGameOpen !== null &&\r\n                        '-1',\r\n                    }}\r\n                    onMouseOver={() => hoverGame(game.id)}\r\n                    onMouseLeave={() =>\r\n                      viewingSoundtrack ? hoverGame(game.id) : hoverAway()\r\n                    }\r\n                  >\r\n                    {currentHover == game.id && !currentGameOpen && (\r\n                      <div\r\n                        className={`row__blur_wrapper ${\r\n                          gameStatus == 'error'\r\n                            ? 'blur_error'\r\n                            : gameStatus == 'success'\r\n                            ? 'blur_success'\r\n                            : ''\r\n                        }`}\r\n                      >\r\n                        {!playlistLoading ? (\r\n                          <div\r\n                            className='row__blur_details'\r\n                            style={{\r\n                              display: currentGame == game.id && 'none',\r\n                            }}\r\n                          >\r\n                            {/* ADD GAME */}\r\n                            {checkGameOwned(game)}\r\n\r\n                            {/* GET DETAILS */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={() => {\r\n                                fetchGameDetails(game);\r\n                              }}\r\n                            >\r\n                              <CiSquareMore className='blur_item_icon more' />\r\n                              <p>See Details</p>\r\n                            </div>\r\n                            {/* GET SOUNDTRACK */}\r\n                            <div\r\n                              onClick={(e) => viewGameSoundtrack(e, game)}\r\n                              className='row__blur_item'\r\n                            >\r\n                              <FaMusic className='blur_item_icon music' />\r\n                              <p>Play Soundtrack</p>\r\n                            </div>\r\n                            {/* VIEW 3D CASE */}\r\n                            <div\r\n                              className='row__blur_item'\r\n                              onClick={() => openGame(game)}\r\n                            >\r\n                              <FaGamepad className='blur_item_icon' />\r\n                              <p>View Case</p>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className='playlist_loading'>\r\n                            <div className='playlist_loading_dot' />\r\n                            <div className='playlist_loading_dot' />\r\n                            <div className='playlist_loading_dot' />\r\n                          </div>\r\n                        )}\r\n                        {viewingSoundtrack && currentGame == game.id && (\r\n                          <div className='soundtrack_container'>\r\n                            <span onClick={(e) => closeGameSoundtrack(e)}>\r\n                              ←\r\n                            </span>\r\n                            <h3>Spotify OST</h3>\r\n                            <ul className='soundtracks'>\r\n                              {currentPlaylist?.map((track) => (\r\n                                <li\r\n                                  key={track.id}\r\n                                  onClick={(e) => e.stopPropagation()}\r\n                                  className='soundtrack'\r\n                                >\r\n                                  <p\r\n                                    style={{\r\n                                      color:\r\n                                        currentTrack !== null &&\r\n                                        currentTrack.name == track.name\r\n                                          ? 'green'\r\n                                          : 'white',\r\n                                      fontWeight:\r\n                                        currentTrack !== null &&\r\n                                        currentTrack.name == track.name\r\n                                          ? '600'\r\n                                          : '400',\r\n                                    }}\r\n                                  >\r\n                                    {formatTrackTitle(track.name)}\r\n                                  </p>\r\n                                  {(currentTrack !== null &&\r\n                                    currentTrack.name !== track.name) ||\r\n                                  !isPlaying ? (\r\n                                    <FaPlay\r\n                                      onClick={(e) =>\r\n                                        selectTrackHandler(e, track)\r\n                                      }\r\n                                    />\r\n                                  ) : (\r\n                                    <FaPause onClick={(e) => pausePlayback()} />\r\n                                  )}\r\n                                </li>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                    <div className='row__poster_container'>\r\n                      <>\r\n                        {/* FRONT OF POSTER */}\r\n                        <div\r\n                          className='row__poster_front'\r\n                          style={{\r\n                            transformStyle: currentGameOpen && 'revert',\r\n                          }}\r\n                        >\r\n                          <img\r\n                            loading='lazy'\r\n                            className='row__poster'\r\n                            src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                            alt={game.name + ' cover image'}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    </div>\r\n                    {currentGameOpen === game.id && (\r\n                      <Suspense fallback={<>...</>}>\r\n                        <GamePreview\r\n                          game={game}\r\n                          gameCover={`https://images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover?.image_id}.jpg`}\r\n                          ratingImage={determineESRB(game)}\r\n                          viewingPreview={viewingPreview}\r\n                          openGame={() => setViewingPreview(true)}\r\n                          closeGame={() => setViewingPreview(false)}\r\n                        />\r\n                      </Suspense>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </React.Fragment>\r\n            )\r\n        )}\r\n        {loading && (\r\n          <div className='row__loading_container'>\r\n            {[...Array(10)].map((item, i) => (\r\n              <div key={i} className='row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useFetchBanner = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [bannerGamesList, setBannerGamesList] = useState([]);\r\n  const [currentGame, setCurrentGame] = useState('');\r\n  const [currentGameTrailer, setCurrentGameTrailer] = useState('');\r\n  const [serverError, setServerError] = useState(null);\r\n  const twitchToken = localStorage.getItem('twitch_auth');\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  const fetchData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/search_game`, {\r\n        token: twitchToken,\r\n        gameName: '',\r\n      });\r\n      console.log(request);\r\n      const filteredList = await request.data.sort(function (a, b) {\r\n        return b.rating - a.rating;\r\n      });\r\n      const selectedGame =\r\n        filteredList[Math.floor(Math.random() * request.data.length - 1)];\r\n      setBannerGamesList(filteredList);\r\n      setCurrentGame(selectedGame);\r\n      let trailer = selectedGame.videos.find((video) =>\r\n        video.name.includes('Trailer')\r\n      );\r\n      setCurrentGameTrailer(\r\n        `https://www.youtube.com/watch?v=${trailer.video_id}`\r\n      );\r\n\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setServerError(error);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken || bannerGamesList.length > 0) return;\r\n\r\n    fetchData();\r\n  }, [twitchToken]);\r\n\r\n  const displayNewBanner = () => {\r\n    const newGame =\r\n      bannerGamesList[Math.floor(Math.random() * bannerGamesList.length - 1)];\r\n    const newGameTrailer = newGame.videos.find((video) =>\r\n      video.name.includes('Trailer')\r\n    );\r\n    setCurrentGame(newGame);\r\n    setCurrentGameTrailer(\r\n      `https://www.youtube.com/watch?v=${newGameTrailer.video_id}`\r\n    );\r\n    return;\r\n  };\r\n\r\n  return {\r\n    isLoading,\r\n    serverError,\r\n    currentGame,\r\n    currentGameTrailer,\r\n    displayNewBanner,\r\n  };\r\n};\r\n\r\nexport default useFetchBanner;\r\n","import './Banner.css';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { BiRefresh, BiVolumeMute, BiVolumeFull } from 'react-icons/bi';\r\nimport useFetchBanner from '../../hooks/useFetchBanner';\r\nimport ReactPlayer from 'react-player/youtube';\r\n\r\nfunction Banner({ setGameDetails, addGame, activeProfile }) {\r\n  const bannerGame = useFetchBanner();\r\n  const bannerRef = useRef();\r\n\r\n  // Don't allow user to add game if already in collection\r\n  const exists =\r\n    activeProfile.collection &&\r\n    activeProfile.collection.some(\r\n      (title) => title?.id === bannerGame.currentGame.id\r\n    );\r\n  const [mutedVideo, setMutedVideo] = useState(true);\r\n\r\n  const [playingVideo, setPlayingVideo] = useState(true);\r\n  const [trailerEnded, setTrailerEnded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (bannerGame.isLoading || !bannerRef) return;\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setPlayingVideo(true);\r\n        } else {\r\n          setPlayingVideo(false);\r\n        }\r\n      },\r\n      {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.1,\r\n      }\r\n    );\r\n    if (bannerRef.current) {\r\n      observer.observe(bannerRef.current);\r\n    }\r\n  }, [bannerRef, bannerGame.isLoading, bannerGame.currentGameTrailer]);\r\n\r\n  useEffect(() => {\r\n    setPlayingVideo(true);\r\n  }, [bannerGame.currentGameTrailer]);\r\n\r\n  // If the game description is longer that 150 characters, replace the reaminder with the ellipsis '...'\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n  };\r\n\r\n  // Wait for game deatils to finish loading or the game name shows up undefined\r\n  // Undefined is a game name apart of the dataset and will display jibberish\r\n  if (bannerGame.isLoading) {\r\n    return (\r\n      <div className='banner__loading'>\r\n        <div className='banner__spinner' />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <header className='banner' key={bannerGame.currentGame.id}>\r\n      <div ref={bannerRef} style={{ width: '100%', height: '100%' }}>\r\n        {bannerGame.currentGameTrailer && (\r\n          <ReactPlayer\r\n            className='banner__trailer'\r\n            url={bannerGame.currentGameTrailer}\r\n            playing={playingVideo ? true : false}\r\n            muted={mutedVideo ? true : false}\r\n            onEnded={() => setTrailerEnded(true)}\r\n            light={\r\n              trailerEnded\r\n                ? `//images.igdb.com/igdb/image/upload/t_1080p_2x/${bannerGame.currentGame.cover?.image_id}.jpg`\r\n                : false\r\n            }\r\n          />\r\n        )}\r\n\r\n        <div className='banner__contents'>\r\n          <h1 className='banner__title'>{bannerGame.currentGame?.name}</h1>\r\n\r\n          <div className='banner__buttons'>\r\n            <button\r\n              className='banner__button'\r\n              onClick={() => setGameDetails(bannerGame.currentGame)}\r\n            >\r\n              See Details\r\n            </button>\r\n            {!exists && (\r\n              <button\r\n                className='banner__button'\r\n                onClick={() => addGame(bannerGame.currentGame)}\r\n              >\r\n                Add to My List\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <h1 className='banner__description'>\r\n            {truncate(bannerGame.currentGame?.summary, 150)}\r\n          </h1>\r\n        </div>\r\n        <div className='banner--fadeBottom' />\r\n\r\n        {\r\n          <BiRefresh\r\n            size={35}\r\n            className='banner__refresh_icon'\r\n            onClick={bannerGame.displayNewBanner}\r\n          />\r\n        }\r\n        {mutedVideo ? (\r\n          <BiVolumeMute\r\n            size={27}\r\n            className='banner__mute_btn'\r\n            onClick={() => setMutedVideo(false)}\r\n          />\r\n        ) : (\r\n          <BiVolumeFull\r\n            size={27}\r\n            className='banner__volume_btn'\r\n            onClick={() => setMutedVideo(true)}\r\n          />\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './NavDropdown.css';\r\nimport { Link } from 'react-router-dom';\r\n// React Icons\r\nimport {\r\n  FaSortUp,\r\n  FaSpotify,\r\n  FaUserEdit,\r\n  FaPlaystation,\r\n  FaGamepad,\r\n} from 'react-icons/fa';\r\nimport { IoSettingsOutline } from 'react-icons/io5';\r\nimport { MdEdit } from 'react-icons/md';\r\n\r\nimport steamAuthBtn from '../../assets/images/steam-auth-btn.png';\r\n\r\nconst SPOTIFY_AUTH_URL = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_SPOTIFY_CLIENT_ID}&response_type=code&redirect_uri=${process.env.REACT_APP_BASE_URL}&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state`;\r\n\r\nconst NavDropdown = (props) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const allProfiles = props.allProfiles;\r\n\r\n  // Listens for escape key press to close nav dropdown\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        props.closeNavDropdown();\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  // Change current user\r\n  const changeUserHandler = (user) => {\r\n    props.changeProfile(user);\r\n  };\r\n\r\n  const generatePlaystationTitles = async () => {\r\n    try {\r\n      const request = await axios.get(`${baseURL}/playstation/user_titles`);\r\n      console.log(request.data);\r\n      for (let game of request.data) {\r\n        for (let i = 0; i < game.earnedTrophies.length; i++) {\r\n          if (game.earnedTrophies[i].earned) {\r\n            game.allTrophies[i].earned = true;\r\n          } else game.allTrophies[i].earned = false;\r\n        }\r\n      }\r\n\r\n      props.currentCollection.filter((ownedGame) => {\r\n        const inCollection = request.data.some((game) => {\r\n          if (ownedGame.name.toLowerCase() === game.name.toLowerCase()) {\r\n            ownedGame.trophies = game.allTrophies;\r\n            axios.put(`${baseURL}/app/update_game_trophies`, {\r\n              email: localStorage.getItem('user'),\r\n              name: props.activeProfile.name,\r\n              gameId: ownedGame.id,\r\n              trophies: game.allTrophies,\r\n            });\r\n          } else {\r\n            console.log('New game bruh');\r\n            axios.post(`${baseURL}/app/update_collection`, {\r\n              email: localStorage.getItem('user'),\r\n              currentProfile: localStorage.getItem('profile'),\r\n              name: game.name,\r\n              id: game.id,\r\n              imageURL: `//images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover.image_id}.jpg`,\r\n              playtime: 0,\r\n              origin: 'gameflix',\r\n            });\r\n          }\r\n        });\r\n        return inCollection;\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      return err;\r\n    }\r\n  };\r\n\r\n  allProfiles.sort((a, b) => (a.name - b.name ? 1 : -1));\r\n\r\n  return (\r\n    <div className='dropdown'>\r\n      <FaSortUp className='dropdown__arrow' />\r\n      <div className='dropdown__profiles'>\r\n        <ul className='dropdown__profiles_list'>\r\n          {allProfiles.map((user) => {\r\n            if (user.name !== props.activeProfile.name) {\r\n              return (\r\n                <li\r\n                  className='dropdown__profiles_item'\r\n                  key={user.name}\r\n                  onClick={() => changeUserHandler(user)}\r\n                >\r\n                  <img\r\n                    src={user.avatar}\r\n                    className='dropdown__profile_icon'\r\n                    alt={`${user.name} avatar icon`}\r\n                    style={{ backgroundColor: user.color }}\r\n                  />\r\n                  <p className='dropdown__profile_name'>{user.name}</p>\r\n                </li>\r\n              );\r\n            }\r\n          })}\r\n          <li className='dropdown__profiles_item' onClick={props.toProfilePage}>\r\n            <span className='dropdown__profiles_manage'>\r\n              <MdEdit size={22} />\r\n            </span>\r\n            <p className='dropdown__profile_name'>Manage Profiles</p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className='dropdown__settings'>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={() => props.editProfile()}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaUserEdit size={18} />\r\n          </span>\r\n          <p>My Profile</p>\r\n        </div>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={() => props.viewCollection()}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaGamepad size={18} />\r\n          </span>\r\n          <p>My Collection</p>\r\n        </div>\r\n        <div className='dropdown__settings_item' onClick={props.editAccount}>\r\n          <span className='dropdown__settings_item_icon'>\r\n            <IoSettingsOutline size={18} />\r\n          </span>\r\n          <p>Account Settings</p>\r\n        </div>\r\n      </div>\r\n      <div className='dropdown__settings'>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          onClick={generatePlaystationTitles}\r\n        >\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaPlaystation size={18} />\r\n          </span>\r\n          <p>Link Playstation</p>\r\n        </div>\r\n        <a href={SPOTIFY_AUTH_URL} className='dropdown__settings_item'>\r\n          <span className='dropdown__settings_item_icon'>\r\n            <FaSpotify\r\n              size={18}\r\n              style={{ color: props.spotifyToken ? '#1DB954' : '#FFF' }}\r\n            />\r\n          </span>\r\n          <p>Spotify Authentication</p>\r\n        </a>\r\n        <div\r\n          className='dropdown__settings_item'\r\n          style={{\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            paddingBottom: '0',\r\n            paddingLeft: '0',\r\n          }}\r\n        >\r\n          <Link to={`http://localhost:3001/api/auth/steam`}>\r\n            <img className='steam_btn' src={steamAuthBtn} />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div className='dropdown__settings_links'>\r\n        <Link\r\n          to='/login'\r\n          className='dropdown__settings_link'\r\n          onClick={props.logoutHandler}\r\n        >\r\n          Sign out of GameFlix\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavDropdown;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { AiFillEyeInvisible, AiFillEye } from 'react-icons/ai';\r\nimport axios from 'axios';\r\n\r\nconst AccountEditor = ({\r\n  closeAccountSettings,\r\n  setLoggedUser,\r\n  currentUser,\r\n}) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const [deletingAccount, setDeletingAccount] = useState(false);\r\n  const [updateStatus, setUpdateStatus] = useState('');\r\n  // EMAIL STATES\r\n  const [emailValue, setEmailValue] = useState(currentUser.email);\r\n  const [newEmailValue, setNewEmailValue] = useState('');\r\n  let repeatValue = '';\r\n  const [changingEmail, setChangingEmail] = useState(false);\r\n  // PASSWORD STATES\r\n  const [passwordValue, setPasswordValue] = useState(currentUser.password);\r\n  const [hidePassword, setHidePassword] = useState(true);\r\n  const [newPasswordValue, setNewPasswordValue] = useState('');\r\n  const [changingPassword, setChangingPassword] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (hidePassword) {\r\n      const hiddenPassword = currentUser.password.replace(/./gi, '*');\r\n      setPasswordValue(hiddenPassword);\r\n    } else {\r\n      setPasswordValue(currentUser.password);\r\n    }\r\n  }, [hidePassword]);\r\n\r\n  const updateEmail = async (email) => {\r\n    setUpdateStatus('');\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/update_user_email`, {\r\n        originalEmail: currentUser.email,\r\n        newEmail: email,\r\n      });\r\n\r\n      if (request.data.status < 400) {\r\n        setLoggedUser(request.data.user);\r\n        setUpdateStatus({ type: 'success', message: request.data.message });\r\n        setEmailValue(request.data.user.email);\r\n        setNewEmailValue('');\r\n        setChangingEmail(false);\r\n      } else {\r\n        setUpdateStatus({ type: 'error', message: request.data.message });\r\n        setNewEmailValue('');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const emailChangeHandler = () => {\r\n    if (!changingEmail) {\r\n      setChangingEmail(true);\r\n      setChangingPassword(false);\r\n    } else {\r\n      if (newEmailValue !== '') {\r\n        updateEmail(newEmailValue);\r\n      } else {\r\n        setChangingEmail(false);\r\n        setNewEmailValue('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteAccountHandler = async () => {\r\n    try {\r\n      await axios.delete(`${baseURL}/app/delete_account`, {\r\n        data: { id: currentUser._id },\r\n      });\r\n      window.location = '/';\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('profile');\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const passwordChangeHandler = () => {\r\n    if (!changingPassword) {\r\n      setChangingPassword(true);\r\n      setChangingEmail(false);\r\n    } else {\r\n      if (newPasswordValue !== '') {\r\n        repeatValue = newEmailValue;\r\n      } else {\r\n        setChangingPassword(false);\r\n        setNewPasswordValue('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const determineEmailValidity = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const request = await axios.post(`${baseURL}/app/update_user_profile`, {\r\n        originalEmail: emailValue,\r\n        newEmail: newEmailValue,\r\n      });\r\n      console.log(request);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='profile_edit__container'>\r\n      <div className='profile_edit__header'>\r\n        <h3>GAMEFLIX</h3>\r\n      </div>\r\n      <div className='profile_edit__form_wrapper' style={{ height: '350px' }}>\r\n        <h3>Account Settings</h3>\r\n        <div className='form_container'>\r\n          <form className='account_edit__form'>\r\n            {/* EMAIL CONTAINER */}\r\n            <div className='account_email_container'>\r\n              {updateStatus.type == 'error' ? (\r\n                <p className='account_email_error'>{updateStatus.message}</p>\r\n              ) : (\r\n                <p className='account_email_success'>{updateStatus.message}</p>\r\n              )}\r\n              <h4\r\n                style={{ color: 'white', fontSize: '2rem', marginLeft: '2px' }}\r\n              >\r\n                Email\r\n              </h4>\r\n              <input\r\n                className='account_email_input'\r\n                onChange={(e) => setEmailValue(e.target.value)}\r\n                value={emailValue}\r\n              />\r\n\r\n              {/* NEW EMAIL */}\r\n              {changingEmail && (\r\n                <>\r\n                  <input\r\n                    className='account_email_input'\r\n                    onChange={(e) => setNewEmailValue(e.target.value)}\r\n                    value={newEmailValue}\r\n                    placeholder='Enter new email'\r\n                    autoFocus\r\n                  />\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => {\r\n                      setNewEmailValue('');\r\n                      setChangingEmail(false);\r\n                    }}\r\n                    className='account_email_save_btn'\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </>\r\n              )}\r\n\r\n              <button\r\n                type='button'\r\n                onClick={emailChangeHandler}\r\n                className='save_btn'\r\n              >\r\n                {!changingEmail ? 'Change Email' : 'Save Email'}\r\n              </button>\r\n            </div>\r\n\r\n            {/* PASSWORD CONTAINER */}\r\n            <div className='account_password_container'>\r\n              <h4\r\n                style={{ color: 'white', fontSize: '2rem', marginLeft: '2px' }}\r\n              >\r\n                Password\r\n              </h4>\r\n              <input\r\n                className='account_password_input'\r\n                onChange={(e) => setPasswordValue(e.target.value)}\r\n                value={passwordValue}\r\n              />\r\n              <span\r\n                className='account_password_visible_icon'\r\n                onClick={() => setHidePassword(!hidePassword)}\r\n              >\r\n                {!hidePassword ? <AiFillEye /> : <AiFillEyeInvisible />}\r\n              </span>\r\n\r\n              {/* NEW PASSWORD */}\r\n              {changingPassword && (\r\n                <>\r\n                  <input\r\n                    className='account_password_input'\r\n                    onChange={(e) => setNewPasswordValue(e.target.value)}\r\n                    value={newPasswordValue}\r\n                    placeholder='Enter new password'\r\n                    autoFocus\r\n                  />\r\n                  <button\r\n                    type='button'\r\n                    onClick={() => {\r\n                      setNewPasswordValue('');\r\n                      setChangingPassword(false);\r\n                    }}\r\n                    className='account_password_save_btn'\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </>\r\n              )}\r\n              <button\r\n                type='button'\r\n                onClick={passwordChangeHandler}\r\n                className='save_btn'\r\n              >\r\n                {!changingPassword ? 'Change Password' : 'Save Password'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        {/* FORM ACTIONS */}\r\n        <div\r\n          className='form_actions'\r\n          style={{ justifyContent: 'space-between' }}\r\n        >\r\n          <button className='cancel_btn' onClick={closeAccountSettings}>\r\n            Back\r\n          </button>\r\n          <button\r\n            className='delete_account_btn'\r\n            onClick={() => setDeletingAccount(true)}\r\n          >\r\n            Delete Account\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {deletingAccount && (\r\n        <div className='delete_account_modal'>\r\n          <div className='delete_account_modal_content'>\r\n            <h4>Are you sure you want to delete your account?</h4>\r\n            <div className='delete_account_modal_actions'>\r\n              <div className='modal_action_option'>\r\n                <p>Yes</p>\r\n                <span\r\n                  className='video-game-button'\r\n                  onClick={deleteAccountHandler}\r\n                >\r\n                  A\r\n                </span>\r\n              </div>\r\n              <div className='modal_action_option'>\r\n                <p>No</p>\r\n                <span\r\n                  className='video-game-button'\r\n                  onClick={() => setDeletingAccount(false)}\r\n                >\r\n                  B\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountEditor;\r\n","import React, { useRef } from 'react';\r\nimport './Nav.css';\r\nimport logo from '../../assets/images/gameflix-logo.png';\r\nimport defaultAvatar from '../../assets/images/basic_avatar.png';\r\nimport { useEffect, useState } from 'react';\r\nimport { FaSistrix, FaAngleUp } from 'react-icons/fa';\r\nimport NavDropdown from './NavDropdown';\r\nimport ProfileEditor from '../Login/Profiles/ProfileEditor/ProfileEditor';\r\nimport AccountEditor from '../Login/Profiles/ProfileEditor/AccountEditor';\r\n\r\nfunction Nav(props) {\r\n  const [displayNav, setDisplayNav] = useState(false);\r\n  const [displayDropdown, setDisplayDropdown] = useState(false);\r\n  const [displaySearch, setDisplaySearch] = useState(false);\r\n  const searchRef = useRef('');\r\n  const [editingProfile, setEditingProfile] = useState(false);\r\n  const [editingAccount, setEditingAccount] = useState(false);\r\n\r\n  const profile = props.activeProfile;\r\n\r\n  const closeNavDropdown = () => {\r\n    setDisplayDropdown(false);\r\n  };\r\n\r\n  const closeSearch = () => {\r\n    if (searchRef.current.value.length > 0) {\r\n      return;\r\n    }\r\n    setDisplaySearch(false);\r\n  };\r\n\r\n  const formSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const searchValue = searchRef.current.value.trim();\r\n    if (searchValue.length == 0) return;\r\n    props.fetchSubmittedGame(searchValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // If the user scrolls down from the top of page, add a black background to the nav\r\n    const scrollNavListener = () => {\r\n      window.addEventListener('scroll', () => {\r\n        if (window.scrollY > 100) {\r\n          setDisplayNav(true);\r\n        } else setDisplayNav(false);\r\n      });\r\n    };\r\n    scrollNavListener();\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', scrollNavListener);\r\n    };\r\n  }, []);\r\n\r\n  const cancelEdit = () => {\r\n    document.body.style.overflowY = 'scroll';\r\n    setEditingProfile(false);\r\n    setEditingAccount(false);\r\n  };\r\n\r\n  const editProfileHandler = () => {\r\n    document.body.style.overflowY = 'hidden';\r\n    setEditingProfile(true);\r\n  };\r\n\r\n  const editAccountHandler = () => {\r\n    document.body.style.overflowY = 'hidden';\r\n    setEditingAccount(true);\r\n  };\r\n\r\n  const saveEdit = () => {\r\n    props.saveEdit();\r\n    setEditingProfile(false);\r\n  };\r\n\r\n  // Handles escape key press for search input\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        // If the search input is open, close it\r\n        setDisplaySearch(false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${displayNav && 'nav__hide'}`}>\r\n      {editingProfile && (\r\n        <div className='nav_edit_profile'>\r\n          <ProfileEditor\r\n            currentProfile={profile}\r\n            userEmail={props.currentUser.email}\r\n            viewAllProfiles={cancelEdit}\r\n            saveEdit={saveEdit}\r\n            getProfile={(test) => props.selectProfile(test)}\r\n            twitchToken={props.twitchToken}\r\n          />\r\n        </div>\r\n      )}\r\n      {editingAccount && (\r\n        <div className='nav_edit_profile'>\r\n          {' '}\r\n          <AccountEditor\r\n            closeAccountSettings={cancelEdit}\r\n            setLoggedUser={(user) => props.setLoggedUser(user)}\r\n            currentUser={props.currentUser}\r\n          />{' '}\r\n        </div>\r\n      )}\r\n      <img\r\n        className='nav__logo'\r\n        src={logo}\r\n        alt='GameFlix Logo'\r\n        onClick={() => (window.location = '/')}\r\n      />\r\n      <div className='nav__right'>\r\n        <div className='nav__search'>\r\n          {displaySearch && (\r\n            <form className='nav__search_form' onSubmit={formSubmitHandler}>\r\n              <input\r\n                ref={searchRef}\r\n                autoFocus\r\n                type='text'\r\n                placeholder='Titles, publishers, genres'\r\n                defaultValue={\r\n                  props.searchedGame ? `${props.searchedGame.name}` : ''\r\n                }\r\n                onBlur={closeSearch}\r\n              />\r\n            </form>\r\n          )}\r\n          <FaSistrix\r\n            className={`nav__search_icon ${displaySearch && 'search_active'}`}\r\n            onClick={() => setDisplaySearch(!displaySearch)}\r\n          />\r\n        </div>\r\n        <div\r\n          className='nav__actions'\r\n          onMouseLeave={() => setDisplayDropdown(false)}\r\n        >\r\n          <div\r\n            className='nav__avatar_container'\r\n            onMouseOver={() => setDisplayDropdown(true)}\r\n          >\r\n            <img\r\n              className='nav__avatar'\r\n              src={profile.avatar ? profile.avatar : defaultAvatar}\r\n              // style={{ backgroundColor: profile.color }}\r\n              alt=\"User's avatar\"\r\n            />\r\n          </div>\r\n          <FaAngleUp\r\n            className='nav__avatar_arrow'\r\n            style={{\r\n              transform: `${\r\n                displayDropdown ? 'rotate(180deg)' : 'rotate(0deg)'\r\n              }`,\r\n            }}\r\n          />\r\n          {/* <NavDropdown /> */}\r\n          {displayDropdown && (\r\n            <NavDropdown\r\n              changeProfile={props.changeUser}\r\n              activeProfile={profile}\r\n              allProfiles={props.currentUser.profiles}\r\n              logoutHandler={props.onLogout}\r\n              closeNavDropdown={closeNavDropdown}\r\n              toProfilePage={props.toProfilePage}\r\n              spotifyToken={props.spotifyToken}\r\n              editProfile={editProfileHandler}\r\n              editAccount={editAccountHandler}\r\n              updateCollection={props.updateCollection}\r\n              currentCollection={props.currentCollection}\r\n              viewCollection={props.viewCollection}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './MainRow.css';\r\nimport axios from 'axios';\r\nimport { FaAngleUp } from 'react-icons/fa';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\n\r\nconst MainRow = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [currentFilter, setCurrentFilter] = useState('Week');\r\n  const [changingFilter, setChangingFilter] = useState(false);\r\n  const [currentlyViewing, setCurrentlyViewing] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  let todaysDate = new Date();\r\n  const weekDateFormat = Math.floor(\r\n    new Date(todaysDate.getTime() + 7 * 24 * 60 * 60 * 1000) / 1000\r\n  );\r\n  const monthDateFormat = Math.floor(\r\n    new Date(\r\n      new Date(weekDateFormat * 1000).setMonth(\r\n        new Date(weekDateFormat * 1000).getMonth() + 1\r\n      )\r\n    ).getTime() / 1000\r\n  );\r\n  const yearDateFormat = Math.floor(\r\n    new Date(\r\n      new Date(monthDateFormat * 1000).setMonth(\r\n        new Date(monthDateFormat * 1000).getMonth() + 12\r\n      )\r\n    ).getTime() / 1000\r\n  );\r\n\r\n  // use pagination (scroll api) to get all game titles and year. Maybe get it every 24 hours using a cron job. Cache it locally and use that to autocomplete game titles. That's what we do internally.\r\n\r\n  const filterUniques = (list) => {\r\n    const uniques = [];\r\n    const filteredList = [];\r\n    list.map((game) => {\r\n      if (uniques.indexOf(game.game.name) === -1) {\r\n        uniques.push(game.game.name);\r\n        filteredList.push(game);\r\n      }\r\n    });\r\n    return filteredList;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Grab upcoming games based on current date filter\r\n    if (!twitchToken) return;\r\n    setLoading(true);\r\n    async function fetchData() {\r\n      let startDate;\r\n      let targetDate;\r\n\r\n      switch (currentFilter) {\r\n        case 'Month':\r\n          startDate = weekDateFormat;\r\n          targetDate = monthDateFormat;\r\n          break;\r\n        case 'Year':\r\n          startDate = monthDateFormat;\r\n          targetDate = yearDateFormat;\r\n          break;\r\n        default:\r\n          startDate = Math.floor(todaysDate.getTime() / 1000);\r\n          targetDate = weekDateFormat;\r\n          break;\r\n      }\r\n\r\n      try {\r\n        const retries = 3;\r\n        for (let i = 0; i < retries; i++) {\r\n          try {\r\n            const request = await axios.post(`${baseURL}/app/upcoming`, {\r\n              token: twitchToken,\r\n              currentDate: startDate,\r\n              targetDate,\r\n            });\r\n            setGames(filterUniques(request.data));\r\n            setLoading(false);\r\n            break;\r\n          } catch (error) {\r\n            console.log('Issue fetching data');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [currentFilter, twitchToken]);\r\n\r\n  // Handler to change the filter type (Week, Month, Year)\r\n  const changeFilterDate = (e) => {\r\n    setCurrentFilter(e.target.innerText);\r\n    setChangingFilter(false);\r\n  };\r\n\r\n  // Convert the YYYY-MM-DD to Month, Day, Year\r\n  const convertDate = (date) => {\r\n    let months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December',\r\n    ];\r\n\r\n    // Replace hypens with dashes to get correct date\r\n    // Hypens returned the date previous from current due to some weird Date bug\r\n    let now = new Date(date.replace(/-/g, '/'));\r\n    let currentDay = now.getDate();\r\n    let formattedDay;\r\n\r\n    // Give the numbered day the appropriate abbriviation\r\n    switch (currentDay) {\r\n      case 1:\r\n      case 21:\r\n      case 31:\r\n        formattedDay = currentDay + 'st';\r\n        break;\r\n      case 2:\r\n      case 22:\r\n        formattedDay = currentDay + 'nd';\r\n        break;\r\n      case 3:\r\n      case 23:\r\n        formattedDay = currentDay + 'rd';\r\n        break;\r\n      // Most days have the th ending (28th) so set as default\r\n      default:\r\n        formattedDay = currentDay + 'th';\r\n        break;\r\n    }\r\n    return (\r\n      months[now.getMonth()] + ' ' + formattedDay + ', ' + now.getFullYear()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onMouseOver={() => setCurrentlyViewing(true)}\r\n      onMouseOut={() => setCurrentlyViewing(false)}\r\n      className='main_row'\r\n    >\r\n      <div\r\n        className='main_row__filters'\r\n        onMouseLeave={() => setChangingFilter(false)}\r\n      >\r\n        <h2>Coming Soon</h2>\r\n        {/* Filter Type */}\r\n        <p\r\n          className='filters_filter'\r\n          onMouseOver={() => setChangingFilter(true)}\r\n        >\r\n          {currentFilter}{' '}\r\n          <FaAngleUp\r\n            size={10}\r\n            className={changingFilter ? 'arrow_active' : 'arrow'}\r\n          />\r\n        </p>{' '}\r\n        {changingFilter && (\r\n          <div className='filter_options'>\r\n            <ul>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Week' ? 'white' : '',\r\n                  color: currentFilter == 'Week' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Week\r\n              </li>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Month' ? 'white' : '',\r\n                  color: currentFilter == 'Month' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Month\r\n              </li>\r\n              <li\r\n                style={{\r\n                  backgroundColor: currentFilter == 'Year' ? 'white' : '',\r\n                  color: currentFilter == 'Year' ? 'black' : '',\r\n                }}\r\n                onClick={changeFilterDate}\r\n              >\r\n                Year\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className='main_row__row_posters'>\r\n        {games &&\r\n          !loading &&\r\n          games.map((game, i) => (\r\n            <div\r\n              className={`main_row__poster_container ${\r\n                currentlyViewing && 'dimmed'\r\n              }`}\r\n              onClick={() => setGameDetails(game.game)}\r\n              key={game.id}\r\n            >\r\n              <h4 className='main__poster_released'>\r\n                {convertDate(game.human)}\r\n              </h4>\r\n              <img\r\n                key={game.id}\r\n                className='main_poster'\r\n                src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.game.cover?.image_id}.jpg`}\r\n                alt={game.name}\r\n              />\r\n            </div>\r\n          ))}\r\n        {loading && (\r\n          <div className='main_row__loading_container'>\r\n            {[...Array(4)].map((item, i) => (\r\n              <div key={i} className='main_row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainRow;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './TrendingRow.css';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport axios from 'axios';\r\n\r\nconst TrendingRow = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  let currentDate = Math.floor(new Date().getTime() / 1000);\r\n  let trendingTitlesFetched = JSON.parse(sessionStorage.getItem('trending'));\r\n\r\n  //   [[redirects]]\r\n  // from = “/app/\"\r\n  // to = “https://cybrary2022.onrender.com/app/:splat 2”\r\n  // status = 200\r\n  // force = true\r\n  // headers = {X-From = “Netlify”}\r\n  useEffect(() => {\r\n    if (!twitchToken) return;\r\n    if (trendingTitlesFetched && trendingTitlesFetched.length > 0) {\r\n      setGames(trendingTitlesFetched);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    // Grab games from each genre\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      try {\r\n        let trendingTitles = [];\r\n        const request = await axios.post(`${baseURL}/app/trending`, {\r\n          token: twitchToken,\r\n          currentDate: currentDate,\r\n        });\r\n\r\n        console.log(request);\r\n\r\n        const uniqueTitles = new Set();\r\n        request.data.filter(\r\n          (item) =>\r\n            !uniqueTitles.has(item.game.id) &&\r\n            uniqueTitles.add(item.game.id).add(item.game)\r\n        );\r\n\r\n        uniqueTitles.forEach(\r\n          (game) => typeof game == 'object' && trendingTitles.push(game)\r\n        );\r\n\r\n        trendingTitles.sort(\r\n          (a, b) =>\r\n            b.release_dates.findLast((dates) => dates.date) -\r\n              a.release_dates.findLast((dates) => dates.date) ||\r\n            b.hypes - a.hypes\r\n        );\r\n\r\n        setGames(trendingTitles.slice(0, 10));\r\n\r\n        sessionStorage.setItem(\r\n          'trending',\r\n          JSON.stringify(trendingTitles.slice(0, 10))\r\n        );\r\n        setLoading(false);\r\n        return request;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [twitchToken]);\r\n\r\n  if (loading)\r\n    return (\r\n      <div className='row__loading_container'>\r\n        {[...Array(10)].map((item, i) => (\r\n          <div key={i} className='trending_row__placeholder__wrapper'>\r\n            <Placeholder key={i} delay={i} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className='trending_row'>\r\n      <h2>TRENDING TITLES</h2>\r\n\r\n      <div className='trending_row__posters'>\r\n        {games.map((game, i) => (\r\n          <React.Fragment key={game.name}>\r\n            <div className='trending_row__poster_wrapper'>\r\n              <div className='trending_row__rank'>{i + 1}</div>\r\n              <div\r\n                className='trending_row__poster_container'\r\n                style={{\r\n                  marginLeft: (i == 9 && '160px') || (i == 0 && '65px'),\r\n                }}\r\n                onClick={() => setGameDetails(game)}\r\n              >\r\n                {' '}\r\n                {!loading && (\r\n                  <>\r\n                    <img\r\n                      loading='lazy'\r\n                      className='trending_row__poster'\r\n                      src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                      alt={game.name}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendingRow;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './NewReleases.css';\r\nimport Placeholder from '../Placeholder/Placeholder';\r\nimport GamePreview from '../Row/GamePreview/GamePreview';\r\nimport axios from 'axios';\r\n\r\nconst NewReleases = ({ twitchToken, setGameDetails }) => {\r\n  const [games, setGames] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const newReleases = [];\r\n\r\n  useEffect(() => {\r\n    if (!twitchToken) return;\r\n\r\n    async function fetchNewReleases() {\r\n      setLoading(true);\r\n\r\n      try {\r\n        // const scrape_request = await axios.get(`${baseURL}/steam/new_releases`);\r\n        // console.log(scrape_request);\r\n        return;\r\n        // const newReleasesData = await Promise.all(\r\n        //   newReleases.map(async (game) => {\r\n        //     const res = await axios.post(\r\n        //       `${baseURL}/app/search_trending_game`,\r\n        //       {\r\n        //         token: twitchToken,\r\n        //         gameName: game,\r\n        //       }\r\n        //     );\r\n        //     return res.data[0].game;\r\n        //   })\r\n        // );\r\n        // setGames(newReleasesData);\r\n        // setLoading(false);\r\n        // return newReleasesData;\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchNewReleases();\r\n  }, [twitchToken]);\r\n\r\n  // Grab trailer video from selected game\r\n  // const fetchGameDetails = (game) => {\r\n  //   setGameDetails(game);\r\n  //   setCurrentlyOpen(game.name);\r\n  //   setCurrentGame(game);\r\n  // };\r\n\r\n  const closeGameDetails = () => {\r\n    // setCurrentlyOpen(null);\r\n    // setCurrentGame(null);\r\n  };\r\n\r\n  games?.sort((a, b) =>\r\n    a.rating_count > b.rating_count\r\n      ? -1\r\n      : b.rating_count > a.rating_count\r\n      ? 1\r\n      : 0\r\n  );\r\n\r\n  return '';\r\n\r\n  return (\r\n    <div className='new_releases_row'>\r\n      <h2>NEW RELEASES</h2>\r\n\r\n      <div className='new_releases_row__posters'>\r\n        {games.map((game, i) => (\r\n          <React.Fragment key={game.name}>\r\n            <div className='new_releases_row__poster_wrapper'>\r\n              <div\r\n                className='new_releases_row__poster_container'\r\n                onClick={() => setGameDetails(game)}\r\n              >\r\n                {' '}\r\n                {!loading && (\r\n                  <>\r\n                    <img\r\n                      loading='lazy'\r\n                      className='new_releases_row__poster'\r\n                      src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\r\n                      alt={game.name}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n              {/* {currentlyOpen === game.name && (\r\n                <GamePreview\r\n                  game={currentGame}\r\n                  displayDetails={displayDetails}\r\n                  hideDetails={closeGameDetails}\r\n                />\r\n              )} */}\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n        {loading && (\r\n          <div className='row__loading_container'>\r\n            {[...Array(10)].map((item, i) => (\r\n              <div key={i} className='new_releases_row__placeholder__wrapper'>\r\n                <Placeholder key={i} delay={i} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewReleases;\r\n","import React, { useEffect } from 'react';\r\nimport SpotifyPlayer from 'react-spotify-web-playback';\r\nimport SpotifyWebApi from 'spotify-web-api-node';\r\nimport './SpotifyPlayback.css';\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  clientId: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\r\n});\r\n\r\nconst activeProfile = localStorage.getItem('profile');\r\n\r\nconst SpotifyPlayback = ({\r\n  trackUri,\r\n  playAudio,\r\n  beginPlayback,\r\n  pausePlayback,\r\n  spotifyToken,\r\n}) => {\r\n  useEffect(() => {\r\n    spotifyApi.setAccessToken(spotifyToken);\r\n  }, [spotifyToken]);\r\n\r\n  useEffect(() => {\r\n    beginPlayback();\r\n  }, [trackUri]);\r\n\r\n  if (!spotifyToken) return;\r\n  return (\r\n    <>\r\n      <div className='playback_container'>\r\n        <SpotifyPlayer\r\n          token={spotifyToken}\r\n          callback={(state) => {\r\n            if (!state.isPlaying) pausePlayback();\r\n          }}\r\n          uris={trackUri ? [trackUri] : []}\r\n          play={playAudio}\r\n          styles={{\r\n            color: 'white',\r\n            bgColor: 'rgba(0,0,0,0.8)',\r\n            sliderColor: activeProfile.color,\r\n            trackArtistColor: 'white',\r\n            trackNameColor: activeProfile.color,\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpotifyPlayback;\r\n","// Get todays date based off current timezone\r\nlet todaysDate = new Date();\r\nlet igdbDate = Math.floor(todaysDate.getTime() / 1000);\r\nlet filterDate = igdbDate * 1000;\r\n\r\n// List of endpoints for the Rawg.io API\r\nconst requests = [\r\n  {\r\n    requestId: 'fetchAdventureTitles',\r\n    genreId: 31,\r\n    title: 'ACTION/ADVENTURE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchArcadeTitles',\r\n    genreId: 33,\r\n    title: 'ARCADE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchMusicTitles',\r\n    genreId: 7,\r\n    title: 'MUSIC GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchHackTitles',\r\n    genreId: 25,\r\n    title: 'HACK/SLASH TITLES',\r\n  },\r\n  {\r\n    requestId: 'fetchFightingTitles',\r\n    genreId: 4,\r\n    title: 'FIGHTING GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchIndieTitles',\r\n    genreId: 32,\r\n    title: 'INDIE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchMassivelyMultiplayerTitles',\r\n    genreId: 36,\r\n    title: 'MOBA GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchPlatformerTitles',\r\n    genreId: 8,\r\n    title: 'PLATFORMER GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchPuzzleTitles',\r\n    genreId: 9,\r\n    title: 'PUZZLE GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchRacingTitles',\r\n    genreId: 10,\r\n    title: 'RACING GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchRPGTitles',\r\n    genreId: 12,\r\n    title: 'RPG GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchShooterTitles',\r\n    genreId: 5,\r\n    title: 'SHOOTER GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchSimulationTitles',\r\n    genreId: 13,\r\n    title: 'SIMULATION GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchSportsTitles',\r\n    genreId: 14,\r\n    title: 'SPORTS GAMES',\r\n  },\r\n  {\r\n    requestId: 'fetchStrategy',\r\n    genreId: (11, 15),\r\n    title: 'STRATEGY GAMES',\r\n  },\r\n];\r\n\r\nexport default requests;\r\n","import { useState, useEffect, memo, lazy, Suspense } from 'react';\r\n\r\n// Component Imports\r\nimport Row from '../Row/Row';\r\nimport Banner from '../Banner/Banner';\r\nimport Nav from '../Nav/Nav';\r\nimport MainRow from '../MainRow/MainRow';\r\nimport TrendingRow from '../TrendingRow/TrendingRow';\r\nimport NewReleases from '../NewReleases/NewReleases';\r\n\r\n// File Imports\r\nimport SpotifyPlayback from '../SpotifyPlayback/SpotifyPlayback';\r\nimport useSpotifyAuth from '../../hooks/useSpotifyAuth';\r\nimport useSteamAuth from '../../hooks/useSteamAuth';\r\nimport useFetchGenres from '../../hooks/useFetchGenres';\r\nimport { SlOptions } from 'react-icons/sl';\r\n\r\nconst GameDetails = lazy(() => import('../GameDetails/GameDetails'));\r\nconst Notification = lazy(() => import('../Notification/Notification'));\r\nconst UserCollection = lazy(() =>\r\n  import('../UserCollectionPage/UserCollection')\r\n);\r\n\r\nconst code = new URLSearchParams(window.location.search).get('code');\r\nconst windowUrl = window.location.search;\r\nconst id = windowUrl.split('?')[1];\r\n\r\nconst Dashboard = ({\r\n  currentUser,\r\n  twitchToken,\r\n  currentProfile,\r\n  currentCollection,\r\n  userNotes,\r\n  manageProfiles,\r\n  updateCollection,\r\n  selectProfile,\r\n  updateGameStatus,\r\n  fetchGame,\r\n  addGame,\r\n  removeGame,\r\n  logoutUser,\r\n  gameStatus,\r\n  resetGameStatus,\r\n}) => {\r\n  const allGenres = useFetchGenres();\r\n  const [displayNotification, setDisplayNotification] = useState(false);\r\n  const [notification, setNotification] = useState({ status: '', message: '' });\r\n\r\n  // Spotify States\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [playAudio, setPlayAudio] = useState(false);\r\n  const [rowsLoading, setRowsLoading] = useState();\r\n\r\n  // User states\r\n  const [changingUser, setChangingUser] = useState(false);\r\n  const [editingUser, setEditingUser] = useState(false);\r\n  const [loggedUser, setLoggedUser] = useState(null);\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n  const [viewingCollection, setViewingCollection] = useState(false);\r\n\r\n  // Row States\r\n  const [currentGameOpen, setCurrentGameOpen] = useState(null);\r\n  const [viewingGameOptions, setViewingGameOptions] = useState(false);\r\n  const [hoveringGame, setHoveringGame] = useState(null);\r\n\r\n  // Search States\r\n  const [gameDetails, setGameDetails] = useState(null);\r\n\r\n  // Local Variables\r\n  const spotifyAccessToken = useSpotifyAuth(code);\r\n  const steamCollection = useSteamAuth(id);\r\n\r\n  useEffect(() => {\r\n    if (!currentGameOpen) document.body.style.overflow = 'auto';\r\n  }, []);\r\n\r\n  const changeProfile = (user) => {\r\n    setChangingUser(true);\r\n    localStorage.setItem('profile', user.name);\r\n    setTimeout(() => {\r\n      setChangingUser(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setHoveringGame(null);\r\n    resetGameStatus();\r\n  };\r\n\r\n  const openGameWindow = (game) => {\r\n    console.log(game);\r\n    setCurrentGameOpen(game.id);\r\n    document.body.style.overflow = 'hidden';\r\n  };\r\n\r\n  const closeGameWindow = () => {\r\n    document.body.style.overflow = 'auto';\r\n    setCurrentGameOpen(null);\r\n  };\r\n\r\n  const seeGameOptions = () => {\r\n    setViewingGameOptions(true);\r\n  };\r\n\r\n  const playTrack = (track) => {\r\n    setCurrentTrack(track);\r\n  };\r\n\r\n  // Loading screen for profile change\r\n  if (changingUser) {\r\n    return (\r\n      <div className='loading_profile__container'>\r\n        <div className='loading_profile'>\r\n          <img src={currentProfile.avatar} alt='current user avatar' />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (currentProfile) {\r\n    if (gameDetails !== null) {\r\n      return (\r\n        <>\r\n          <Suspense fallback={<>...</>}>\r\n            <GameDetails\r\n              setNotification={(status, message) =>\r\n                setNotification({ status, message })\r\n              }\r\n              game={gameDetails}\r\n              closeDetails={() => setGameDetails(null)}\r\n              twitchToken={twitchToken}\r\n              addGame={(game) => addGame(game)}\r\n              removeGame={(game) => removeGame(game)}\r\n              activeProfile={currentProfile}\r\n            />\r\n            <Notification\r\n              notification={notification}\r\n              displayNotification={displayNotification}\r\n              hideNotification={() => {\r\n                setNotification({ message: '', status: '' });\r\n              }}\r\n            />\r\n          </Suspense>\r\n        </>\r\n      );\r\n    }\r\n\r\n    if (viewingCollection)\r\n      return (\r\n        <Suspense fallback={<>...</>}>\r\n          <UserCollection\r\n            collection={currentCollection}\r\n            activeProfile={currentProfile}\r\n            backToHome={() => setViewingCollection(false)}\r\n            currentTrack={currentTrack}\r\n            playTrack={playTrack}\r\n            isPlaying={playAudio}\r\n            pausePlayback={() => setPlayAudio(false)}\r\n            resumePlayback={() => setPlayAudio(true)}\r\n            setSelectedProfile={(profile) => setSelectedProfile(profile)}\r\n            spotifyToken={spotifyAccessToken}\r\n            removeGame={(game) => removeGame(game)}\r\n            updateCollection={updateCollection}\r\n            userNotes={userNotes}\r\n          />\r\n        </Suspense>\r\n      );\r\n\r\n    return (\r\n      <div className='App'>\r\n        <Nav\r\n          currentUser={currentUser}\r\n          activeProfile={currentProfile}\r\n          changeUser={changeProfile}\r\n          onLogout={logoutUser}\r\n          fetchSubmittedGame={fetchGame}\r\n          toProfilePage={() => localStorage.removeItem('profile')}\r\n          selectProfile={(profile) => setSelectedProfile(profile)}\r\n          spotifyToken={spotifyAccessToken}\r\n          twitchToken={twitchToken}\r\n          saveEdit={() => setEditingUser(true)}\r\n          setLoggedUser={(user) => setLoggedUser(user)}\r\n          updateCollection={updateCollection}\r\n          currentCollection={currentCollection}\r\n          viewCollection={() => setViewingCollection(true)}\r\n        />\r\n\r\n        <Banner\r\n          setGameDetails={(id) => setGameDetails(id)}\r\n          addGame={(game) => addGame(game)}\r\n          activeProfile={currentProfile}\r\n        />\r\n        <MainRow\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        <NewReleases\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        <TrendingRow\r\n          twitchToken={twitchToken}\r\n          setGameDetails={(game) => setGameDetails(game)}\r\n        />\r\n\r\n        {currentGameOpen && (\r\n          <>\r\n            <h1 className='row__preview_close' onClick={closeGameWindow}>\r\n              X\r\n            </h1>\r\n            <h1 className='row__preview_close options' onClick={seeGameOptions}>\r\n              <SlOptions />\r\n            </h1>\r\n          </>\r\n        )}\r\n        <div\r\n          className={`${currentGameOpen !== null && 'game_preview__modal'}`}\r\n        />\r\n\r\n        {allGenres.genreGamesList.map((request) => (\r\n          <Row\r\n            key={Object.keys(request)}\r\n            activeProfile={currentProfile}\r\n            spotifyToken={spotifyAccessToken}\r\n            genreDetails={Object.entries(request)}\r\n            playTrack={playTrack}\r\n            currentTrack={currentTrack}\r\n            setGameDetails={(game) => setGameDetails(game)}\r\n            resumePlayback={(e) => setPlayAudio(true)}\r\n            pausePlayback={(e) => setPlayAudio(false)}\r\n            isPlaying={playAudio}\r\n            currentGameOpen={currentGameOpen}\r\n            openGame={(game) => openGameWindow(game)}\r\n            closeGameWindow={closeGameWindow}\r\n            G\r\n            updateGameStatus={(action, game) => updateGameStatus(action, game)}\r\n            setNotification={(status, message) =>\r\n              setNotification({ status, message })\r\n            }\r\n            loading={rowsLoading}\r\n            hoverGame={(game) => setHoveringGame(game)}\r\n            hoverAway={() => resetGame()}\r\n            currentHover={hoveringGame}\r\n            currentCollection={currentCollection}\r\n            gameStatus={gameStatus}\r\n          />\r\n        ))}\r\n\r\n        {spotifyAccessToken && (\r\n          <SpotifyPlayback\r\n            spotifyToken={spotifyAccessToken}\r\n            playAudio={playAudio}\r\n            beginPlayback={(e) => setPlayAudio(true)}\r\n            pausePlayback={(e) => setPlayAudio(false)}\r\n            trackUri={currentTrack?.uri}\r\n          />\r\n        )}\r\n\r\n        <Notification\r\n          notification={notification}\r\n          displayNotification={displayNotification}\r\n          hideNotification={() => {\r\n            setNotification({ message: '', status: '' });\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(Dashboard);\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport requestsIGDB from '../requestsIGDB';\r\n\r\nexport default function useFetchGenres() {\r\n  const existingToken = localStorage.getItem('twitch_auth');\r\n  const [genreGamesList, setGenreGamesList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const currentDate = new Date();\r\n\r\n  useEffect(() => {\r\n    const fetchGenres = async () => {\r\n      const request = await axios.get(`${baseURL}/app/get_genres`);\r\n      const last_updated = new Date(request.data.last_updated);\r\n\r\n      if (currentDate > last_updated.setDate(last_updated.getDate() + 1)) {\r\n        return updateGenresAPI();\r\n      } else {\r\n        setGenreGamesList(request.data[0].genres_list);\r\n        setIsLoading(false);\r\n        return request.data;\r\n      }\r\n    };\r\n\r\n    const updateGenresAPI = async () => {\r\n      if (!existingToken) return;\r\n\r\n      const genreTitles = await Promise.all(\r\n        requestsIGDB.map((genre) => {\r\n          return axios.post(`${baseURL}/app/game_genre`, {\r\n            token: existingToken,\r\n            genreId: genre.genreId,\r\n            genreTitle: genre.title,\r\n          });\r\n        })\r\n      );\r\n      const completeGenreList = genreTitles.map((genre) => genre.data);\r\n      updateGenresCollection(completeGenreList);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchGenres();\r\n  }, [existingToken]);\r\n\r\n  const updateGenresCollection = async (list) => {\r\n    const request = await axios.post(`${baseURL}/app/update_genres`, {\r\n      genreList: list,\r\n      date: currentDate,\r\n    });\r\n    setGenreGamesList(request.data.genres_list);\r\n  };\r\n\r\n  return { genreGamesList, isLoading };\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useSpotifyAuth(code) {\r\n  const [accessToken, setAccessToken] = useState();\r\n  const [refreshToken, setRefreshToken] = useState();\r\n  const [expiresIn, setExpiresIn] = useState();\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const prevToken = sessionStorage.getItem('spotify_auth');\r\n\r\n  useEffect(() => {\r\n    if (prevToken) {\r\n      console.log(prevToken);\r\n      setAccessToken(JSON.parse(prevToken));\r\n      return;\r\n    }\r\n    if (!code) return;\r\n    const spotifyAuthentication = async () => {\r\n      try {\r\n        const request = await axios.post(\r\n          `${baseURL}/app/spotify_authentication`,\r\n          {\r\n            code,\r\n            baseURL,\r\n          }\r\n        );\r\n        setAccessToken(request.data.tokenRequest.body.access_token);\r\n        setRefreshToken(request.data.tokenRequest.body.refresh_token);\r\n        setExpiresIn(request.data.tokenRequest.body.expires_in);\r\n        sessionStorage.setItem(\r\n          'spotify_auth',\r\n          JSON.stringify(request.data.tokenRequest.body.access_token)\r\n        );\r\n        window.history.pushState({}, null, '/');\r\n      } catch (error) {\r\n        console.log(error);\r\n        window.location = '/';\r\n      }\r\n    };\r\n    spotifyAuthentication();\r\n  }, [code]);\r\n\r\n  useEffect(() => {\r\n    if (!refreshToken || !expiresIn) return;\r\n    const refreshSpotifyToken = async () => {\r\n      try {\r\n        const request = await axios.post(`${baseURL}/app/refresh_token`, {\r\n          refreshToken,\r\n          baseURL,\r\n        });\r\n        setAccessToken(request.data.body.body.access_token);\r\n        setRefreshToken(request.data.body.body.refresh_token);\r\n        setExpiresIn(request.data.body.body.expires_in);\r\n      } catch (error) {\r\n        console.log('REFRESH TOKEN ERROR');\r\n        window.location = '/';\r\n      }\r\n    };\r\n    const interval = setInterval(() => {\r\n      refreshSpotifyToken();\r\n    }, (expiresIn - 60) * 1000);\r\n\r\n    return () => clearTimeout(interval);\r\n  }, [refreshToken, expiresIn]);\r\n\r\n  return accessToken;\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useSteamAuth(id) {\r\n  const [steamCollection, setSteamCollection] = useState([]);\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  useEffect(() => {\r\n    if (!id) return;\r\n    const fetchUserLibrary = async () => {\r\n      try {\r\n        const request = await axios.get(`${baseURL}/steam/get_owned_games`, {\r\n          params: {\r\n            id,\r\n          },\r\n        });\r\n        localStorage.setItem('steamID', request.config.params.id);\r\n        console.log(request.data);\r\n        setSteamCollection(request.data);\r\n        window.history.pushState({}, null, '/');\r\n      } catch (error) {\r\n        console.log(error);\r\n        console.log('GET STEAM COLLECTION ERROR');\r\n      }\r\n    };\r\n    fetchUserLibrary();\r\n  }, [id]);\r\n\r\n  return steamCollection;\r\n}\r\n","import React, { useState } from 'react';\r\nimport './ProfileEditor.css';\r\n\r\nconst SearchList = ({ list, selectGame }) => {\r\n  return (\r\n    <div className='search_list_container'>\r\n      <ul className='search_list'>\r\n        {list.slice(0, 5).map((game) => (\r\n          <li className='search_list_item' onClick={() => selectGame(game)}>\r\n            <img className='item_thumbnail' src={game.cover.url} />\r\n            <p className='item_title'>{game.name}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchList;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './ProfileEditor.css';\r\nimport SearchList from './SearchList';\r\nimport axios from 'axios';\r\nimport { MdEdit } from 'react-icons/md';\r\nimport { SketchPicker } from 'react-color';\r\nimport { FaAngleDown } from 'react-icons/fa';\r\n\r\nconst ProfileEditor = (props) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const currentProfile = props.currentProfile;\r\n  const isAdmin = currentProfile.isAdmin;\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchLoading, setSearchLoading] = useState(false);\r\n  // Current Profile Name\r\n  const [nameValue, setNameValue] = useState(currentProfile.name);\r\n  // Title Input State and Ref\r\n  const titleRef = useRef('');\r\n  const [titleValue, setTitleValue] = useState(currentProfile.favorite_game);\r\n  const [titleId, setTitleId] = useState(0);\r\n  const [titleImage, setTitleImage] = useState('');\r\n  const [titleList, setTitleList] = useState([]);\r\n  let searchValue = '';\r\n  // Console Input State and Ref\r\n  const consoleRef = useRef('');\r\n  const [consoleValue, setConsoleValue] = useState(\r\n    currentProfile.favorite_console\r\n  );\r\n  // Profile form states\r\n  const [statusMessage, setStatusMessage] = useState('');\r\n  const [currentAvatar, setCurrentAvatar] = useState(currentProfile.avatar);\r\n  const [imgFilePreview, setImgFilePreview] = useState(null);\r\n  const fileInputRef = useRef('');\r\n  const [imgLink, setImgLink] = useState('');\r\n  const [usingImgLink, setUsingImgLink] = useState(false);\r\n  const [changingAvatar, setChangingAvatar] = useState(false);\r\n  // Color states\r\n  const [changingColor, setChangingColor] = useState(false);\r\n  const [color, setColor] = useState(currentProfile.color);\r\n  // Genre states\r\n  const genreRef = useRef('');\r\n  const [changingGenre, setChangingGenre] = useState(false);\r\n  const [currentGenre, setCurrentGenre] = useState(\r\n    currentProfile.favorite_genre\r\n  );\r\n  console.log(searchValue);\r\n\r\n  const genreList = [\r\n    'Action',\r\n    'Adventure',\r\n    'Arcade',\r\n    'Card & Board',\r\n    'Family',\r\n    'Fighting',\r\n    'Indie',\r\n    'MMO (Massive Multiplayer)',\r\n    'Platformer',\r\n    'Puzzle',\r\n    'Racing',\r\n    'RPG',\r\n    'Shooter',\r\n    'Sports',\r\n    'Strategy',\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (\r\n      titleValue == '' ||\r\n      titleValue == currentProfile.favorite_game ||\r\n      searchLoading\r\n    ) {\r\n      setTitleList([]);\r\n      return;\r\n    }\r\n    const delaySearch = setTimeout(() => {\r\n      setSearchLoading(true);\r\n      const fetchSearchedGame = async () => {\r\n        const request = await axios.post(`${baseURL}/app/search_game`, {\r\n          gameName: titleValue,\r\n          token: props.twitchToken,\r\n        });\r\n        setTitleList(request.data);\r\n        setSearchLoading(false);\r\n      };\r\n      fetchSearchedGame();\r\n    }, 500);\r\n\r\n    return () => clearTimeout(delaySearch);\r\n  }, [titleValue]);\r\n\r\n  // Listen for escape key press to close out color palette\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        setChangingColor(false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  // Listen for clicks outside of genre dropdown box\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (genreRef.current && !genreRef.current.contains(event.target)) {\r\n        setChangingGenre(false);\r\n      }\r\n    }\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [genreRef]);\r\n\r\n  const selectGameHandler = (game) => {\r\n    setTitleValue(game.name);\r\n    setTitleId(game.id);\r\n    setTitleImage(\r\n      `//images.igdb.com/igdb/image/upload/t_cover_big/${game.cover?.image_id}.jpg`\r\n    );\r\n    setTitleList([]);\r\n  };\r\n\r\n  const titleBlurHandler = () => {\r\n    if (titleList.length > 0) {\r\n    }\r\n  };\r\n\r\n  const colorChangeHandler = (color) => setColor(color.hex);\r\n  const genreChangeHandler = (genre) => {\r\n    setCurrentGenre(genre);\r\n    setChangingGenre(false);\r\n  };\r\n\r\n  // Determine cancel button functionality\r\n  const cancelButtonHandler = () => {\r\n    // If user is changing avatars, return to editing profile\r\n    if (changingAvatar) {\r\n      setChangingAvatar(false);\r\n      setUsingImgLink(false);\r\n    }\r\n    // If the user is editing profile, return to all profiles\r\n    else {\r\n      props.viewAllProfiles();\r\n    }\r\n  };\r\n\r\n  // Delete single profile\r\n  const deleteProfileHandler = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const request = await axios.delete(`${baseURL}/app/delete_profile`, {\r\n        data: { email: props.userEmail, name: currentProfile.name },\r\n      });\r\n      console.log(request);\r\n      props.saveEdit();\r\n      props.viewAllProfiles();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Avatar profile image handling\r\n  const updateAvatar = async (e, method) => {\r\n    setLoading(true);\r\n    // Append email and profile name to find correct profile to update\r\n    const data = new FormData();\r\n    data.append('email', props.userEmail);\r\n    data.append('name', currentProfile.name);\r\n    // User uploads image\r\n    if (method == 'file') {\r\n      data.append('avatar', e.target.files[0]);\r\n      try {\r\n        const request = await axios.post(\r\n          `${baseURL}/app/update_avatar_file`,\r\n          data\r\n        );\r\n        setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      setLoading(false);\r\n    }\r\n\r\n    // If user uses a link to an image\r\n    else {\r\n      const data = {\r\n        email: props.userEmail,\r\n        name: currentProfile.name,\r\n        avatar: imgLink,\r\n      };\r\n      try {\r\n        const request = await axios.post(\r\n          `${baseURL}/app/update_avatar_link`,\r\n          data\r\n        );\r\n        console.log(request.data);\r\n        setCurrentAvatar(imgLink);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // If user isn't using the link, display the link modal\r\n  // Or else submit the link url and close the modal\r\n  const determineLinkAction = (e) => {\r\n    if (!usingImgLink) {\r\n      setUsingImgLink(true);\r\n    } else {\r\n      updateAvatar(e, 'link');\r\n    }\r\n  };\r\n\r\n  // Update Profile in Mongo Database\r\n  const saveUserData = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    // Make inputs OPTIONAL\r\n    const userData = {\r\n      email: props.userEmail,\r\n      originalName: currentProfile.name,\r\n      newName: nameValue.trim(),\r\n      newColor: color,\r\n      favoriteGenre: currentGenre.trim(),\r\n      favoriteGame: titleValue.trim(),\r\n      gameId: titleId,\r\n      imageURL: titleImage,\r\n      favoriteConsole: consoleValue.trim(),\r\n      twitchToken: props.twitchToken,\r\n    };\r\n\r\n    try {\r\n      const request = await axios.post(\r\n        `${baseURL}/app/update_user_profile`,\r\n        userData\r\n      );\r\n\r\n      localStorage.setItem('user', JSON.stringify(request.data.response.user));\r\n      setStatusMessage(request.data.message);\r\n      // props.getProfile(request.data.response.profile);\r\n      props.saveEdit();\r\n      props.viewAllProfiles();\r\n    } catch (error) {\r\n      setStatusMessage(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Loading spinner\r\n  if (loading) {\r\n    return (\r\n      <div className='profile_edit__container'>\r\n        <div className='profile_edit__header'>\r\n          <h3>GAMEFLIX</h3>\r\n        </div>\r\n        <div className='profile_edit__form_wrapper'>\r\n          <div className='profile__loading'>\r\n            <div className='profile__loading_spinner' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='profile_edit__container'>\r\n      <div className='profile_edit__header'>\r\n        <h3>GAMEFLIX</h3>\r\n      </div>\r\n      <div className='profile_edit__form_wrapper'>\r\n        <h3>{currentProfile !== true ? 'Edit Profile' : 'Create Profile'}</h3>\r\n        <div\r\n          className={`form_container ${\r\n            changingAvatar && 'avatar_select_container'\r\n          }`}\r\n        >\r\n          {/* USER AVATAR CONTAINER */}\r\n          <div\r\n            style={{ paddingTop: changingAvatar && '10px' }}\r\n            className='form_avatar_container'\r\n          >\r\n            <img\r\n              className={`current_avatar ${changingAvatar && 'avatar_select'}`}\r\n              style={{\r\n                backgroundColor: color ? color : currentProfile.color,\r\n              }}\r\n              src={currentAvatar}\r\n            />\r\n            {!changingAvatar && (\r\n              <span\r\n                className='current_avatar_edit'\r\n                onClick={() => setChangingAvatar(true)}\r\n              >\r\n                <MdEdit style={{ height: '100%' }} />\r\n              </span>\r\n            )}\r\n          </div>\r\n          {/* USER FORM */}\r\n          <div className='form_right'>\r\n            {!changingAvatar && (\r\n              <form className='profile_edit__form'>\r\n                {/* NAME */}\r\n                <input\r\n                  className='name_input'\r\n                  onChange={(e) => setNameValue(e.target.value)}\r\n                  value={nameValue}\r\n                  autoFocus\r\n                />\r\n                {/* COLOR */}\r\n                <p>Color</p>\r\n                <input\r\n                  className='color_input'\r\n                  style={{\r\n                    color: color,\r\n                  }}\r\n                  onChange={(e) => setColor(e.target.value)}\r\n                  value={color}\r\n                />\r\n                <button\r\n                  type='button'\r\n                  onClick={() => setChangingColor(!changingColor)}\r\n                  style={{\r\n                    backgroundColor: color,\r\n                  }}\r\n                />\r\n                {changingColor && (\r\n                  <SketchPicker\r\n                    color={color}\r\n                    onChangeComplete={colorChangeHandler}\r\n                    className='profile_color_palette'\r\n                  />\r\n                )}\r\n              </form>\r\n            )}\r\n            {/* USER PERSONAL */}\r\n            <div\r\n              className={`form_personal ${changingAvatar && 'personal_avatar'}`}\r\n            >\r\n              <h4\r\n                style={{\r\n                  textAlign: changingAvatar ? 'center' : 'left',\r\n                }}\r\n              >\r\n                {!changingAvatar ? 'Your Playstyle' : 'Current'}\r\n              </h4>\r\n              {/* AVATAR FILE */}\r\n              {changingAvatar && (\r\n                <>\r\n                  <div\r\n                    className={`upload_avatar_actions ${\r\n                      usingImgLink && 'img_link_actions'\r\n                    }`}\r\n                  >\r\n                    <input\r\n                      className='upload_file_input'\r\n                      type='file'\r\n                      accept='image/*'\r\n                      style={{ display: 'none' }}\r\n                      multiple={false}\r\n                      ref={fileInputRef}\r\n                      onChange={(e) => updateAvatar(e, 'file')}\r\n                    />\r\n\r\n                    {!usingImgLink && (\r\n                      <>\r\n                        <button onClick={() => fileInputRef.current.click()}>\r\n                          Upload\r\n                        </button>\r\n                        <p>OR</p>\r\n                      </>\r\n                    )}\r\n                    {/* AVATAR URL */}\r\n                    <button onClick={determineLinkAction}>\r\n                      {!usingImgLink ? 'Enter link' : 'Submit'}\r\n                    </button>\r\n                    {usingImgLink && (\r\n                      <input\r\n                        className={`console_input ${\r\n                          changingAvatar && 'img_input'\r\n                        }`}\r\n                        placeholder={'Enter link to image or gif'}\r\n                        value={imgLink}\r\n                        onChange={(e) => setImgLink(e.target.value)}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n              {/* TITLE */}\r\n              {!changingAvatar && (\r\n                <>\r\n                  <p className='form_personal_title'>Favorite Title</p>\r\n                  <input\r\n                    ref={titleRef}\r\n                    value={titleValue}\r\n                    className='title_input'\r\n                    onBlur={titleBlurHandler}\r\n                    onChange={(e) => {\r\n                      titleRef.current = titleValue;\r\n                      setTitleValue(e.target.value);\r\n                    }}\r\n                  />\r\n                  {searchLoading && (\r\n                    <div className='profile__search_loading'>\r\n                      <div className='profile__search_loading_spinner' />\r\n                    </div>\r\n                  )}\r\n                  {titleList.length > 0 && titleValue !== '' && (\r\n                    <SearchList\r\n                      list={titleList}\r\n                      selectGame={selectGameHandler}\r\n                    />\r\n                  )}\r\n                </>\r\n              )}\r\n              {/* CONSOLE */}\r\n              {!changingAvatar && (\r\n                <>\r\n                  <p className='form_personal_console'>Favorite Console</p>\r\n                  <input\r\n                    ref={titleRef}\r\n                    value={consoleValue}\r\n                    onChange={(e) => {\r\n                      consoleRef.current = consoleValue;\r\n                      setConsoleValue(e.target.value);\r\n                    }}\r\n                    className={`console_input ${changingAvatar && 'img_input'}`}\r\n                    placeholder={\r\n                      changingAvatar ? 'https://www.example.com' : ''\r\n                    }\r\n                  />\r\n                </>\r\n              )}\r\n              {/* GENRE */}\r\n              <div className='genre_dropdown'>\r\n                {!changingAvatar && (\r\n                  <>\r\n                    <p className='form_personal_genre'>Favorite Genre</p>\r\n                    <button onClick={() => setChangingGenre(!changingGenre)}>\r\n                      {currentGenre !== undefined\r\n                        ? `${currentGenre}`\r\n                        : 'Action'}{' '}\r\n                      <FaAngleDown className='genre_arrow' />\r\n                    </button>\r\n                  </>\r\n                )}\r\n                {/* <FaAngleDown className='genre_arrow' /> */}\r\n                {changingGenre && (\r\n                  <div ref={genreRef} className='genre_dropdown_content'>\r\n                    {genreList.map((genre) => (\r\n                      <span\r\n                        onClick={() => genreChangeHandler(genre)}\r\n                        key={genre}\r\n                      >\r\n                        {genre}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* FORM ACTIONS */}\r\n        <div className='form_actions'>\r\n          {!changingAvatar && (\r\n            <button className='save_btn' onClick={saveUserData}>\r\n              Save\r\n            </button>\r\n          )}\r\n          <button className='cancel_btn' onClick={cancelButtonHandler}>\r\n            {!changingAvatar ? 'Cancel' : 'Back'}\r\n          </button>\r\n          {!isAdmin && (\r\n            <button\r\n              className='delete_profile_btn justify-start'\r\n              onClick={deleteProfileHandler}\r\n            >\r\n              Delete Profile\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileEditor;\r\n"],"names":["delay","className","style","animationDelay","onClick","e","stopPropagation","GamePreview","lazy","activeProfile","spotifyToken","genreDetails","playTrack","currentTrack","setGameDetails","resumePlayback","pausePlayback","isPlaying","currentGameOpen","closeGameWindow","openGame","updateGameStatus","setNotification","loading","hoverGame","hoverAway","currentHover","currentCollection","gameStatus","useState","currentGame","setCurrentGame","baseURL","process","currentPlaylist","setCurrentPlaylist","viewingSoundtrack","setViewingSoundtrack","viewingPreview","setViewingPreview","playlistLoading","setPlaylistLoading","genreTitle","genreList","fetchGameOST","game","axios","params","name","token","request","data","status","console","log","id","tracks","checkGameOwned","some","item","determineESRB","age_ratings","src","rpRating","hasRating","filter","rating","category","length","alt","eRating","tRating","mRating","map","undefined","cover","zIndex","onMouseOver","onMouseLeave","display","fetchGameDetails","viewGameSoundtrack","closeGameSoundtrack","track","color","fontWeight","title","split","selectTrackHandler","transformStyle","image_id","Suspense","fallback","gameCover","ratingImage","closeGame","Array","i","isLoading","setIsLoading","bannerGamesList","setBannerGamesList","currentGameTrailer","setCurrentGameTrailer","serverError","setServerError","twitchToken","localStorage","getItem","fetchData","gameName","sort","a","b","filteredList","selectedGame","Math","floor","random","trailer","videos","find","video","includes","video_id","useEffect","displayNewBanner","newGame","newGameTrailer","str","n","addGame","bannerGame","useFetchBanner","bannerRef","useRef","exists","collection","mutedVideo","setMutedVideo","playingVideo","setPlayingVideo","trailerEnded","setTrailerEnded","observer","IntersectionObserver","isIntersecting","root","rootMargin","threshold","current","observe","ref","width","height","url","playing","muted","onEnded","light","summary","substr","size","SPOTIFY_AUTH_URL","props","allProfiles","handleEsc","event","keyCode","closeNavDropdown","window","addEventListener","removeEventListener","generatePlaystationTitles","earnedTrophies","earned","allTrophies","ownedGame","inCollection","toLowerCase","trophies","email","gameId","currentProfile","imageURL","playtime","origin","user","changeProfile","changeUserHandler","avatar","backgroundColor","toProfilePage","editProfile","viewCollection","editAccount","href","alignItems","justifyContent","paddingBottom","paddingLeft","to","logoutHandler","closeAccountSettings","setLoggedUser","currentUser","deletingAccount","setDeletingAccount","updateStatus","setUpdateStatus","emailValue","setEmailValue","newEmailValue","setNewEmailValue","changingEmail","setChangingEmail","password","passwordValue","setPasswordValue","hidePassword","setHidePassword","newPasswordValue","setNewPasswordValue","changingPassword","setChangingPassword","hiddenPassword","replace","updateEmail","originalEmail","newEmail","type","message","deleteAccountHandler","_id","location","removeItem","fontSize","marginLeft","onChange","target","value","placeholder","autoFocus","displayNav","setDisplayNav","displayDropdown","setDisplayDropdown","displaySearch","setDisplaySearch","searchRef","editingProfile","setEditingProfile","editingAccount","setEditingAccount","profile","scrollNavListener","scrollY","cancelEdit","document","body","overflowY","ProfileEditor","userEmail","viewAllProfiles","saveEdit","getProfile","test","selectProfile","onSubmit","preventDefault","searchValue","trim","fetchSubmittedGame","defaultValue","searchedGame","onBlur","defaultAvatar","transform","changeUser","profiles","onLogout","updateCollection","games","setGames","currentFilter","setCurrentFilter","changingFilter","setChangingFilter","currentlyViewing","setCurrentlyViewing","setLoading","todaysDate","Date","weekDateFormat","getTime","monthDateFormat","setMonth","getMonth","yearDateFormat","filterUniques","list","uniques","indexOf","push","startDate","targetDate","retries","currentDate","changeFilterDate","innerText","convertDate","date","formattedDay","now","currentDay","getDate","getFullYear","onMouseOut","human","trendingTitlesFetched","JSON","parse","sessionStorage","trendingTitles","uniqueTitles","Set","has","add","forEach","release_dates","findLast","dates","hypes","slice","setItem","stringify","fetchNewReleases","rating_count","spotifyApi","SpotifyWebApi","clientId","trackUri","playAudio","beginPlayback","setAccessToken","callback","state","uris","play","styles","bgColor","sliderColor","trackArtistColor","trackNameColor","requestId","genreId","GameDetails","Notification","UserCollection","code","URLSearchParams","search","get","Dashboard","userNotes","manageProfiles","fetchGame","removeGame","logoutUser","resetGameStatus","allGenres","existingToken","genreGamesList","setGenreGamesList","fetchGenres","last_updated","setDate","updateGenresAPI","genres_list","Promise","all","requestsIGDB","genre","genreTitles","completeGenreList","updateGenresCollection","useFetchGenres","displayNotification","notification","setCurrentTrack","setPlayAudio","rowsLoading","changingUser","setChangingUser","setEditingUser","setSelectedProfile","viewingCollection","setViewingCollection","setCurrentGameOpen","setViewingGameOptions","hoveringGame","setHoveringGame","gameDetails","spotifyAccessToken","accessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","prevToken","spotifyAuthentication","tokenRequest","access_token","refresh_token","expires_in","history","pushState","refreshSpotifyToken","interval","setInterval","clearTimeout","useSpotifyAuth","steamCollection","setSteamCollection","fetchUserLibrary","config","useSteamAuth","overflow","closeDetails","hideNotification","backToHome","setTimeout","Object","entries","openGameWindow","G","action","keys","uri","memo","selectGame","isAdmin","searchLoading","setSearchLoading","nameValue","setNameValue","titleRef","favorite_game","titleValue","setTitleValue","titleId","setTitleId","titleImage","setTitleImage","titleList","setTitleList","consoleRef","favorite_console","consoleValue","setConsoleValue","setStatusMessage","currentAvatar","setCurrentAvatar","fileInputRef","imgLink","setImgLink","usingImgLink","setUsingImgLink","changingAvatar","setChangingAvatar","changingColor","setChangingColor","setColor","genreRef","changingGenre","setChangingGenre","favorite_genre","currentGenre","setCurrentGenre","delaySearch","fetchSearchedGame","handleClickOutside","contains","deleteProfileHandler","updateAvatar","method","FormData","append","files","URL","createObjectURL","saveUserData","userData","originalName","newName","newColor","favoriteGenre","favoriteGame","favoriteConsole","response","paddingTop","onChangeComplete","hex","textAlign","accept","multiple","click","genreChangeHandler"],"sourceRoot":""}