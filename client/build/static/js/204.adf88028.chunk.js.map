{"version":3,"file":"static/js/204.adf88028.chunk.js","mappings":"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","sources":["components/Placeholder/Placeholder.js","components/Row/Row.js","hooks/useFetchBanner.js","components/Banner/Banner.js","components/Nav/NavDropdown.js","components/Login/Profiles/ProfileEditor/AccountEditor.js","components/Nav/Nav.js","components/MainRow/MainRow.js","components/TrendingRow/TrendingRow.js","components/NewReleases/NewReleases.js","requestsIGDB.js","components/Dashboard/Dashboard.js","hooks/useFetchGenres.js","components/Login/Profiles/ProfileEditor/SearchList.js","components/Login/Profiles/ProfileEditor/ProfileEditor.js","components/SpotifyPlayback/SpotifyPlayback.js"],"sourcesContent":["import React from 'react';\nimport './Placeholder.css';\n\nconst Placeholder = ({ delay }) => {\n  return (\n    <div\n      className='placeholder'\n      style={{ animationDelay: `${delay}ms` }}\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nexport default Placeholder;\n","import React, { useState, lazy, Suspense } from 'react';\nimport './Row.css';\nimport axios from 'axios';\nimport Placeholder from '../Placeholder/Placeholder';\nimport {\n  FaPlay,\n  FaPause,\n  FaPlusSquare,\n  FaMinusSquare,\n  FaGamepad,\n  FaMusic,\n} from 'react-icons/fa';\nimport { CiSquareMore } from 'react-icons/ci';\n// ESRB Logos\nimport eRating from '../../assets/images/ESRB_E.png';\nimport tRating from '../../assets/images/ESRB_T.png';\nimport mRating from '../../assets/images/ESRB_M.png';\nimport rpRating from '../../assets/images/ESRB_RP.png';\n\nconst GamePreview = lazy(() => import('./GamePreview/GamePreview'));\n\nfunction Row({\n  activeProfile,\n  spotifyToken,\n  genreDetails,\n  playTrack,\n  currentTrack,\n  setGameDetails,\n  resumePlayback,\n  pausePlayback,\n  isPlaying,\n  currentGameOpen,\n  closeGameWindow,\n  openGame,\n  updateGameStatus,\n  setNotification,\n  loading,\n  hoverGame,\n  hoverAway,\n  currentHover,\n  currentCollection,\n  gameStatus,\n}) {\n  const [currentGame, setCurrentGame] = useState(null);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const [currentPlaylist, setCurrentPlaylist] = useState([]);\n  const [viewingSoundtrack, setViewingSoundtrack] = useState(false);\n  const [viewingPreview, setViewingPreview] = useState(false);\n  const [playlistLoading, setPlaylistLoading] = useState(false);\n\n  const genreTitle = genreDetails[0][0];\n  const genreList = genreDetails[0][1].slice(0, 30);\n\n  const fetchGameOST = async (game) => {\n    if (!spotifyToken) {\n      setCurrentGame(null);\n      setNotification(\n        'ERROR',\n        'Please connect to Spotify through the nav dropdown!'\n      );\n      return;\n    }\n    try {\n      setPlaylistLoading(true);\n      const request = await axios.get(`${baseURL}/spotify/spotify_album`, {\n        params: {\n          game: game.name,\n          token: spotifyToken,\n          baseURL,\n        },\n      });\n      if (request.data.status !== 'OK') {\n        console.log(request.data);\n        setPlaylistLoading(false);\n      } else {\n        console.log(request);\n        setCurrentGame(game.id);\n        setCurrentPlaylist(request.data.tracks);\n        setViewingSoundtrack(true);\n        setPlaylistLoading(false);\n\n        return request.data.tracks;\n      }\n    } catch (error) {\n      console.log(error);\n      setPlaylistLoading(false);\n      return error;\n    }\n  };\n\n  // Grab trailer video from selected game\n  const fetchGameDetails = (game) => {\n    closeGameWindow();\n    setGameDetails(game);\n  };\n\n  const checkGameOwned = (game) => {\n    const exists = currentCollection.some((item) => item.id === game.id);\n    if (exists) {\n      return (\n        <div\n          className='row__blur_item'\n          onClick={() => updateGameStatus('REMOVE', game)}\n        >\n          <FaMinusSquare className='blur_item_icon' />\n          <p>Remove</p>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className='row__blur_item'\n          onClick={() => updateGameStatus('ADD', game)}\n        >\n          <FaPlusSquare className='blur_item_icon' />\n          <p>Add</p>\n        </div>\n      );\n    }\n  };\n\n  const viewGameSoundtrack = (e, game) => {\n    e.stopPropagation();\n    closeGameWindow();\n    setCurrentGame(game.id);\n    fetchGameOST(game);\n  };\n\n  const closeGameSoundtrack = (e) => {\n    e.stopPropagation();\n    setCurrentGame(null);\n    setViewingSoundtrack(false);\n  };\n\n  const selectTrackHandler = (e, track) => {\n    e.stopPropagation();\n    if (currentTrack !== null && track.name == currentTrack.name) {\n      resumePlayback();\n    }\n    playTrack(track);\n  };\n\n  const formatTrackTitle = (title) => {\n    return title.split('-')[0].split('(')[0];\n  };\n\n  // Return a ESRB rating picture according to fetched game\n  const determineESRB = (game) => {\n    if (!game || !game.age_ratings)\n      return <img className='row__poster__esrb_img' src={rpRating} />;\n    const hasRating = game?.age_ratings.filter(\n      (rating) => rating.category == 1 || rating.category == 2\n    );\n\n    if (hasRating.length == 0 || !game.age_ratings)\n      return <img className='row__poster__esrb_img' src={rpRating} />;\n    const esrb = hasRating[0].rating;\n\n    switch (esrb) {\n      case 1:\n      case 2:\n      case 8:\n      case 9:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb E rating'\n            src={eRating}\n          />\n        );\n      case 3:\n      case 4:\n      case 10:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb T rating'\n            src={tRating}\n          />\n        );\n      case 5:\n      case 11:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb M rating'\n            src={mRating}\n          />\n        );\n      default:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb RP rating'\n            src={rpRating}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className='row'>\n      <h2 className='row__title'>{genreTitle}</h2>\n      <div className='row__posters'>\n        {genreList.map(\n          (game) =>\n            game.cover !== undefined && (\n              <React.Fragment key={game.id}>\n                {!loading && (\n                  <div\n                    className={`row__poster_wrapper ${\n                      currentGameOpen == game.id && 'viewing_game'\n                    }`}\n                    style={{\n                      zIndex:\n                        currentGameOpen !== game.id &&\n                        currentGameOpen !== null &&\n                        '-1',\n                    }}\n                    onMouseOver={() => hoverGame(game.id)}\n                    onMouseLeave={() =>\n                      viewingSoundtrack ? hoverGame(game.id) : hoverAway()\n                    }\n                  >\n                    {currentHover == game.id && !currentGameOpen && (\n                      <div\n                        className={`row__blur_wrapper ${\n                          gameStatus == 'error'\n                            ? 'blur_error'\n                            : gameStatus == 'success'\n                            ? 'blur_success'\n                            : ''\n                        }`}\n                      >\n                        {!playlistLoading ? (\n                          <div\n                            className='row__blur_details'\n                            style={{\n                              display: currentGame == game.id && 'none',\n                            }}\n                          >\n                            {/* ADD GAME */}\n                            {checkGameOwned(game)}\n\n                            {/* GET DETAILS */}\n                            <div\n                              className='row__blur_item'\n                              onClick={() => {\n                                fetchGameDetails(game);\n                              }}\n                            >\n                              <CiSquareMore className='blur_item_icon more' />\n                              <p>Details</p>\n                            </div>\n                            {/* GET SOUNDTRACK */}\n                            <div\n                              onClick={(e) => viewGameSoundtrack(e, game)}\n                              className='row__blur_item'\n                            >\n                              <FaMusic className='blur_item_icon music' />\n                              <p>Soundtrack</p>\n                            </div>\n                            {/* VIEW 3D CASE */}\n                            <div\n                              className='row__blur_item'\n                              onClick={() => openGame(game)}\n                            >\n                              <FaGamepad className='blur_item_icon' />\n                              <p>View Case</p>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className='playlist_loading'>\n                            <div className='playlist_loading_dot' />\n                            <div className='playlist_loading_dot' />\n                            <div className='playlist_loading_dot' />\n                          </div>\n                        )}\n                        {viewingSoundtrack && currentGame == game.id && (\n                          <div className='soundtrack_container'>\n                            <span onClick={(e) => closeGameSoundtrack(e)}>\n                              ←\n                            </span>\n                            <h3>Spotify OST</h3>\n                            <ul className='soundtracks'>\n                              {currentPlaylist?.map((track) => (\n                                <li\n                                  key={track.id}\n                                  onClick={(e) => e.stopPropagation()}\n                                  className='soundtrack'\n                                >\n                                  <p\n                                    style={{\n                                      color:\n                                        currentTrack !== null &&\n                                        currentTrack.name == track.name\n                                          ? 'green'\n                                          : 'white',\n                                      fontWeight:\n                                        currentTrack !== null &&\n                                        currentTrack.name == track.name\n                                          ? '600'\n                                          : '400',\n                                    }}\n                                  >\n                                    {formatTrackTitle(track.name)}\n                                  </p>\n                                  {(currentTrack !== null &&\n                                    currentTrack.name !== track.name) ||\n                                  !isPlaying ? (\n                                    <FaPlay\n                                      onClick={(e) =>\n                                        selectTrackHandler(e, track)\n                                      }\n                                    />\n                                  ) : (\n                                    <FaPause onClick={(e) => pausePlayback()} />\n                                  )}\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                    <div className='row__poster_container'>\n                      <>\n                        {/* FRONT OF POSTER */}\n                        <div\n                          className='row__poster_front'\n                          style={{\n                            transformStyle: currentGameOpen && 'revert',\n                          }}\n                        >\n                          <img\n                            loading='lazy'\n                            className='row__poster'\n                            src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\n                            alt={game.name + ' cover image'}\n                          />\n                        </div>\n                      </>\n                    </div>\n                    {currentGameOpen === game.id && (\n                      <Suspense fallback={<>...</>}>\n                        <GamePreview\n                          game={game}\n                          gameCover={`https://images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover?.image_id}.jpg`}\n                          ratingImage={determineESRB(game)}\n                          viewingPreview={viewingPreview}\n                          openGame={() => setViewingPreview(true)}\n                          closeGame={() => setViewingPreview(false)}\n                        />\n                      </Suspense>\n                    )}\n                  </div>\n                )}\n              </React.Fragment>\n            )\n        )}\n        {loading && (\n          <div className='row__loading_container'>\n            {[...Array(10)].map((item, i) => (\n              <div key={i} className='row__placeholder__wrapper'>\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchBanner = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [bannerGamesList, setBannerGamesList] = useState([]);\n  const [currentGame, setCurrentGame] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const twitchToken = localStorage.getItem('twitch_auth');\n  const baseURL = process.env.REACT_APP_BASE_URL;\n\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n      const request = await axios.post(`${baseURL}/app/fetch_banner_list`, {\n        token: twitchToken,\n      });\n      const selectedGame =\n        request.data[Math.floor(Math.random() * request.data.length - 1)];\n      setBannerGamesList(request.data);\n      setCurrentGame(selectedGame);\n      setIsLoading(false);\n      return currentGame;\n    } catch (error) {\n      console.log(error);\n      setServerError(error);\n      setIsLoading(false);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (!twitchToken || bannerGamesList.length > 0) return;\n    console.log('hELLO');\n    fetchData();\n  }, [twitchToken, bannerGamesList, bannerGamesList.length]);\n\n  const displayNewBanner = () => {\n    const newGame =\n      bannerGamesList[Math.floor(Math.random() * bannerGamesList.length - 1)];\n    if (!newGame) {\n      setCurrentGame(\n        bannerGamesList[Math.floor(Math.random() * bannerGamesList.length - 1)]\n      );\n      bannerGamesList.splice(bannerGamesList.indexOf(newGame), 1);\n      return;\n    } else {\n      setCurrentGame(newGame);\n      bannerGamesList.splice(bannerGamesList.indexOf(newGame), 1);\n      return;\n    }\n  };\n\n  return {\n    isLoading,\n    serverError,\n    currentGame,\n    displayNewBanner,\n  };\n};\n\nexport default useFetchBanner;\n","import './Banner.css';\nimport { BiRefresh } from 'react-icons/bi';\nimport useFetchBanner from '../../hooks/useFetchBanner';\n\nfunction Banner({ setGameDetails, addGame, activeProfile }) {\n  const bannerGame = useFetchBanner();\n\n  // Wait for game deatils to finish loading or the game name shows up undefined\n  // Undefined is a game name apart of the dataset and will display jibberish\n  if (bannerGame.isLoading || !bannerGame.currentGame) {\n    return (\n      <div className='banner__loading'>\n        <div className='banner__spinner' />\n      </div>\n    );\n  }\n  const hasArt = bannerGame.currentGame?.artworks !== undefined;\n\n  // Don't allow user to add game if already in collection\n  const exists =\n    activeProfile.collection &&\n    activeProfile.collection.some(\n      (title) => title?.id === bannerGame.currentGame?.id\n    );\n\n  // If the game description is longer that 150 characters, replace the reaminder with the ellipsis '...'\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str;\n  };\n\n  return (\n    <header className='banner' key={bannerGame.currentGame.id}>\n      <div\n        className='banner__img'\n        style={{\n          backgroundSize: 'cover',\n          backgroundImage: `url(//images.igdb.com/igdb/image/upload/t_1080p_2x/${\n            hasArt\n              ? bannerGame.currentGame.artworks[0]?.image_id\n              : bannerGame.currentGame.cover?.image_id\n          }.jpg)`,\n          backgroundPosition: 'center center',\n        }}\n      />\n      <div className='banner__contents'>\n        <h1 className='banner__title'>{bannerGame.currentGame?.name}</h1>\n\n        <div className='banner__buttons'>\n          <button\n            className='banner__button'\n            onClick={() => setGameDetails(bannerGame.currentGame)}\n          >\n            See Details\n          </button>\n          {!exists && (\n            <button\n              className='banner__button'\n              onClick={() => addGame(bannerGame.currentGame)}\n            >\n              Add to Collection\n            </button>\n          )}\n        </div>\n\n        <h1 className='banner__description'>\n          {truncate(bannerGame.currentGame?.summary, 150)}\n        </h1>\n      </div>\n      <div className='banner--fadeBottom' />\n\n      <BiRefresh\n        size={35}\n        className='banner__refresh_icon'\n        onClick={bannerGame.displayNewBanner}\n      />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport './NavDropdown.css';\nimport { Link } from 'react-router-dom';\n// React Icons\nimport {\n  FaSortUp,\n  FaSpotify,\n  FaUserEdit,\n  FaPlaystation,\n  FaGamepad,\n} from 'react-icons/fa';\nimport { IoSettingsOutline } from 'react-icons/io5';\nimport { MdEdit } from 'react-icons/md';\n\nimport steamAuthBtn from '../../assets/images/steam-auth-btn.png';\n\n// const SPOTIFY_AUTH_URL = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_SPOTIFY_CLIENT_ID}&response_type=code&redirect_uri=${process.env.REACT_APP_SPOTIFY_REDIRECT}&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state`;\n\nconst NavDropdown = (props) => {\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const spotifyRedirect = process.env.REACT_APP_SPOTIFY_REDIRECT;\n  const allProfiles = props.allProfiles;\n  const existingToken = sessionStorage.getItem('spotify_token');\n\n  // Listens for escape key press to close nav dropdown\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        props.closeNavDropdown();\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n\n  // Change current user\n  const changeUserHandler = (user) => {\n    props.changeProfile(user);\n  };\n\n  const generatePlaystationTitles = async () => {\n    try {\n      const request = await axios.get(`${baseURL}/playstation/user_titles`);\n      console.log(request.data);\n      for (let game of request.data) {\n        for (let i = 0; i < game.earnedTrophies.length; i++) {\n          if (game.earnedTrophies[i].earned) {\n            game.allTrophies[i].earned = true;\n          } else game.allTrophies[i].earned = false;\n        }\n      }\n\n      props.currentCollection.filter((ownedGame) => {\n        const inCollection = request.data.some((game) => {\n          if (ownedGame.name.toLowerCase() === game.name.toLowerCase()) {\n            ownedGame.trophies = game.allTrophies;\n            axios.put(`${baseURL}/app/update_game_trophies`, {\n              email: localStorage.getItem('user'),\n              name: props.activeProfile.name,\n              gameId: ownedGame.id,\n              trophies: game.allTrophies,\n            });\n          } else {\n            console.log('New game bruh');\n            axios.post(`${baseURL}/app/update_collection`, {\n              email: localStorage.getItem('user'),\n              currentProfile: localStorage.getItem('profile'),\n              name: game.name,\n              id: game.id,\n              imageURL: `//images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover.image_id}.jpg`,\n              playtime: 0,\n              origin: 'gameflix',\n            });\n          }\n        });\n        return inCollection;\n      });\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  };\n\n  allProfiles.sort((a, b) => (a.name - b.name ? 1 : -1));\n\n  return (\n    <div className='dropdown'>\n      <FaSortUp className='dropdown__arrow' />\n      <div className='dropdown__profiles'>\n        <ul className='dropdown__profiles_list'>\n          {allProfiles.map((user) => {\n            if (user.name !== props.activeProfile.name) {\n              return (\n                <li\n                  className='dropdown__profiles_item'\n                  key={user.name}\n                  onClick={() => changeUserHandler(user)}\n                >\n                  <img\n                    src={user.avatar}\n                    className='dropdown__profile_icon'\n                    alt={`${user.name} avatar icon`}\n                  />\n                  <p className='dropdown__profile_name'>{user.name}</p>\n                </li>\n              );\n            }\n          })}\n          <li className='dropdown__profiles_item' onClick={props.toProfilePage}>\n            <span className='dropdown__profiles_manage'>\n              <MdEdit size={22} />\n            </span>\n            <p className='dropdown__profile_name'>Manage Profiles</p>\n          </li>\n        </ul>\n      </div>\n      <div className='dropdown__settings'>\n        <div\n          className='dropdown__settings_item'\n          onClick={() => props.editProfile()}\n        >\n          <span className='dropdown__settings_item_icon'>\n            <FaUserEdit size={18} />\n          </span>\n          <p>My Profile</p>\n        </div>\n        <div\n          className='dropdown__settings_item'\n          onClick={() => props.viewCollection()}\n        >\n          <span className='dropdown__settings_item_icon'>\n            <FaGamepad size={18} />\n          </span>\n          <p>My Collection</p>\n        </div>\n        <div className='dropdown__settings_item' onClick={props.editAccount}>\n          <span className='dropdown__settings_item_icon'>\n            <IoSettingsOutline size={18} />\n          </span>\n          <p>Account Settings</p>\n        </div>\n      </div>\n      <div className='dropdown__settings'>\n        {/* <div\n          className='dropdown__settings_item'\n          onClick={generatePlaystationTitles}\n        >\n          <span className='dropdown__settings_item_icon'>\n            <FaPlaystation size={18} />\n          </span>\n          <p>Link Playstation</p>\n        </div> */}\n        <Link\n          to={`${baseURL}/spotify/test_spotify`}\n          className='dropdown__settings_item'\n          onClick={(e) => existingToken && e.preventDefault()}\n        >\n          {/* <div className='dropdown__settings_item' onClick={() => getSpotify()}> */}\n          <span className='dropdown__settings_item_icon'>\n            <FaSpotify\n              size={18}\n              style={{ color: props.spotifyToken ? '#1DB954' : '#FFF' }}\n            />\n          </span>\n          <p>Connect to Spotify</p>\n          {/* </div> */}\n        </Link>\n        {/* <div\n          className='dropdown__settings_item'\n          style={{\n            alignItems: 'center',\n            justifyContent: 'center',\n            paddingBottom: '0',\n            paddingLeft: '0',\n          }}\n        >\n          <Link to={`baseURL/api/auth/steam`}>\n            <img className='steam_btn' src={steamAuthBtn} />\n          </Link>\n        </div> */}\n      </div>\n      <div className='dropdown__settings_links'>\n        <Link\n          to='/login'\n          className='dropdown__settings_link'\n          onClick={props.logoutHandler}\n        >\n          Sign out of GameFlix\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default NavDropdown;\n","import React, { useEffect, useState } from \"react\";\nimport { AiFillEyeInvisible, AiFillEye } from \"react-icons/ai\";\nimport axios from \"axios\";\n\nconst AccountEditor = ({\n  closeAccountSettings,\n  setLoggedUser,\n  currentUser,\n}) => {\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const [deletingAccount, setDeletingAccount] = useState(false);\n  const [updateStatus, setUpdateStatus] = useState(\"\");\n  // EMAIL STATES\n  const [emailValue, setEmailValue] = useState(currentUser.email);\n  const [newEmailValue, setNewEmailValue] = useState(\"\");\n  let repeatValue = \"\";\n  const [changingEmail, setChangingEmail] = useState(false);\n  // PASSWORD STATES\n  const [passwordValue, setPasswordValue] = useState(currentUser.password);\n  const [hidePassword, setHidePassword] = useState(true);\n  const [newPasswordValue, setNewPasswordValue] = useState(\"\");\n  const [changingPassword, setChangingPassword] = useState(false);\n\n  useEffect(() => {\n    if (hidePassword) {\n      const hiddenPassword = currentUser.password.replace(/./gi, \"*\");\n      setPasswordValue(hiddenPassword);\n    } else {\n      setPasswordValue(currentUser.password);\n    }\n  }, [hidePassword]);\n\n  const updateEmail = async (email) => {\n    setUpdateStatus(\"\");\n    try {\n      const request = await axios.post(`${baseURL}/app/update_user_email`, {\n        originalEmail: currentUser.email,\n        newEmail: email,\n      });\n\n      if (request.data.status < 400) {\n        setLoggedUser(request.data.user);\n        setUpdateStatus({ type: \"success\", message: request.data.message });\n        setEmailValue(request.data.user.email);\n        setNewEmailValue(\"\");\n        setChangingEmail(false);\n      } else {\n        setUpdateStatus({ type: \"error\", message: request.data.message });\n        setNewEmailValue(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const emailChangeHandler = () => {\n    if (!changingEmail) {\n      setChangingEmail(true);\n      setChangingPassword(false);\n    } else {\n      if (newEmailValue !== \"\") {\n        updateEmail(newEmailValue);\n      } else {\n        setChangingEmail(false);\n        setNewEmailValue(\"\");\n      }\n    }\n  };\n\n  const deleteAccountHandler = async () => {\n    try {\n      await axios.delete(`${baseURL}/app/delete_account`, {\n        data: { id: currentUser._id },\n      });\n      window.location = \"/\";\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"profile\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const passwordChangeHandler = () => {\n    if (!changingPassword) {\n      setChangingPassword(true);\n      setChangingEmail(false);\n    } else {\n      if (newPasswordValue !== \"\") {\n        repeatValue = newEmailValue;\n      } else {\n        setChangingPassword(false);\n        setNewPasswordValue(\"\");\n      }\n    }\n  };\n\n  const determineEmailValidity = async (e) => {\n    e.preventDefault();\n    try {\n      const request = await axios.post(`${baseURL}/app/update_user_profile`, {\n        originalEmail: emailValue,\n        newEmail: newEmailValue,\n      });\n      console.log(request);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"profile_edit__container\">\n      <div className=\"profile_edit__header\">\n        <h3>GAMEFLIX</h3>\n      </div>\n      <div className=\"profile_edit__form_wrapper\" style={{ height: \"350px\" }}>\n        <h3>Account Settings</h3>\n        <div className=\"form_container\">\n          <form className=\"account_edit__form\">\n            {/* EMAIL CONTAINER */}\n            <div className=\"account_email_container\">\n              {updateStatus.type == \"error\" ? (\n                <p className=\"account_email_error\">{updateStatus.message}</p>\n              ) : (\n                <p className=\"account_email_success\">{updateStatus.message}</p>\n              )}\n              <h4\n                style={{ color: \"white\", fontSize: \"2rem\", marginLeft: \"2px\" }}\n              >\n                Email\n              </h4>\n              <input\n                className=\"account_email_input\"\n                onChange={(e) => setEmailValue(e.target.value)}\n                value={emailValue}\n              />\n\n              {/* NEW EMAIL */}\n              {changingEmail && (\n                <>\n                  <input\n                    className=\"account_email_input\"\n                    onChange={(e) => setNewEmailValue(e.target.value)}\n                    value={newEmailValue}\n                    placeholder=\"Enter new email\"\n                    autoFocus\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setNewEmailValue(\"\");\n                      setChangingEmail(false);\n                    }}\n                    className=\"account_email_save_btn\"\n                  >\n                    Cancel\n                  </button>\n                </>\n              )}\n\n              <button\n                type=\"button\"\n                onClick={emailChangeHandler}\n                className=\"save_btn\"\n              >\n                {!changingEmail ? \"Change Email\" : \"Save Email\"}\n              </button>\n            </div>\n\n            {/* PASSWORD CONTAINER */}\n            <div className=\"account_password_container\">\n              <h4\n                style={{ color: \"white\", fontSize: \"2rem\", marginLeft: \"2px\" }}\n              >\n                Password\n              </h4>\n              <input\n                className=\"account_password_input\"\n                onChange={(e) => setPasswordValue(e.target.value)}\n                value={passwordValue}\n              />\n              <span\n                className=\"account_password_visible_icon\"\n                onClick={() => setHidePassword(!hidePassword)}\n              >\n                {!hidePassword ? <AiFillEye /> : <AiFillEyeInvisible />}\n              </span>\n\n              {/* NEW PASSWORD */}\n              {changingPassword && (\n                <>\n                  <input\n                    className=\"account_password_input\"\n                    onChange={(e) => setNewPasswordValue(e.target.value)}\n                    value={newPasswordValue}\n                    placeholder=\"Enter new password\"\n                    autoFocus\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setNewPasswordValue(\"\");\n                      setChangingPassword(false);\n                    }}\n                    className=\"account_password_save_btn\"\n                  >\n                    Cancel\n                  </button>\n                </>\n              )}\n              <button\n                type=\"button\"\n                onClick={passwordChangeHandler}\n                className=\"save_btn\"\n              >\n                {!changingPassword ? \"Change Password\" : \"Save Password\"}\n              </button>\n            </div>\n          </form>\n        </div>\n        {/* FORM ACTIONS */}\n        <div\n          className=\"form_actions\"\n          style={{ justifyContent: \"space-between\" }}\n        >\n          <button className=\"cancel_btn\" onClick={closeAccountSettings}>\n            Back\n          </button>\n          <button\n            className=\"delete_account_btn\"\n            onClick={() => setDeletingAccount(true)}\n          >\n            Delete Account\n          </button>\n        </div>\n      </div>\n      {deletingAccount && (\n        <div className=\"delete_account_modal\">\n          <div className=\"delete_account_modal_content\">\n            <h4>Are you sure you want to delete your account?</h4>\n            <div className=\"delete_account_modal_actions\">\n              <div className=\"modal_action_option\">\n                <p>Yes</p>\n                <span\n                  className=\"video-game-button\"\n                  onClick={deleteAccountHandler}\n                >\n                  A\n                </span>\n              </div>\n              <div className=\"modal_action_option\">\n                <p>No</p>\n                <span\n                  className=\"video-game-button\"\n                  onClick={() => setDeletingAccount(false)}\n                >\n                  B\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AccountEditor;\n","import React, { useRef } from 'react';\nimport './Nav.css';\nimport logo from '../../assets/images/gameflix-logo.png';\nimport defaultAvatar from '../../assets/images/basic_avatar.png';\nimport { useEffect, useState } from 'react';\nimport { FaSistrix, FaAngleUp } from 'react-icons/fa';\nimport NavDropdown from './NavDropdown';\nimport ProfileEditor from '../Login/Profiles/ProfileEditor/ProfileEditor';\nimport AccountEditor from '../Login/Profiles/ProfileEditor/AccountEditor';\n\nfunction Nav(props) {\n  const [displayNav, setDisplayNav] = useState(false);\n  const [displayDropdown, setDisplayDropdown] = useState(false);\n  const [displaySearch, setDisplaySearch] = useState(false);\n  const searchRef = useRef('');\n  const [editingProfile, setEditingProfile] = useState(false);\n  const [editingAccount, setEditingAccount] = useState(false);\n\n  const profile = props.activeProfile;\n\n  const closeNavDropdown = () => {\n    setDisplayDropdown(false);\n  };\n\n  const closeSearch = () => {\n    if (searchRef.current.value.length > 0) {\n      return;\n    }\n    setDisplaySearch(false);\n  };\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n    const searchValue = searchRef.current.value.trim();\n    if (searchValue.length == 0) return;\n    props.fetchSubmittedGame(searchValue);\n  };\n\n  useEffect(() => {\n    // If the user scrolls down from the top of page, add a black background to the nav\n    const scrollNavListener = () => {\n      window.addEventListener('scroll', () => {\n        if (window.scrollY > 100) {\n          setDisplayNav(true);\n        } else setDisplayNav(false);\n      });\n    };\n    scrollNavListener();\n\n    return () => {\n      window.removeEventListener('scroll', scrollNavListener);\n    };\n  }, []);\n\n  const cancelEdit = () => {\n    document.body.style.overflowY = 'scroll';\n    setEditingProfile(false);\n    setEditingAccount(false);\n  };\n\n  const editProfileHandler = () => {\n    document.body.style.overflowY = 'hidden';\n    setEditingProfile(true);\n  };\n\n  const editAccountHandler = () => {\n    document.body.style.overflowY = 'hidden';\n    setEditingAccount(true);\n  };\n\n  const saveEdit = () => {\n    props.saveEdit();\n    setEditingProfile(false);\n  };\n\n  // Handles escape key press for search input\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        // If the search input is open, close it\n        setDisplaySearch(false);\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${displayNav && 'nav__hide'}`}>\n      {editingProfile && (\n        <div className='nav_edit_profile'>\n          <ProfileEditor\n            currentProfile={profile}\n            userEmail={props.currentUser.email}\n            viewAllProfiles={cancelEdit}\n            saveEdit={saveEdit}\n            getProfile={(test) => props.selectProfile(test)}\n            twitchToken={props.twitchToken}\n          />\n        </div>\n      )}\n      {editingAccount && (\n        <div className='nav_edit_profile'>\n          {' '}\n          <AccountEditor\n            closeAccountSettings={cancelEdit}\n            setLoggedUser={(user) => props.setLoggedUser(user)}\n            currentUser={props.currentUser}\n          />{' '}\n        </div>\n      )}\n      <img\n        className='nav__logo'\n        src={logo}\n        alt='GameFlix Logo'\n        onClick={() => (window.location = '/')}\n      />\n      <div className='nav__right'>\n        <div className='nav__search'>\n          {displaySearch && (\n            <form className='nav__search_form' onSubmit={formSubmitHandler}>\n              <input\n                ref={searchRef}\n                autoFocus\n                type='text'\n                placeholder='Titles, publishers, genres'\n                defaultValue={\n                  props.searchedGame ? `${props.searchedGame.name}` : ''\n                }\n                onBlur={closeSearch}\n              />\n            </form>\n          )}\n          <FaSistrix\n            className={`nav__search_icon ${displaySearch && 'search_active'}`}\n            onClick={() => setDisplaySearch(!displaySearch)}\n          />\n        </div>\n        <div\n          className='nav__actions'\n          onMouseLeave={() => setDisplayDropdown(false)}\n        >\n          <div\n            className='nav__avatar_container'\n            onMouseOver={() => setDisplayDropdown(true)}\n          >\n            <img\n              className='nav__avatar'\n              src={profile.avatar ? profile.avatar : defaultAvatar}\n              // style={{ backgroundColor: profile.color }}\n              alt=\"User's avatar\"\n            />\n          </div>\n          <FaAngleUp\n            className='nav__avatar_arrow'\n            style={{\n              transform: `${\n                displayDropdown ? 'rotate(180deg)' : 'rotate(0deg)'\n              }`,\n            }}\n          />\n          {/* <NavDropdown /> */}\n          {displayDropdown && (\n            <NavDropdown\n              changeProfile={props.changeUser}\n              activeProfile={profile}\n              allProfiles={props.currentUser.profiles}\n              logoutHandler={props.onLogout}\n              closeNavDropdown={closeNavDropdown}\n              toProfilePage={props.toProfilePage}\n              spotifyToken={props.spotifyToken}\n              editProfile={editProfileHandler}\n              editAccount={editAccountHandler}\n              updateCollection={props.updateCollection}\n              currentCollection={props.currentCollection}\n              viewCollection={props.viewCollection}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from 'react';\nimport './MainRow.css';\nimport axios from 'axios';\nimport { FaAngleUp } from 'react-icons/fa';\nimport Placeholder from '../Placeholder/Placeholder';\n\nconst MainRow = ({ twitchToken, setGameDetails }) => {\n  const [games, setGames] = useState([]);\n  const [currentFilter, setCurrentFilter] = useState('Week');\n  const [changingFilter, setChangingFilter] = useState(false);\n  const [currentlyViewing, setCurrentlyViewing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n\n  let todaysDate = new Date();\n  const weekDateFormat = Math.floor(\n    new Date(todaysDate.getTime() + 7 * 24 * 60 * 60 * 1000) / 1000\n  );\n  const monthDateFormat = Math.floor(\n    new Date(\n      new Date(weekDateFormat * 1000).setMonth(\n        new Date(weekDateFormat * 1000).getMonth() + 1\n      )\n    ).getTime() / 1000\n  );\n  const yearDateFormat = Math.floor(\n    new Date(\n      new Date(monthDateFormat * 1000).setMonth(\n        new Date(monthDateFormat * 1000).getMonth() + 12\n      )\n    ).getTime() / 1000\n  );\n\n  // use pagination (scroll api) to get all game titles and year. Maybe get it every 24 hours using a cron job. Cache it locally and use that to autocomplete game titles. That's what we do internally.\n\n  const filterUniques = (list) => {\n    const uniques = [];\n    const filteredList = [];\n    list.map((game) => {\n      if (uniques.indexOf(game.game.name) === -1) {\n        uniques.push(game.game.name);\n        filteredList.push(game);\n      }\n    });\n    return filteredList;\n  };\n\n  useEffect(() => {\n    // Grab upcoming games based on current date filter\n    if (!twitchToken) return;\n    setLoading(true);\n    async function fetchData() {\n      let startDate;\n      let targetDate;\n\n      switch (currentFilter) {\n        case 'Month':\n          startDate = weekDateFormat;\n          targetDate = monthDateFormat;\n          break;\n        case 'Year':\n          startDate = monthDateFormat;\n          targetDate = yearDateFormat;\n          break;\n        default:\n          startDate = Math.floor(todaysDate.getTime() / 1000);\n          targetDate = weekDateFormat;\n          break;\n      }\n\n      try {\n        const retries = 3;\n        for (let i = 0; i < retries; i++) {\n          try {\n            const request = await axios.post(`${baseURL}/app/upcoming`, {\n              token: twitchToken,\n              currentDate: startDate,\n              targetDate,\n            });\n            setGames(filterUniques(request.data));\n            setLoading(false);\n            break;\n          } catch (error) {\n            console.log('Issue fetching data');\n          }\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    fetchData();\n  }, [currentFilter, twitchToken]);\n\n  // Handler to change the filter type (Week, Month, Year)\n  const changeFilterDate = (e) => {\n    setCurrentFilter(e.target.innerText);\n    setChangingFilter(false);\n  };\n\n  // Convert the YYYY-MM-DD to Month, Day, Year\n  const convertDate = (date) => {\n    let months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n\n    // Replace hypens with dashes to get correct date\n    // Hypens returned the date previous from current due to some weird Date bug\n    let now = new Date(date.replace(/-/g, '/'));\n    let currentDay = now.getDate();\n    let formattedDay;\n\n    // Give the numbered day the appropriate abbriviation\n    switch (currentDay) {\n      case 1:\n      case 21:\n      case 31:\n        formattedDay = currentDay + 'st';\n        break;\n      case 2:\n      case 22:\n        formattedDay = currentDay + 'nd';\n        break;\n      case 3:\n      case 23:\n        formattedDay = currentDay + 'rd';\n        break;\n      // Most days have the th ending (28th) so set as default\n      default:\n        formattedDay = currentDay + 'th';\n        break;\n    }\n    return (\n      months[now.getMonth()] + ' ' + formattedDay + ', ' + now.getFullYear()\n    );\n  };\n\n  return (\n    <div\n      onMouseOver={() => setCurrentlyViewing(true)}\n      onMouseOut={() => setCurrentlyViewing(false)}\n      className='main_row'\n    >\n      <div\n        className='main_row__filters'\n        onMouseLeave={() => setChangingFilter(false)}\n      >\n        <h2>Coming Soon</h2>\n        {/* Filter Type */}\n        <p\n          className='filters_filter'\n          onMouseOver={() => setChangingFilter(true)}\n        >\n          {currentFilter}{' '}\n          <FaAngleUp\n            size={10}\n            className={changingFilter ? 'arrow_active' : 'arrow'}\n          />\n        </p>{' '}\n        {changingFilter && (\n          <div className='filter_options'>\n            <ul>\n              <li\n                style={{\n                  backgroundColor: currentFilter == 'Week' ? 'white' : '',\n                  color: currentFilter == 'Week' ? 'black' : '',\n                }}\n                onClick={changeFilterDate}\n              >\n                Week\n              </li>\n              <li\n                style={{\n                  backgroundColor: currentFilter == 'Month' ? 'white' : '',\n                  color: currentFilter == 'Month' ? 'black' : '',\n                }}\n                onClick={changeFilterDate}\n              >\n                Month\n              </li>\n              <li\n                style={{\n                  backgroundColor: currentFilter == 'Year' ? 'white' : '',\n                  color: currentFilter == 'Year' ? 'black' : '',\n                }}\n                onClick={changeFilterDate}\n              >\n                Year\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n      <div className='main_row__row_posters'>\n        {games &&\n          !loading &&\n          games.map((game, i) => (\n            <div\n              className={`main_row__poster_container ${\n                currentlyViewing && 'dimmed'\n              }`}\n              onClick={() => setGameDetails(game.game)}\n              key={game.id}\n            >\n              <h4 className='main__poster_released'>\n                {convertDate(game.human)}\n              </h4>\n              <img\n                key={game.id}\n                className='main_poster'\n                src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.game.cover?.image_id}.jpg`}\n                alt={game.name}\n              />\n            </div>\n          ))}\n        {loading && (\n          <div className='main_row__loading_container'>\n            {[...Array(4)].map((item, i) => (\n              <div key={i} className='main_row__placeholder__wrapper'>\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MainRow;\n","import React, { useState, useEffect } from 'react';\nimport './TrendingRow.css';\nimport axios from 'axios';\n\nconst TrendingRow = ({ twitchToken, setGameDetails }) => {\n  const [games, setGames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  let currentDate = Math.floor(new Date().getTime() / 1000);\n  let trendingTitlesFetched = JSON.parse(sessionStorage.getItem('trending'));\n\n  useEffect(() => {\n    if (!twitchToken) return;\n    if (trendingTitlesFetched && trendingTitlesFetched.length > 0) {\n      setGames(trendingTitlesFetched);\n      setLoading(false);\n      return;\n    }\n    // Grab games from each genre\n    async function fetchData() {\n      setLoading(true);\n      try {\n        let trendingTitles = [];\n        const request = await axios.post(`${baseURL}/app/trending`, {\n          token: twitchToken,\n          currentDate: currentDate,\n        });\n        // const request = await axios.get(`${baseURL}/steam/steam_trending`, {\n        //   token: twitchToken,\n        //   currentDate: currentDate,\n        // });\n\n        console.log(request);\n\n        if (request.data.message) {\n          localStorage.removeItem('twitch_auth');\n          return;\n        }\n\n        const uniqueTitles = new Set();\n        request.data.filter(\n          (item) =>\n            !uniqueTitles.has(item.game.id) &&\n            uniqueTitles.add(item.game.id).add(item.game)\n        );\n\n        uniqueTitles.forEach(\n          (game) => typeof game == 'object' && trendingTitles.push(game)\n        );\n\n        trendingTitles.sort(\n          (a, b) =>\n            b.release_dates.findLast((dates) => dates.date) -\n              a.release_dates.findLast((dates) => dates.date) ||\n            b.hypes - a.hypes\n        );\n\n        setGames(trendingTitles.slice(0, 10));\n\n        sessionStorage.setItem(\n          'trending',\n          JSON.stringify(trendingTitles.slice(0, 10))\n        );\n        setLoading(false);\n        return request;\n      } catch (error) {\n        console.log(error);\n      }\n      setLoading(false);\n    }\n    fetchData();\n  }, [twitchToken]);\n\n  if (loading) return null;\n  // return (\n  //   <div className='row__loading_container'>\n  //     {[...Array(10)].map((item, i) => (\n  //       <div key={i} className='trending_row__placeholder__wrapper'>\n  //         <Placeholder key={i} delay={i} />\n  //       </div>\n  //     ))}\n  //   </div>\n  // );\n\n  return (\n    <div className='trending_row'>\n      <h2>TRENDING TITLES</h2>\n\n      <div className='trending_row__posters'>\n        {games.map((game, i) => (\n          <React.Fragment key={game.name}>\n            <div className='trending_row__poster_wrapper'>\n              <div className='trending_row__rank'>{i + 1}</div>\n              <div\n                className='trending_row__poster_container'\n                style={{\n                  marginLeft: (i == 9 && '160px') || (i == 0 && '65px'),\n                }}\n                onClick={() => setGameDetails(game)}\n              >\n                {' '}\n                {!loading && (\n                  <>\n                    <img\n                      loading='lazy'\n                      className='trending_row__poster'\n                      src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\n                      alt={game.name}\n                    />\n                  </>\n                )}\n              </div>\n            </div>\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TrendingRow;\n","import React, { useState, useEffect } from 'react';\nimport './NewReleases.css';\nimport Placeholder from '../Placeholder/Placeholder';\nimport GamePreview from '../Row/GamePreview/GamePreview';\nimport axios from 'axios';\n\nconst NewReleases = ({ twitchToken, setGameDetails }) => {\n  const [games, setGames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const newReleases = [];\n\n  useEffect(() => {\n    if (!twitchToken) return;\n\n    async function fetchNewReleases() {\n      setLoading(true);\n\n      try {\n        // const scrape_request = await axios.get(`${baseURL}/steam/new_releases`);\n        // console.log(scrape_request);\n        return;\n        // const newReleasesData = await Promise.all(\n        //   newReleases.map(async (game) => {\n        //     const res = await axios.post(\n        //       `${baseURL}/app/search_trending_game`,\n        //       {\n        //         token: twitchToken,\n        //         gameName: game,\n        //       }\n        //     );\n        //     return res.data[0].game;\n        //   })\n        // );\n        // setGames(newReleasesData);\n        // setLoading(false);\n        // return newReleasesData;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchNewReleases();\n  }, [twitchToken]);\n\n  // Grab trailer video from selected game\n  // const fetchGameDetails = (game) => {\n  //   setGameDetails(game);\n  //   setCurrentlyOpen(game.name);\n  //   setCurrentGame(game);\n  // };\n\n  const closeGameDetails = () => {\n    // setCurrentlyOpen(null);\n    // setCurrentGame(null);\n  };\n\n  games?.sort((a, b) =>\n    a.rating_count > b.rating_count\n      ? -1\n      : b.rating_count > a.rating_count\n      ? 1\n      : 0\n  );\n\n  return '';\n\n  return (\n    <div className='new_releases_row'>\n      <h2>NEW RELEASES</h2>\n\n      <div className='new_releases_row__posters'>\n        {games.map((game, i) => (\n          <React.Fragment key={game.name}>\n            <div className='new_releases_row__poster_wrapper'>\n              <div\n                className='new_releases_row__poster_container'\n                onClick={() => setGameDetails(game)}\n              >\n                {' '}\n                {!loading && (\n                  <>\n                    <img\n                      loading='lazy'\n                      className='new_releases_row__poster'\n                      src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\n                      alt={game.name}\n                    />\n                  </>\n                )}\n              </div>\n              {/* {currentlyOpen === game.name && (\n                <GamePreview\n                  game={currentGame}\n                  displayDetails={displayDetails}\n                  hideDetails={closeGameDetails}\n                />\n              )} */}\n            </div>\n          </React.Fragment>\n        ))}\n        {loading && (\n          <div className='row__loading_container'>\n            {[...Array(10)].map((item, i) => (\n              <div key={i} className='new_releases_row__placeholder__wrapper'>\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NewReleases;\n","// Get todays date based off current timezone\nlet todaysDate = new Date();\nlet igdbDate = Math.floor(todaysDate.getTime() / 1000);\nlet filterDate = igdbDate * 1000;\n\n// List of endpoints for the Rawg.io API\nconst requests = [\n  {\n    requestId: 'fetchAdventureTitles',\n    genreId: 31,\n    title: 'ACTION/ADVENTURE',\n  },\n  {\n    requestId: 'fetchArcadeTitles',\n    genreId: 33,\n    title: 'ARCADE',\n  },\n  {\n    requestId: 'fetchMusicTitles',\n    genreId: 7,\n    title: 'MUSIC',\n  },\n  {\n    requestId: 'fetchHackTitles',\n    genreId: 25,\n    title: 'HACK/SLASH',\n  },\n  {\n    requestId: 'fetchFightingTitles',\n    genreId: 4,\n    title: 'FIGHTING',\n  },\n  {\n    requestId: 'fetchIndieTitles',\n    genreId: 32,\n    title: 'INDIE',\n  },\n  {\n    requestId: 'fetchMassivelyMultiplayerTitles',\n    genreId: 36,\n    title: 'MOBA',\n  },\n  {\n    requestId: 'fetchPlatformerTitles',\n    genreId: 8,\n    title: 'PLATFORMER',\n  },\n  {\n    requestId: 'fetchPuzzleTitles',\n    genreId: 9,\n    title: 'PUZZLE',\n  },\n  {\n    requestId: 'fetchRacingTitles',\n    genreId: 10,\n    title: 'RACING',\n  },\n  {\n    requestId: 'fetchRPGTitles',\n    genreId: 12,\n    title: 'RPG',\n  },\n  {\n    requestId: 'fetchShooterTitles',\n    genreId: 5,\n    title: 'SHOOTER',\n  },\n  {\n    requestId: 'fetchSimulationTitles',\n    genreId: 13,\n    title: 'SIMULATION',\n  },\n  {\n    requestId: 'fetchSportsTitles',\n    genreId: 14,\n    title: 'SPORTS',\n  },\n  {\n    requestId: 'fetchStrategy',\n    genreId: (11, 15),\n    title: 'STRATEGY',\n  },\n];\n\nexport default requests;\n","import { useState, useEffect, memo, lazy, Suspense } from \"react\";\n\n// Component Imports\nimport Row from \"../Row/Row\";\nimport Banner from \"../Banner/Banner\";\nimport Nav from \"../Nav/Nav\";\nimport MainRow from \"../MainRow/MainRow\";\nimport TrendingRow from \"../TrendingRow/TrendingRow\";\nimport NewReleases from \"../NewReleases/NewReleases\";\n\n// File Imports\nimport SpotifyPlayback from \"../SpotifyPlayback/SpotifyPlayback\";\nimport useSpotifyAuth from \"../../hooks/useSpotifyAuth\";\nimport useSteamAuth from \"../../hooks/useSteamAuth\";\nimport useFetchGenres from \"../../hooks/useFetchGenres\";\nimport { SlOptions } from \"react-icons/sl\";\nimport Placeholder from \"../Placeholder/Placeholder\";\n\nconst GameDetails = lazy(() => import(\"../GameDetails/GameDetails\"));\nconst Notification = lazy(() => import(\"../Notification/Notification\"));\nconst UserCollection = lazy(() =>\n  import(\"../UserCollectionPage/UserCollection\")\n);\n\nconst windowUrl = window.location.search;\nconst id = windowUrl.split(\"?\")[1];\n\nconst Dashboard = ({\n  currentUser,\n  twitchToken,\n  currentProfile,\n  currentCollection,\n  userNotes,\n  updateCollection,\n  selectProfile,\n  updateGameStatus,\n  fetchGame,\n  logoutUser,\n  gameStatus,\n  resetGameStatus,\n  changeProfile,\n  spotifyToken,\n  refreshSpotifyToken,\n}) => {\n  const allGenres = useFetchGenres();\n  const [displayNotification, setDisplayNotification] = useState(false);\n  const [notification, setNotification] = useState({ status: \"\", message: \"\" });\n\n  // Spotify States\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [playAudio, setPlayAudio] = useState(false);\n  const [rowsLoading, setRowsLoading] = useState();\n\n  // User states\n  const [viewingCollection, setViewingCollection] = useState(false);\n\n  // Row States\n  const [currentGameOpen, setCurrentGameOpen] = useState(null);\n  const [viewingGameOptions, setViewingGameOptions] = useState(false);\n  const [hoveringGame, setHoveringGame] = useState(null);\n\n  // Search States\n  const [gameDetails, setGameDetails] = useState(null);\n\n  // Local Variables\n  // const spotifyAccessToken = useSpotifyAuth(code);\n  // const steamCollection = useSteamAuth(id);\n\n  useEffect(() => {\n    if (!currentGameOpen) document.body.style.overflow = \"auto\";\n  }, []);\n\n  const resetGame = () => {\n    setHoveringGame(null);\n    resetGameStatus();\n  };\n\n  const openGameWindow = (game) => {\n    console.log(game);\n    setCurrentGameOpen(game.id);\n    document.body.style.overflow = \"hidden\";\n  };\n\n  const closeGameWindow = () => {\n    document.body.style.overflow = \"auto\";\n    setCurrentGameOpen(null);\n  };\n\n  const playTrack = (track) => {\n    setCurrentTrack(track);\n  };\n\n  const toProfileSelection = () => {\n    localStorage.removeItem(\"profile\");\n    window.location.reload();\n  };\n\n  if (currentProfile) {\n    if (gameDetails !== null) {\n      return (\n        <>\n          <Suspense fallback={<>...</>}>\n            <GameDetails\n              setNotification={(status, message) =>\n                setNotification({ status, message })\n              }\n              game={gameDetails}\n              closeDetails={() => setGameDetails(null)}\n              twitchToken={twitchToken}\n              updateGameStatus={(action, game) =>\n                updateGameStatus(action, game)\n              }\n              activeProfile={currentProfile}\n              currentCollection={currentCollection}\n            />\n\n            <Notification\n              notification={notification}\n              displayNotification={displayNotification}\n              hideNotification={() => {\n                setNotification({ message: \"\", status: \"\" });\n              }}\n            />\n          </Suspense>\n        </>\n      );\n    }\n\n    if (viewingCollection)\n      return (\n        <Suspense fallback={<>...</>}>\n          <UserCollection\n            collection={currentCollection}\n            activeProfile={currentProfile}\n            backToHome={() => setViewingCollection(false)}\n            currentTrack={currentTrack}\n            playTrack={playTrack}\n            isPlaying={playAudio}\n            pausePlayback={() => setPlayAudio(false)}\n            resumePlayback={() => setPlayAudio(true)}\n            spotifyToken={spotifyToken}\n            updateGameStatus={(action, game) => updateGameStatus(action, game)}\n            updateCollection={updateCollection}\n            userNotes={userNotes}\n            trackUri={currentTrack?.uri}\n            refreshSpotifyToken={refreshSpotifyToken}\n          />\n        </Suspense>\n      );\n\n    return (\n      <div className=\"App\">\n        <Nav\n          currentUser={currentUser}\n          activeProfile={currentProfile}\n          changeUser={changeProfile}\n          onLogout={logoutUser}\n          fetchSubmittedGame={fetchGame}\n          toProfilePage={toProfileSelection}\n          selectProfile={selectProfile}\n          spotifyToken={spotifyToken}\n          twitchToken={twitchToken}\n          saveEdit={() => console.log(\"saving edit\")}\n          updateCollection={updateCollection}\n          currentCollection={currentCollection}\n          viewCollection={() => setViewingCollection(true)}\n        />\n\n        <Banner\n          setGameDetails={(id) => setGameDetails(id)}\n          addGame={(game) => updateGameStatus(\"ADD\", game)}\n          activeProfile={currentProfile}\n        />\n        <MainRow\n          twitchToken={twitchToken}\n          setGameDetails={(game) => setGameDetails(game)}\n        />\n\n        <NewReleases\n          twitchToken={twitchToken}\n          setGameDetails={(game) => setGameDetails(game)}\n        />\n\n        <TrendingRow\n          twitchToken={twitchToken}\n          setGameDetails={(game) => setGameDetails(game)}\n        />\n\n        {currentGameOpen && (\n          <>\n            <h1 className=\"row__preview_close\" onClick={closeGameWindow}>\n              X\n            </h1>\n          </>\n        )}\n        <div\n          className={`${currentGameOpen !== null ? \"game_preview__modal\" : \"\"}`}\n        />\n\n        {allGenres.genreGamesList.length > 0 ? (\n          allGenres.genreGamesList.map((request) => (\n            <Row\n              key={Object.keys(request)}\n              activeProfile={currentProfile}\n              spotifyToken={spotifyToken}\n              genreDetails={Object.entries(request)}\n              playTrack={playTrack}\n              currentTrack={currentTrack}\n              setGameDetails={(game) => setGameDetails(game)}\n              resumePlayback={(e) => setPlayAudio(true)}\n              pausePlayback={(e) => setPlayAudio(false)}\n              isPlaying={playAudio}\n              currentGameOpen={currentGameOpen}\n              openGame={(game) => openGameWindow(game)}\n              closeGameWindow={closeGameWindow}\n              updateGameStatus={(action, game) =>\n                updateGameStatus(action, game)\n              }\n              setNotification={(status, message) =>\n                setNotification({ status, message })\n              }\n              loading={rowsLoading}\n              hoverGame={(game) => setHoveringGame(game)}\n              hoverAway={() => resetGame()}\n              currentHover={hoveringGame}\n              currentCollection={currentCollection}\n              gameStatus={gameStatus}\n            />\n          ))\n        ) : (\n          <div className=\"row__loading_container\">\n            {[...Array(10)].map((item, i) => (\n              <div key={i} className=\"row__placeholder__wrapper\">\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n\n        {spotifyToken && (\n          <SpotifyPlayback\n            spotifyToken={spotifyToken}\n            playAudio={playAudio}\n            beginPlayback={(e) => setPlayAudio(true)}\n            pausePlayback={(e) => setPlayAudio(false)}\n            trackUri={currentTrack?.uri}\n            refreshSpotifyToken={refreshSpotifyToken}\n          />\n        )}\n\n        <Notification\n          notification={notification}\n          displayNotification={displayNotification}\n          hideNotification={() => {\n            setNotification({ message: \"\", status: \"\" });\n          }}\n        />\n      </div>\n    );\n  }\n};\n\nexport default memo(Dashboard);\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport requestsIGDB from '../requestsIGDB';\n\nexport default function useFetchGenres() {\n  const existingToken = localStorage.getItem('twitch_auth');\n  const [genreGamesList, setGenreGamesList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const currentDate = new Date();\n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      const genreTitles = await Promise.all(\n        requestsIGDB.map((genre) => {\n          return axios.post(`${baseURL}/app/game_genre`, {\n            token: existingToken,\n            genreId: genre.genreId,\n            genreTitle: genre.title,\n          });\n        })\n      );\n\n      console.log(genreTitles);\n      // const completeGenreList = genreTitles.map((genre) => genre.data);\n      // setGenreGamesList(completeGenreList);\n      // setIsLoading(false);\n      // return genreTitles;\n      const request = await axios.get(`${baseURL}/app/get_genres`);\n      // const last_updated = new Date(request.data[0].last_updated);\n      // if (currentDate > last_updated.setDate(last_updated.getDate() + 1)) {\n      //   return updateGenresAPI();\n      // } else {\n      setGenreGamesList(request.data[0].genres_list);\n      setIsLoading(false);\n      return request.data;\n    };\n\n    const updateGenresAPI = async () => {\n      if (!existingToken) return;\n\n      const genreTitles = await Promise.all(\n        requestsIGDB.map((genre) => {\n          return axios.post(`${baseURL}/app/game_genre`, {\n            token: existingToken,\n            genreId: genre.genreId,\n            genreTitle: genre.title,\n          });\n        })\n      );\n      const completeGenreList = genreTitles.map((genre) => genre.data);\n      updateGenresCollection(completeGenreList);\n      setIsLoading(false);\n      return completeGenreList;\n    };\n\n    fetchGenres();\n  }, [existingToken]);\n\n  const updateGenresCollection = async (list) => {\n    const request = await axios.post(`${baseURL}/app/update_genres`, {\n      genreList: list,\n      date: currentDate,\n    });\n    setGenreGamesList(request.data.genres_list);\n    return request.data.genres_list;\n  };\n\n  return { genreGamesList, isLoading };\n}\n","import React, { useState } from 'react';\nimport './ProfileEditor.css';\n\nconst SearchList = ({ list, selectGame }) => {\n  return (\n    <div className='search_list_container'>\n      <ul className='search_list'>\n        {list.slice(0, 5).map((game) => (\n          <li className='search_list_item' onClick={() => selectGame(game)}>\n            <img className='item_thumbnail' src={game.cover.url} />\n            <p className='item_title'>{game.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchList;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport \"./ProfileEditor.css\";\nimport SearchList from \"./SearchList\";\nimport axios from \"axios\";\nimport { MdEdit } from \"react-icons/md\";\nimport { SketchPicker } from \"react-color\";\nimport { FaAngleDown } from \"react-icons/fa\";\n\nconst ProfileEditor = (props) => {\n  document.body.style.overflow = \"hidden\";\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const currentProfile = props.currentProfile;\n  const isAdmin = currentProfile.isAdmin;\n  const [loading, setLoading] = useState(false);\n  const [searchLoading, setSearchLoading] = useState(false);\n  // Current Profile Name\n  const currentProfileName =\n    localStorage.getItem(\"profile\") || currentProfile.name;\n  const [nameValue, setNameValue] = useState(currentProfileName);\n  // Title Input State and Ref\n  const titleRef = useRef(\"\");\n  const [titleValue, setTitleValue] = useState(currentProfile.favorite_game);\n  const [titleId, setTitleId] = useState(0);\n  const [titleImage, setTitleImage] = useState(\"\");\n  const [titleList, setTitleList] = useState([]);\n  let searchValue = \"\";\n  // Console Input State and Ref\n  const consoleRef = useRef(\"\");\n  const [consoleValue, setConsoleValue] = useState(\n    currentProfile.favorite_console\n  );\n  // Profile form states\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentAvatar, setCurrentAvatar] = useState(currentProfile.avatar);\n  const [imgFilePreview, setImgFilePreview] = useState(null);\n  const fileInputRef = useRef(\"\");\n  const [imgLink, setImgLink] = useState(\"\");\n  const [usingImgLink, setUsingImgLink] = useState(false);\n  const [changingAvatar, setChangingAvatar] = useState(false);\n  // Color states\n  const [changingColor, setChangingColor] = useState(false);\n  const [color, setColor] = useState(currentProfile.color);\n  // Genre states\n  const genreRef = useRef(\"\");\n  const [changingGenre, setChangingGenre] = useState(false);\n  const [currentGenre, setCurrentGenre] = useState(\n    currentProfile.favorite_genre\n  );\n\n  const genreList = [\n    \"Action\",\n    \"Adventure\",\n    \"Arcade\",\n    \"Card & Board\",\n    \"Family\",\n    \"Fighting\",\n    \"Indie\",\n    \"MMO (Massive Multiplayer)\",\n    \"Platformer\",\n    \"Puzzle\",\n    \"Racing\",\n    \"RPG\",\n    \"Shooter\",\n    \"Sports\",\n    \"Strategy\",\n  ];\n\n  useEffect(() => {\n    if (\n      titleValue == \"\" ||\n      titleValue == currentProfile.favorite_game ||\n      searchLoading\n    ) {\n      setTitleList([]);\n      return;\n    }\n    const delaySearch = setTimeout(() => {\n      setSearchLoading(true);\n      const fetchSearchedGame = async () => {\n        const request = await axios.post(`${baseURL}/app/search_game`, {\n          gameName: titleValue,\n          token: props.twitchToken,\n        });\n        setTitleList(request.data);\n        setSearchLoading(false);\n      };\n      fetchSearchedGame();\n    }, 500);\n\n    return () => clearTimeout(delaySearch);\n  }, [titleValue]);\n\n  // Listen for escape key press to close out color palette\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        setChangingColor(false);\n      }\n    };\n    window.addEventListener(\"keydown\", handleEsc);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleEsc);\n    };\n  }, []);\n\n  // Listen for clicks outside of genre dropdown box\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (genreRef.current && !genreRef.current.contains(event.target)) {\n        setChangingGenre(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [genreRef]);\n\n  const selectGameHandler = (game) => {\n    setTitleValue(game.name);\n    setTitleId(game.id);\n    setTitleImage(\n      `//images.igdb.com/igdb/image/upload/t_cover_big/${game.cover?.image_id}.jpg`\n    );\n    setTitleList([]);\n  };\n\n  const titleBlurHandler = () => {\n    if (titleList.length > 0) {\n    }\n  };\n\n  const colorChangeHandler = (color) => setColor(color.hex);\n  const genreChangeHandler = (genre) => {\n    setCurrentGenre(genre);\n    setChangingGenre(false);\n  };\n\n  // Determine cancel button functionality\n  const cancelButtonHandler = () => {\n    // If user is changing avatars, return to editing profile\n    if (changingAvatar) {\n      setChangingAvatar(false);\n      setUsingImgLink(false);\n    }\n    // If the user is editing profile, return to all profiles\n    else {\n      props.viewAllProfiles();\n    }\n  };\n\n  // Delete single profile\n  const deleteProfileHandler = async () => {\n    setLoading(true);\n    try {\n      const request = await axios.delete(`${baseURL}/app/delete_profile`, {\n        data: { email: props.userEmail, name: currentProfile.name },\n      });\n      props.saveEdit(request.data.response);\n      props.viewAllProfiles();\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n    setLoading(false);\n  };\n\n  // Avatar profile image handling\n  const updateAvatar = async (e, method) => {\n    setLoading(true);\n    // Append email and profile name to find correct profile to update\n    const data = new FormData();\n    data.append(\"email\", props.userEmail);\n    data.append(\"name\", currentProfile.name);\n    // User uploads image\n    if (method == \"file\") {\n      data.append(\"avatar\", e.target.files[0]);\n      try {\n        const request = await axios.post(\n          `${baseURL}/app/update_avatar_file`,\n          data\n        );\n        setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\n      } catch (e) {\n        console.log(e);\n        return e;\n      }\n      setLoading(false);\n    }\n\n    // If user uses a link to an image\n    else {\n      const data = {\n        email: props.userEmail,\n        name: currentProfile.name,\n        avatar: imgLink,\n      };\n      try {\n        const request = await axios.post(\n          `${baseURL}/app/update_avatar_link`,\n          data\n        );\n        setCurrentAvatar(imgLink);\n      } catch (e) {\n        console.log(e);\n        return e;\n      }\n      setLoading(false);\n    }\n  };\n\n  // If user isn't using the link, display the link modal\n  // Or else submit the link url and close the modal\n  const determineLinkAction = (e) => {\n    if (!usingImgLink) {\n      setUsingImgLink(true);\n    } else {\n      updateAvatar(e, \"link\");\n    }\n  };\n\n  // Update Profile in Mongo Database\n  const saveUserData = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    // Make inputs OPTIONAL\n    const userData = {\n      email: props.userEmail,\n      originalName: currentProfile.name,\n      newName: nameValue.trim(),\n      newColor: color,\n      favoriteGenre: currentGenre ? currentGenre.trim() : \"Action\",\n      favoriteGame: titleValue ? titleValue.trim() : \"None\",\n      gameId: titleId,\n      imageURL: titleImage,\n      favoriteConsole: consoleValue ? consoleValue.trim() : \"None\",\n      twitchToken: props.twitchToken,\n    };\n\n    try {\n      const request = await axios.post(\n        `${baseURL}/app/update_user_profile`,\n        userData\n      );\n\n      localStorage.setItem(\"user\", request.data.response.user.email);\n      localStorage.setItem(\"profile\", request.data.response.profile.name);\n      setStatusMessage(request.data.message);\n      props.saveEdit(request.data.response);\n      props.viewAllProfiles();\n    } catch (error) {\n      setStatusMessage(error);\n    }\n    setLoading(false);\n  };\n\n  // Loading spinner\n  if (loading) {\n    return (\n      <div className=\"profile_edit__container\">\n        <div className=\"profile_edit__header\">\n          <h3>GAMEFLIX</h3>\n        </div>\n        <div className=\"profile_edit__form_wrapper\">\n          <div className=\"profile__loading\">\n            <div className=\"profile__loading_spinner\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"profile_edit__container\">\n      <div className=\"profile_edit__header\">\n        <h3>GAMEFLIX</h3>\n      </div>\n      <div className=\"profile_edit__form_wrapper\">\n        <h3>{currentProfile !== true ? \"Edit Profile\" : \"Create Profile\"}</h3>\n        <div\n          className={`form_container ${\n            changingAvatar && \"avatar_select_container\"\n          }`}\n        >\n          {/* USER AVATAR CONTAINER */}\n          <div\n            style={{ paddingTop: changingAvatar && \"10px\" }}\n            className=\"form_avatar_container\"\n          >\n            <img\n              className={`current_avatar ${changingAvatar && \"avatar_select\"}`}\n              style={{\n                backgroundColor: color ? color : currentProfile.color,\n              }}\n              src={currentAvatar}\n            />\n            {!changingAvatar && (\n              <span\n                className=\"current_avatar_edit\"\n                onClick={() => setChangingAvatar(true)}\n              >\n                <MdEdit style={{ height: \"100%\" }} />\n              </span>\n            )}\n          </div>\n          {/* USER FORM */}\n          <div className=\"form_right\">\n            {!changingAvatar && (\n              <form className=\"profile_edit__form\">\n                {/* NAME */}\n                <input\n                  className=\"name_input\"\n                  onChange={(e) => setNameValue(e.target.value)}\n                  value={nameValue}\n                  autoFocus\n                />\n                {/* COLOR */}\n                <p>Color</p>\n                <input\n                  className=\"color_input\"\n                  style={{\n                    color: color,\n                  }}\n                  onChange={(e) => setColor(e.target.value)}\n                  value={color}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setChangingColor(!changingColor)}\n                  style={{\n                    backgroundColor: color,\n                  }}\n                />\n                {changingColor && (\n                  <SketchPicker\n                    color={color}\n                    onChangeComplete={colorChangeHandler}\n                    className=\"profile_color_palette\"\n                  />\n                )}\n              </form>\n            )}\n            {/* USER PERSONAL */}\n            <div\n              className={`form_personal ${changingAvatar && \"personal_avatar\"}`}\n            >\n              <h4\n                style={{\n                  textAlign: changingAvatar ? \"center\" : \"left\",\n                }}\n              >\n                {!changingAvatar ? \"Your Playstyle\" : \"Current\"}\n              </h4>\n              {/* AVATAR FILE */}\n              {changingAvatar && (\n                <>\n                  <div\n                    className={`upload_avatar_actions ${\n                      usingImgLink && \"img_link_actions\"\n                    }`}\n                  >\n                    <input\n                      className=\"upload_file_input\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      style={{ display: \"none\" }}\n                      multiple={false}\n                      ref={fileInputRef}\n                      onChange={(e) => updateAvatar(e, \"file\")}\n                    />\n\n                    {!usingImgLink && (\n                      <>\n                        <button onClick={() => fileInputRef.current.click()}>\n                          Upload\n                        </button>\n                        <p>OR</p>\n                      </>\n                    )}\n                    {/* AVATAR URL */}\n                    <button onClick={determineLinkAction}>\n                      {!usingImgLink ? \"Enter link\" : \"Submit\"}\n                    </button>\n                    {usingImgLink && (\n                      <input\n                        className={`console_input ${\n                          changingAvatar && \"img_input\"\n                        }`}\n                        placeholder={\"Enter link to image or gif\"}\n                        value={imgLink}\n                        onChange={(e) => setImgLink(e.target.value)}\n                      />\n                    )}\n                  </div>\n                </>\n              )}\n              {/* TITLE */}\n              {!changingAvatar && (\n                <>\n                  <p className=\"form_personal_title\">Favorite Title</p>\n                  <input\n                    ref={titleRef}\n                    value={titleValue}\n                    className=\"title_input\"\n                    onBlur={titleBlurHandler}\n                    onChange={(e) => {\n                      titleRef.current = titleValue;\n                      setTitleValue(e.target.value);\n                    }}\n                  />\n                  {searchLoading && (\n                    <div className=\"profile__search_loading\">\n                      <div className=\"profile__search_loading_spinner\" />\n                    </div>\n                  )}\n                  {titleList.length > 0 && titleValue !== \"\" && (\n                    <SearchList\n                      list={titleList}\n                      selectGame={selectGameHandler}\n                    />\n                  )}\n                </>\n              )}\n              {/* CONSOLE */}\n              {!changingAvatar && (\n                <>\n                  <p className=\"form_personal_console\">Favorite Console</p>\n                  <input\n                    ref={titleRef}\n                    value={consoleValue}\n                    onChange={(e) => {\n                      consoleRef.current = consoleValue;\n                      setConsoleValue(e.target.value);\n                    }}\n                    className={`console_input ${changingAvatar && \"img_input\"}`}\n                    placeholder={\n                      changingAvatar ? \"https://www.example.com\" : \"\"\n                    }\n                  />\n                </>\n              )}\n              {/* GENRE */}\n              <div className=\"genre_dropdown\">\n                {!changingAvatar && (\n                  <>\n                    <p className=\"form_personal_genre\">Favorite Genre</p>\n                    <button onClick={() => setChangingGenre(!changingGenre)}>\n                      {currentGenre !== undefined\n                        ? `${currentGenre}`\n                        : \"Action\"}{\" \"}\n                      <FaAngleDown className=\"genre_arrow\" />\n                    </button>\n                  </>\n                )}\n                {/* <FaAngleDown className='genre_arrow' /> */}\n                {changingGenre && (\n                  <div ref={genreRef} className=\"genre_dropdown_content\">\n                    {genreList.map((genre) => (\n                      <span\n                        onClick={() => genreChangeHandler(genre)}\n                        key={genre}\n                      >\n                        {genre}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* FORM ACTIONS */}\n        <div className=\"form_actions\">\n          {!changingAvatar && (\n            <button className=\"save_btn\" onClick={saveUserData}>\n              Save\n            </button>\n          )}\n          <button className=\"cancel_btn\" onClick={cancelButtonHandler}>\n            {!changingAvatar ? \"Cancel\" : \"Back\"}\n          </button>\n          {!isAdmin && (\n            <button\n              className=\"delete_profile_btn justify-start\"\n              onClick={deleteProfileHandler}\n            >\n              Delete Profile\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileEditor;\n","import React, { useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport \"./SpotifyPlayback.css\";\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\n});\n\nconst SpotifyPlayback = ({\n  trackUri,\n  playAudio,\n  beginPlayback,\n  pausePlayback,\n  spotifyToken,\n  refreshSpotifyToken,\n}) => {\n  useEffect(() => {\n    spotifyApi.setAccessToken(spotifyToken);\n  }, [spotifyToken]);\n\n  useEffect(() => {\n    beginPlayback();\n  }, [trackUri]);\n\n  if (!spotifyToken) return;\n  return (\n    <>\n      <div className=\"playback_container\">\n        <SpotifyPlayer\n          token={spotifyToken}\n          callback={(state) => {\n            if (state.error) {\n              console.log(\"ERROR\");\n              refreshSpotifyToken(spotifyToken);\n            }\n            if (!state.isPlaying) pausePlayback();\n          }}\n          uris={trackUri ? [trackUri] : []}\n          play={playAudio}\n          styles={{\n            color: \"white\",\n            bgColor: \"rgba(0,0,0,0.9)\",\n            // sliderColor: activeProfile.color,\n            trackArtistColor: \"white\",\n            trackNameColor: \"white\",\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SpotifyPlayback;\n"],"names":["delay","className","style","animationDelay","onClick","e","stopPropagation","GamePreview","lazy","activeProfile","spotifyToken","genreDetails","playTrack","currentTrack","setGameDetails","resumePlayback","pausePlayback","isPlaying","currentGameOpen","closeGameWindow","openGame","updateGameStatus","setNotification","loading","hoverGame","hoverAway","currentHover","currentCollection","gameStatus","useState","currentGame","setCurrentGame","baseURL","process","currentPlaylist","setCurrentPlaylist","viewingSoundtrack","setViewingSoundtrack","viewingPreview","setViewingPreview","playlistLoading","setPlaylistLoading","genreTitle","genreList","slice","fetchGameOST","game","axios","params","name","token","request","data","status","console","log","id","tracks","checkGameOwned","some","item","determineESRB","age_ratings","src","rpRating","hasRating","filter","rating","category","length","alt","eRating","tRating","mRating","map","undefined","cover","zIndex","onMouseOver","onMouseLeave","display","fetchGameDetails","viewGameSoundtrack","closeGameSoundtrack","track","color","fontWeight","title","split","selectTrackHandler","transformStyle","image_id","Suspense","fallback","gameCover","ratingImage","closeGame","Array","i","isLoading","setIsLoading","bannerGamesList","setBannerGamesList","serverError","setServerError","twitchToken","localStorage","getItem","fetchData","selectedGame","Math","floor","random","useEffect","displayNewBanner","newGame","splice","indexOf","addGame","bannerGame","useFetchBanner","str","n","hasArt","artworks","exists","collection","backgroundSize","backgroundImage","backgroundPosition","summary","substr","size","props","allProfiles","existingToken","sessionStorage","handleEsc","event","keyCode","closeNavDropdown","window","addEventListener","removeEventListener","sort","a","b","user","changeProfile","changeUserHandler","avatar","toProfilePage","editProfile","viewCollection","editAccount","to","preventDefault","logoutHandler","closeAccountSettings","setLoggedUser","currentUser","deletingAccount","setDeletingAccount","updateStatus","setUpdateStatus","email","emailValue","setEmailValue","newEmailValue","setNewEmailValue","changingEmail","setChangingEmail","password","passwordValue","setPasswordValue","hidePassword","setHidePassword","newPasswordValue","setNewPasswordValue","changingPassword","setChangingPassword","hiddenPassword","replace","updateEmail","originalEmail","newEmail","type","message","deleteAccountHandler","_id","location","removeItem","height","fontSize","marginLeft","onChange","target","value","placeholder","autoFocus","justifyContent","displayNav","setDisplayNav","displayDropdown","setDisplayDropdown","displaySearch","setDisplaySearch","searchRef","useRef","editingProfile","setEditingProfile","editingAccount","setEditingAccount","profile","scrollNavListener","scrollY","cancelEdit","document","body","overflowY","ProfileEditor","currentProfile","userEmail","viewAllProfiles","saveEdit","getProfile","test","selectProfile","onSubmit","searchValue","current","trim","fetchSubmittedGame","ref","defaultValue","searchedGame","onBlur","defaultAvatar","transform","changeUser","profiles","onLogout","updateCollection","games","setGames","currentFilter","setCurrentFilter","changingFilter","setChangingFilter","currentlyViewing","setCurrentlyViewing","setLoading","todaysDate","Date","weekDateFormat","getTime","monthDateFormat","setMonth","getMonth","yearDateFormat","filterUniques","list","uniques","filteredList","push","startDate","targetDate","retries","currentDate","changeFilterDate","innerText","convertDate","date","formattedDay","now","currentDay","getDate","getFullYear","onMouseOut","backgroundColor","human","trendingTitlesFetched","JSON","parse","trendingTitles","uniqueTitles","Set","has","add","forEach","release_dates","findLast","dates","hypes","setItem","stringify","fetchNewReleases","rating_count","requestId","genreId","GameDetails","Notification","UserCollection","Dashboard","search","userNotes","fetchGame","logoutUser","resetGameStatus","refreshSpotifyToken","allGenres","genreGamesList","setGenreGamesList","fetchGenres","Promise","all","requestsIGDB","genre","genreTitles","genres_list","useFetchGenres","displayNotification","notification","setCurrentTrack","playAudio","setPlayAudio","rowsLoading","viewingCollection","setViewingCollection","setCurrentGameOpen","hoveringGame","setHoveringGame","gameDetails","overflow","closeDetails","action","hideNotification","backToHome","trackUri","uri","reload","Object","entries","openGameWindow","keys","SpotifyPlayback","beginPlayback","memo","selectGame","url","isAdmin","searchLoading","setSearchLoading","currentProfileName","nameValue","setNameValue","titleRef","favorite_game","titleValue","setTitleValue","titleId","setTitleId","titleImage","setTitleImage","titleList","setTitleList","consoleRef","favorite_console","consoleValue","setConsoleValue","setStatusMessage","currentAvatar","setCurrentAvatar","fileInputRef","imgLink","setImgLink","usingImgLink","setUsingImgLink","changingAvatar","setChangingAvatar","changingColor","setChangingColor","setColor","genreRef","changingGenre","setChangingGenre","favorite_genre","currentGenre","setCurrentGenre","delaySearch","setTimeout","fetchSearchedGame","gameName","clearTimeout","handleClickOutside","contains","deleteProfileHandler","response","updateAvatar","method","FormData","append","files","URL","createObjectURL","saveUserData","userData","originalName","newName","newColor","favoriteGenre","favoriteGame","gameId","imageURL","favoriteConsole","paddingTop","onChangeComplete","hex","textAlign","accept","multiple","click","genreChangeHandler","spotifyApi","SpotifyWebApi","clientId","setAccessToken","callback","state","error","uris","play","styles","bgColor","trackArtistColor","trackNameColor"],"sourceRoot":""}