{"version":3,"file":"static/js/204.b690961f.chunk.js","mappings":"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","sources":["components/Placeholder/Placeholder.js","components/Row/Row.js","hooks/useFetchBanner.js","components/Banner/Banner.js","components/Nav/NavDropdown.js","components/Login/Profiles/ProfileEditor/AccountEditor.js","components/Nav/Nav.js","components/MainRow/MainRow.js","components/TrendingRow/TrendingRow.js","components/NewReleases/NewReleases.js","requestsIGDB.js","components/Dashboard/Dashboard.js","hooks/useFetchGenres.js","hooks/useSpotifyAuth.js","hooks/useSteamAuth.js","components/Login/Profiles/ProfileEditor/SearchList.js","components/Login/Profiles/ProfileEditor/ProfileEditor.js","components/SpotifyPlayback/SpotifyPlayback.js"],"sourcesContent":["import React from 'react';\nimport './Placeholder.css';\n\nconst Placeholder = ({ delay }) => {\n  return (\n    <div\n      className='placeholder'\n      style={{ animationDelay: `${delay}ms` }}\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n};\n\nexport default Placeholder;\n","import React, { useState, lazy, Suspense } from 'react';\nimport './Row.css';\nimport axios from 'axios';\nimport Placeholder from '../Placeholder/Placeholder';\nimport {\n  FaPlay,\n  FaPause,\n  FaPlusSquare,\n  FaMinusSquare,\n  FaGamepad,\n  FaMusic,\n} from 'react-icons/fa';\nimport { CiSquareMore } from 'react-icons/ci';\n// ESRB Logos\nimport eRating from '../../assets/images/ESRB_E.png';\nimport tRating from '../../assets/images/ESRB_T.png';\nimport mRating from '../../assets/images/ESRB_M.png';\nimport rpRating from '../../assets/images/ESRB_RP.png';\n\nconst GamePreview = lazy(() => import('./GamePreview/GamePreview'));\n\nfunction Row({\n  activeProfile,\n  spotifyToken,\n  genreDetails,\n  playTrack,\n  currentTrack,\n  setGameDetails,\n  resumePlayback,\n  pausePlayback,\n  isPlaying,\n  currentGameOpen,\n  closeGameWindow,\n  openGame,\n  updateGameStatus,\n  setNotification,\n  loading,\n  hoverGame,\n  hoverAway,\n  currentHover,\n  currentCollection,\n  gameStatus,\n}) {\n  const [currentGame, setCurrentGame] = useState(null);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const [currentPlaylist, setCurrentPlaylist] = useState([]);\n  const [viewingSoundtrack, setViewingSoundtrack] = useState(false);\n  const [viewingPreview, setViewingPreview] = useState(false);\n  const [playlistLoading, setPlaylistLoading] = useState(false);\n\n  const genreTitle = genreDetails[0][0];\n  const genreList = genreDetails[0][1];\n\n  const fetchGameOST = async (game) => {\n    if (!spotifyToken) {\n      setCurrentGame(null);\n      setNotification(\n        'ERROR',\n        'Please connect to Spotify through the nav dropdown!'\n      );\n      return;\n    }\n    try {\n      setPlaylistLoading(true);\n      const request = await axios.get(`${baseURL}/app/spotify_album`, {\n        params: {\n          game: game.name,\n          token: spotifyToken,\n          baseURL,\n        },\n      });\n      if (request.data.status !== 'OK') {\n        console.log(request.data);\n        setPlaylistLoading(false);\n      } else {\n        setCurrentGame(game.id);\n        setCurrentPlaylist(request.data.tracks);\n        setViewingSoundtrack(true);\n        setPlaylistLoading(false);\n\n        return request.data.tracks;\n      }\n    } catch (error) {\n      console.log(error);\n      setPlaylistLoading(false);\n      return error;\n    }\n  };\n\n  // Grab trailer video from selected game\n  const fetchGameDetails = (game) => {\n    closeGameWindow();\n    setGameDetails(game);\n  };\n\n  const checkGameOwned = (game) => {\n    const exists = currentCollection.some((item) => item.id === game.id);\n    if (exists) {\n      return (\n        <div\n          className='row__blur_item'\n          onClick={() => updateGameStatus('REMOVE', game)}\n        >\n          <FaMinusSquare className='blur_item_icon' />\n          <p>Remove</p>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className='row__blur_item'\n          onClick={() => updateGameStatus('ADD', game)}\n        >\n          <FaPlusSquare className='blur_item_icon' />\n          <p>Add</p>\n        </div>\n      );\n    }\n  };\n\n  const viewGameSoundtrack = (e, game) => {\n    e.stopPropagation();\n    closeGameWindow();\n    setCurrentGame(game.id);\n    fetchGameOST(game);\n  };\n\n  const closeGameSoundtrack = (e) => {\n    e.stopPropagation();\n    setCurrentGame(null);\n    setViewingSoundtrack(false);\n  };\n\n  const selectTrackHandler = (e, track) => {\n    e.stopPropagation();\n    if (currentTrack !== null && track.name == currentTrack.name) {\n      resumePlayback();\n    }\n    playTrack(track);\n  };\n\n  const formatTrackTitle = (title) => {\n    return title.split('-')[0].split('(')[0];\n  };\n\n  // Return a ESRB rating picture according to fetched game\n  const determineESRB = (game) => {\n    if (!game || !game.age_ratings)\n      return <img className='row__poster__esrb_img' src={rpRating} />;\n    const hasRating = game?.age_ratings.filter(\n      (rating) => rating.category == 1 || rating.category == 2\n    );\n\n    if (hasRating.length == 0 || !game.age_ratings)\n      return <img className='row__poster__esrb_img' src={rpRating} />;\n    const esrb = hasRating[0].rating;\n\n    switch (esrb) {\n      case 1:\n      case 2:\n      case 8:\n      case 9:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb E rating'\n            src={eRating}\n          />\n        );\n      case 3:\n      case 4:\n      case 10:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb T rating'\n            src={tRating}\n          />\n        );\n      case 5:\n      case 11:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb M rating'\n            src={mRating}\n          />\n        );\n      default:\n        return (\n          <img\n            className='row__poster__esrb_img'\n            alt='esrb RP rating'\n            src={rpRating}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className='row'>\n      <h2 className='row__title'>{genreTitle}</h2>\n      <div className='row__posters'>\n        {genreList.map(\n          (game) =>\n            game.cover !== undefined && (\n              <React.Fragment key={game.id}>\n                {!loading && (\n                  <div\n                    className={`row__poster_wrapper ${\n                      currentGameOpen == game.id && 'viewing_game'\n                    }`}\n                    style={{\n                      zIndex:\n                        currentGameOpen !== game.id &&\n                        currentGameOpen !== null &&\n                        '-1',\n                    }}\n                    onMouseOver={() => hoverGame(game.id)}\n                    onMouseLeave={() =>\n                      viewingSoundtrack ? hoverGame(game.id) : hoverAway()\n                    }\n                  >\n                    {currentHover == game.id && !currentGameOpen && (\n                      <div\n                        className={`row__blur_wrapper ${\n                          gameStatus == 'error'\n                            ? 'blur_error'\n                            : gameStatus == 'success'\n                            ? 'blur_success'\n                            : ''\n                        }`}\n                      >\n                        {!playlistLoading ? (\n                          <div\n                            className='row__blur_details'\n                            style={{\n                              display: currentGame == game.id && 'none',\n                            }}\n                          >\n                            {/* ADD GAME */}\n                            {checkGameOwned(game)}\n\n                            {/* GET DETAILS */}\n                            <div\n                              className='row__blur_item'\n                              onClick={() => {\n                                fetchGameDetails(game);\n                              }}\n                            >\n                              <CiSquareMore className='blur_item_icon more' />\n                              <p>Details</p>\n                            </div>\n                            {/* GET SOUNDTRACK */}\n                            <div\n                              onClick={(e) => viewGameSoundtrack(e, game)}\n                              className='row__blur_item'\n                            >\n                              <FaMusic className='blur_item_icon music' />\n                              <p>Soundtrack</p>\n                            </div>\n                            {/* VIEW 3D CASE */}\n                            <div\n                              className='row__blur_item'\n                              onClick={() => openGame(game)}\n                            >\n                              <FaGamepad className='blur_item_icon' />\n                              <p>View Case</p>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className='playlist_loading'>\n                            <div className='playlist_loading_dot' />\n                            <div className='playlist_loading_dot' />\n                            <div className='playlist_loading_dot' />\n                          </div>\n                        )}\n                        {viewingSoundtrack && currentGame == game.id && (\n                          <div className='soundtrack_container'>\n                            <span onClick={(e) => closeGameSoundtrack(e)}>\n                              ←\n                            </span>\n                            <h3>Spotify OST</h3>\n                            <ul className='soundtracks'>\n                              {currentPlaylist?.map((track) => (\n                                <li\n                                  key={track.id}\n                                  onClick={(e) => e.stopPropagation()}\n                                  className='soundtrack'\n                                >\n                                  <p\n                                    style={{\n                                      color:\n                                        currentTrack !== null &&\n                                        currentTrack.name == track.name\n                                          ? 'green'\n                                          : 'white',\n                                      fontWeight:\n                                        currentTrack !== null &&\n                                        currentTrack.name == track.name\n                                          ? '600'\n                                          : '400',\n                                    }}\n                                  >\n                                    {formatTrackTitle(track.name)}\n                                  </p>\n                                  {(currentTrack !== null &&\n                                    currentTrack.name !== track.name) ||\n                                  !isPlaying ? (\n                                    <FaPlay\n                                      onClick={(e) =>\n                                        selectTrackHandler(e, track)\n                                      }\n                                    />\n                                  ) : (\n                                    <FaPause onClick={(e) => pausePlayback()} />\n                                  )}\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                    <div className='row__poster_container'>\n                      <>\n                        {/* FRONT OF POSTER */}\n                        <div\n                          className='row__poster_front'\n                          style={{\n                            transformStyle: currentGameOpen && 'revert',\n                          }}\n                        >\n                          <img\n                            loading='lazy'\n                            className='row__poster'\n                            src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\n                            alt={game.name + ' cover image'}\n                          />\n                        </div>\n                      </>\n                    </div>\n                    {currentGameOpen === game.id && (\n                      <Suspense fallback={<>...</>}>\n                        <GamePreview\n                          game={game}\n                          gameCover={`https://images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover?.image_id}.jpg`}\n                          ratingImage={determineESRB(game)}\n                          viewingPreview={viewingPreview}\n                          openGame={() => setViewingPreview(true)}\n                          closeGame={() => setViewingPreview(false)}\n                        />\n                      </Suspense>\n                    )}\n                  </div>\n                )}\n              </React.Fragment>\n            )\n        )}\n        {loading && (\n          <div className='row__loading_container'>\n            {[...Array(10)].map((item, i) => (\n              <div key={i} className='row__placeholder__wrapper'>\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchBanner = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [bannerGamesList, setBannerGamesList] = useState([]);\n  const [currentGame, setCurrentGame] = useState('');\n  const [serverError, setServerError] = useState(null);\n  const twitchToken = localStorage.getItem('twitch_auth');\n  const baseURL = process.env.REACT_APP_BASE_URL;\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      const request = await axios.post(`${baseURL}/app/fetch_banner_list`, {\n        token: twitchToken,\n      });\n      const selectedGame =\n        request.data[Math.floor(Math.random() * request.data.length - 1)];\n      setBannerGamesList(request.data);\n      setCurrentGame(selectedGame);\n      setIsLoading(false);\n      return currentGame;\n    } catch (error) {\n      console.log(error);\n      setServerError(error);\n      setIsLoading(false);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (!twitchToken || bannerGamesList.length > 0) return;\n    fetchData();\n  }, [twitchToken]);\n\n  const displayNewBanner = () => {\n    const newGame =\n      bannerGamesList[Math.floor(Math.random() * bannerGamesList.length - 1)];\n    if (!newGame) {\n      setCurrentGame(\n        bannerGamesList[Math.floor(Math.random() * bannerGamesList.length - 1)]\n      );\n      return;\n    } else {\n      setCurrentGame(newGame);\n      return;\n    }\n  };\n\n  return {\n    isLoading,\n    serverError,\n    currentGame,\n    displayNewBanner,\n  };\n};\n\nexport default useFetchBanner;\n","import './Banner.css';\nimport { BiRefresh } from 'react-icons/bi';\nimport useFetchBanner from '../../hooks/useFetchBanner';\n\nfunction Banner({ setGameDetails, addGame, activeProfile }) {\n  const bannerGame = useFetchBanner();\n\n  // Wait for game deatils to finish loading or the game name shows up undefined\n  // Undefined is a game name apart of the dataset and will display jibberish\n  if (bannerGame.isLoading || !bannerGame.currentGame) {\n    return (\n      <div className='banner__loading'>\n        <div className='banner__spinner' />\n      </div>\n    );\n  }\n  const hasArt = bannerGame.currentGame.artworks !== undefined;\n\n  // Don't allow user to add game if already in collection\n  const exists =\n    activeProfile.collection &&\n    activeProfile.collection.some(\n      (title) => title?.id === bannerGame.currentGame?.id\n    );\n\n  // If the game description is longer that 150 characters, replace the reaminder with the ellipsis '...'\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str;\n  };\n\n  return (\n    <header className='banner' key={bannerGame.currentGame.id}>\n      <div\n        className='banner__img'\n        style={{\n          backgroundSize: 'cover',\n          backgroundImage: `url(//images.igdb.com/igdb/image/upload/t_1080p_2x/${\n            hasArt\n              ? bannerGame.currentGame.artworks[0]?.image_id\n              : bannerGame.currentGame.cover?.image_id\n          }.jpg)`,\n          backgroundPosition: 'center center',\n        }}\n      />\n      <div className='banner__contents'>\n        <h1 className='banner__title'>{bannerGame.currentGame?.name}</h1>\n\n        <div className='banner__buttons'>\n          <button\n            className='banner__button'\n            onClick={() => setGameDetails(bannerGame.currentGame)}\n          >\n            See Details\n          </button>\n          {!exists && (\n            <button\n              className='banner__button'\n              onClick={() => addGame(bannerGame.currentGame)}\n            >\n              Add to Collection\n            </button>\n          )}\n        </div>\n\n        <h1 className='banner__description'>\n          {truncate(bannerGame.currentGame?.summary, 150)}\n        </h1>\n      </div>\n      <div className='banner--fadeBottom' />\n\n      <BiRefresh\n        size={35}\n        className='banner__refresh_icon'\n        onClick={bannerGame.displayNewBanner}\n      />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport './NavDropdown.css';\nimport { Link } from 'react-router-dom';\n// React Icons\nimport {\n  FaSortUp,\n  FaSpotify,\n  FaUserEdit,\n  FaPlaystation,\n  FaGamepad,\n} from 'react-icons/fa';\nimport { IoSettingsOutline } from 'react-icons/io5';\nimport { MdEdit } from 'react-icons/md';\n\nimport steamAuthBtn from '../../assets/images/steam-auth-btn.png';\n\nconst SPOTIFY_AUTH_URL = `https://accounts.spotify.com/authorize?client_id=${process.env.REACT_APP_SPOTIFY_CLIENT_ID}&response_type=code&redirect_uri=${process.env.REACT_APP_BASE_URL}&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state`;\n\nconst NavDropdown = (props) => {\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const allProfiles = props.allProfiles;\n\n  // Listens for escape key press to close nav dropdown\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        props.closeNavDropdown();\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n\n  // Change current user\n  const changeUserHandler = (user) => {\n    props.changeProfile(user);\n  };\n\n  const generatePlaystationTitles = async () => {\n    try {\n      const request = await axios.get(`${baseURL}/playstation/user_titles`);\n      console.log(request.data);\n      for (let game of request.data) {\n        for (let i = 0; i < game.earnedTrophies.length; i++) {\n          if (game.earnedTrophies[i].earned) {\n            game.allTrophies[i].earned = true;\n          } else game.allTrophies[i].earned = false;\n        }\n      }\n\n      props.currentCollection.filter((ownedGame) => {\n        const inCollection = request.data.some((game) => {\n          if (ownedGame.name.toLowerCase() === game.name.toLowerCase()) {\n            ownedGame.trophies = game.allTrophies;\n            axios.put(`${baseURL}/app/update_game_trophies`, {\n              email: localStorage.getItem('user'),\n              name: props.activeProfile.name,\n              gameId: ownedGame.id,\n              trophies: game.allTrophies,\n            });\n          } else {\n            console.log('New game bruh');\n            axios.post(`${baseURL}/app/update_collection`, {\n              email: localStorage.getItem('user'),\n              currentProfile: localStorage.getItem('profile'),\n              name: game.name,\n              id: game.id,\n              imageURL: `//images.igdb.com/igdb/image/upload/t_1080p_2x/${game.cover.image_id}.jpg`,\n              playtime: 0,\n              origin: 'gameflix',\n            });\n          }\n        });\n        return inCollection;\n      });\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  };\n\n  allProfiles.sort((a, b) => (a.name - b.name ? 1 : -1));\n\n  return (\n    <div className='dropdown'>\n      <FaSortUp className='dropdown__arrow' />\n      <div className='dropdown__profiles'>\n        <ul className='dropdown__profiles_list'>\n          {allProfiles.map((user) => {\n            if (user.name !== props.activeProfile.name) {\n              return (\n                <li\n                  className='dropdown__profiles_item'\n                  key={user.name}\n                  onClick={() => changeUserHandler(user)}\n                >\n                  <img\n                    src={user.avatar}\n                    className='dropdown__profile_icon'\n                    alt={`${user.name} avatar icon`}\n                  />\n                  <p className='dropdown__profile_name'>{user.name}</p>\n                </li>\n              );\n            }\n          })}\n          <li className='dropdown__profiles_item' onClick={props.toProfilePage}>\n            <span className='dropdown__profiles_manage'>\n              <MdEdit size={22} />\n            </span>\n            <p className='dropdown__profile_name'>Manage Profiles</p>\n          </li>\n        </ul>\n      </div>\n      <div className='dropdown__settings'>\n        <div\n          className='dropdown__settings_item'\n          onClick={() => props.editProfile()}\n        >\n          <span className='dropdown__settings_item_icon'>\n            <FaUserEdit size={18} />\n          </span>\n          <p>My Profile</p>\n        </div>\n        <div\n          className='dropdown__settings_item'\n          onClick={() => props.viewCollection()}\n        >\n          <span className='dropdown__settings_item_icon'>\n            <FaGamepad size={18} />\n          </span>\n          <p>My Collection</p>\n        </div>\n        <div className='dropdown__settings_item' onClick={props.editAccount}>\n          <span className='dropdown__settings_item_icon'>\n            <IoSettingsOutline size={18} />\n          </span>\n          <p>Account Settings</p>\n        </div>\n      </div>\n      <div className='dropdown__settings'>\n        {/* <div\n          className='dropdown__settings_item'\n          onClick={generatePlaystationTitles}\n        >\n          <span className='dropdown__settings_item_icon'>\n            <FaPlaystation size={18} />\n          </span>\n          <p>Link Playstation</p>\n        </div> */}\n        <a href={SPOTIFY_AUTH_URL} className='dropdown__settings_item'>\n          <span className='dropdown__settings_item_icon'>\n            <FaSpotify\n              size={18}\n              style={{ color: props.spotifyToken ? '#1DB954' : '#FFF' }}\n            />\n          </span>\n          <p>Spotify Authentication</p>\n        </a>\n        {/* <div\n          className='dropdown__settings_item'\n          style={{\n            alignItems: 'center',\n            justifyContent: 'center',\n            paddingBottom: '0',\n            paddingLeft: '0',\n          }}\n        >\n          <Link to={`http://localhost:3001/api/auth/steam`}>\n            <img className='steam_btn' src={steamAuthBtn} />\n          </Link>\n        </div> */}\n      </div>\n      <div className='dropdown__settings_links'>\n        <Link\n          to='/login'\n          className='dropdown__settings_link'\n          onClick={props.logoutHandler}\n        >\n          Sign out of GameFlix\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default NavDropdown;\n","import React, { useEffect, useState } from \"react\";\nimport { AiFillEyeInvisible, AiFillEye } from \"react-icons/ai\";\nimport axios from \"axios\";\n\nconst AccountEditor = ({\n  closeAccountSettings,\n  setLoggedUser,\n  currentUser,\n}) => {\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const [deletingAccount, setDeletingAccount] = useState(false);\n  const [updateStatus, setUpdateStatus] = useState(\"\");\n  // EMAIL STATES\n  const [emailValue, setEmailValue] = useState(currentUser.email);\n  const [newEmailValue, setNewEmailValue] = useState(\"\");\n  let repeatValue = \"\";\n  const [changingEmail, setChangingEmail] = useState(false);\n  // PASSWORD STATES\n  const [passwordValue, setPasswordValue] = useState(currentUser.password);\n  const [hidePassword, setHidePassword] = useState(true);\n  const [newPasswordValue, setNewPasswordValue] = useState(\"\");\n  const [changingPassword, setChangingPassword] = useState(false);\n\n  useEffect(() => {\n    if (hidePassword) {\n      const hiddenPassword = currentUser.password.replace(/./gi, \"*\");\n      setPasswordValue(hiddenPassword);\n    } else {\n      setPasswordValue(currentUser.password);\n    }\n  }, [hidePassword]);\n\n  const updateEmail = async (email) => {\n    setUpdateStatus(\"\");\n    try {\n      const request = await axios.post(`${baseURL}/app/update_user_email`, {\n        originalEmail: currentUser.email,\n        newEmail: email,\n      });\n\n      if (request.data.status < 400) {\n        setLoggedUser(request.data.user);\n        setUpdateStatus({ type: \"success\", message: request.data.message });\n        setEmailValue(request.data.user.email);\n        setNewEmailValue(\"\");\n        setChangingEmail(false);\n      } else {\n        setUpdateStatus({ type: \"error\", message: request.data.message });\n        setNewEmailValue(\"\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const emailChangeHandler = () => {\n    if (!changingEmail) {\n      setChangingEmail(true);\n      setChangingPassword(false);\n    } else {\n      if (newEmailValue !== \"\") {\n        updateEmail(newEmailValue);\n      } else {\n        setChangingEmail(false);\n        setNewEmailValue(\"\");\n      }\n    }\n  };\n\n  const deleteAccountHandler = async () => {\n    try {\n      await axios.delete(`${baseURL}/app/delete_account`, {\n        data: { id: currentUser._id },\n      });\n      window.location = \"/\";\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"profile\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const passwordChangeHandler = () => {\n    if (!changingPassword) {\n      setChangingPassword(true);\n      setChangingEmail(false);\n    } else {\n      if (newPasswordValue !== \"\") {\n        repeatValue = newEmailValue;\n      } else {\n        setChangingPassword(false);\n        setNewPasswordValue(\"\");\n      }\n    }\n  };\n\n  const determineEmailValidity = async (e) => {\n    e.preventDefault();\n    try {\n      const request = await axios.post(`${baseURL}/app/update_user_profile`, {\n        originalEmail: emailValue,\n        newEmail: newEmailValue,\n      });\n      console.log(request);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"profile_edit__container\">\n      <div className=\"profile_edit__header\">\n        <h3>GAMEFLIX</h3>\n      </div>\n      <div className=\"profile_edit__form_wrapper\" style={{ height: \"350px\" }}>\n        <h3>Account Settings</h3>\n        <div className=\"form_container\">\n          <form className=\"account_edit__form\">\n            {/* EMAIL CONTAINER */}\n            <div className=\"account_email_container\">\n              {updateStatus.type == \"error\" ? (\n                <p className=\"account_email_error\">{updateStatus.message}</p>\n              ) : (\n                <p className=\"account_email_success\">{updateStatus.message}</p>\n              )}\n              <h4\n                style={{ color: \"white\", fontSize: \"2rem\", marginLeft: \"2px\" }}\n              >\n                Email\n              </h4>\n              <input\n                className=\"account_email_input\"\n                onChange={(e) => setEmailValue(e.target.value)}\n                value={emailValue}\n              />\n\n              {/* NEW EMAIL */}\n              {changingEmail && (\n                <>\n                  <input\n                    className=\"account_email_input\"\n                    onChange={(e) => setNewEmailValue(e.target.value)}\n                    value={newEmailValue}\n                    placeholder=\"Enter new email\"\n                    autoFocus\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setNewEmailValue(\"\");\n                      setChangingEmail(false);\n                    }}\n                    className=\"account_email_save_btn\"\n                  >\n                    Cancel\n                  </button>\n                </>\n              )}\n\n              <button\n                type=\"button\"\n                onClick={emailChangeHandler}\n                className=\"save_btn\"\n              >\n                {!changingEmail ? \"Change Email\" : \"Save Email\"}\n              </button>\n            </div>\n\n            {/* PASSWORD CONTAINER */}\n            <div className=\"account_password_container\">\n              <h4\n                style={{ color: \"white\", fontSize: \"2rem\", marginLeft: \"2px\" }}\n              >\n                Password\n              </h4>\n              <input\n                className=\"account_password_input\"\n                onChange={(e) => setPasswordValue(e.target.value)}\n                value={passwordValue}\n              />\n              <span\n                className=\"account_password_visible_icon\"\n                onClick={() => setHidePassword(!hidePassword)}\n              >\n                {!hidePassword ? <AiFillEye /> : <AiFillEyeInvisible />}\n              </span>\n\n              {/* NEW PASSWORD */}\n              {changingPassword && (\n                <>\n                  <input\n                    className=\"account_password_input\"\n                    onChange={(e) => setNewPasswordValue(e.target.value)}\n                    value={newPasswordValue}\n                    placeholder=\"Enter new password\"\n                    autoFocus\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      setNewPasswordValue(\"\");\n                      setChangingPassword(false);\n                    }}\n                    className=\"account_password_save_btn\"\n                  >\n                    Cancel\n                  </button>\n                </>\n              )}\n              <button\n                type=\"button\"\n                onClick={passwordChangeHandler}\n                className=\"save_btn\"\n              >\n                {!changingPassword ? \"Change Password\" : \"Save Password\"}\n              </button>\n            </div>\n          </form>\n        </div>\n        {/* FORM ACTIONS */}\n        <div\n          className=\"form_actions\"\n          style={{ justifyContent: \"space-between\" }}\n        >\n          <button className=\"cancel_btn\" onClick={closeAccountSettings}>\n            Back\n          </button>\n          <button\n            className=\"delete_account_btn\"\n            onClick={() => setDeletingAccount(true)}\n          >\n            Delete Account\n          </button>\n        </div>\n      </div>\n      {deletingAccount && (\n        <div className=\"delete_account_modal\">\n          <div className=\"delete_account_modal_content\">\n            <h4>Are you sure you want to delete your account?</h4>\n            <div className=\"delete_account_modal_actions\">\n              <div className=\"modal_action_option\">\n                <p>Yes</p>\n                <span\n                  className=\"video-game-button\"\n                  onClick={deleteAccountHandler}\n                >\n                  A\n                </span>\n              </div>\n              <div className=\"modal_action_option\">\n                <p>No</p>\n                <span\n                  className=\"video-game-button\"\n                  onClick={() => setDeletingAccount(false)}\n                >\n                  B\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AccountEditor;\n","import React, { useRef } from 'react';\nimport './Nav.css';\nimport logo from '../../assets/images/gameflix-logo.png';\nimport defaultAvatar from '../../assets/images/basic_avatar.png';\nimport { useEffect, useState } from 'react';\nimport { FaSistrix, FaAngleUp } from 'react-icons/fa';\nimport NavDropdown from './NavDropdown';\nimport ProfileEditor from '../Login/Profiles/ProfileEditor/ProfileEditor';\nimport AccountEditor from '../Login/Profiles/ProfileEditor/AccountEditor';\n\nfunction Nav(props) {\n  const [displayNav, setDisplayNav] = useState(false);\n  const [displayDropdown, setDisplayDropdown] = useState(false);\n  const [displaySearch, setDisplaySearch] = useState(false);\n  const searchRef = useRef('');\n  const [editingProfile, setEditingProfile] = useState(false);\n  const [editingAccount, setEditingAccount] = useState(false);\n\n  const profile = props.activeProfile;\n\n  const closeNavDropdown = () => {\n    setDisplayDropdown(false);\n  };\n\n  const closeSearch = () => {\n    if (searchRef.current.value.length > 0) {\n      return;\n    }\n    setDisplaySearch(false);\n  };\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n    const searchValue = searchRef.current.value.trim();\n    if (searchValue.length == 0) return;\n    props.fetchSubmittedGame(searchValue);\n  };\n\n  useEffect(() => {\n    // If the user scrolls down from the top of page, add a black background to the nav\n    const scrollNavListener = () => {\n      window.addEventListener('scroll', () => {\n        if (window.scrollY > 100) {\n          setDisplayNav(true);\n        } else setDisplayNav(false);\n      });\n    };\n    scrollNavListener();\n\n    return () => {\n      window.removeEventListener('scroll', scrollNavListener);\n    };\n  }, []);\n\n  const cancelEdit = () => {\n    document.body.style.overflowY = 'scroll';\n    setEditingProfile(false);\n    setEditingAccount(false);\n  };\n\n  const editProfileHandler = () => {\n    document.body.style.overflowY = 'hidden';\n    setEditingProfile(true);\n  };\n\n  const editAccountHandler = () => {\n    document.body.style.overflowY = 'hidden';\n    setEditingAccount(true);\n  };\n\n  const saveEdit = () => {\n    props.saveEdit();\n    setEditingProfile(false);\n  };\n\n  // Handles escape key press for search input\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        // If the search input is open, close it\n        setDisplaySearch(false);\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${displayNav && 'nav__hide'}`}>\n      {editingProfile && (\n        <div className='nav_edit_profile'>\n          <ProfileEditor\n            currentProfile={profile}\n            userEmail={props.currentUser.email}\n            viewAllProfiles={cancelEdit}\n            saveEdit={saveEdit}\n            getProfile={(test) => props.selectProfile(test)}\n            twitchToken={props.twitchToken}\n          />\n        </div>\n      )}\n      {editingAccount && (\n        <div className='nav_edit_profile'>\n          {' '}\n          <AccountEditor\n            closeAccountSettings={cancelEdit}\n            setLoggedUser={(user) => props.setLoggedUser(user)}\n            currentUser={props.currentUser}\n          />{' '}\n        </div>\n      )}\n      <img\n        className='nav__logo'\n        src={logo}\n        alt='GameFlix Logo'\n        onClick={() => (window.location = '/')}\n      />\n      <div className='nav__right'>\n        <div className='nav__search'>\n          {displaySearch && (\n            <form className='nav__search_form' onSubmit={formSubmitHandler}>\n              <input\n                ref={searchRef}\n                autoFocus\n                type='text'\n                placeholder='Titles, publishers, genres'\n                defaultValue={\n                  props.searchedGame ? `${props.searchedGame.name}` : ''\n                }\n                onBlur={closeSearch}\n              />\n            </form>\n          )}\n          <FaSistrix\n            className={`nav__search_icon ${displaySearch && 'search_active'}`}\n            onClick={() => setDisplaySearch(!displaySearch)}\n          />\n        </div>\n        <div\n          className='nav__actions'\n          onMouseLeave={() => setDisplayDropdown(false)}\n        >\n          <div\n            className='nav__avatar_container'\n            onMouseOver={() => setDisplayDropdown(true)}\n          >\n            <img\n              className='nav__avatar'\n              src={profile.avatar ? profile.avatar : defaultAvatar}\n              // style={{ backgroundColor: profile.color }}\n              alt=\"User's avatar\"\n            />\n          </div>\n          <FaAngleUp\n            className='nav__avatar_arrow'\n            style={{\n              transform: `${\n                displayDropdown ? 'rotate(180deg)' : 'rotate(0deg)'\n              }`,\n            }}\n          />\n          {/* <NavDropdown /> */}\n          {displayDropdown && (\n            <NavDropdown\n              changeProfile={props.changeUser}\n              activeProfile={profile}\n              allProfiles={props.currentUser.profiles}\n              logoutHandler={props.onLogout}\n              closeNavDropdown={closeNavDropdown}\n              toProfilePage={props.toProfilePage}\n              spotifyToken={props.spotifyToken}\n              editProfile={editProfileHandler}\n              editAccount={editAccountHandler}\n              updateCollection={props.updateCollection}\n              currentCollection={props.currentCollection}\n              viewCollection={props.viewCollection}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from 'react';\nimport './MainRow.css';\nimport axios from 'axios';\nimport { FaAngleUp } from 'react-icons/fa';\nimport Placeholder from '../Placeholder/Placeholder';\n\nconst MainRow = ({ twitchToken, setGameDetails }) => {\n  const [games, setGames] = useState([]);\n  const [currentFilter, setCurrentFilter] = useState('Week');\n  const [changingFilter, setChangingFilter] = useState(false);\n  const [currentlyViewing, setCurrentlyViewing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n\n  let todaysDate = new Date();\n  const weekDateFormat = Math.floor(\n    new Date(todaysDate.getTime() + 7 * 24 * 60 * 60 * 1000) / 1000\n  );\n  const monthDateFormat = Math.floor(\n    new Date(\n      new Date(weekDateFormat * 1000).setMonth(\n        new Date(weekDateFormat * 1000).getMonth() + 1\n      )\n    ).getTime() / 1000\n  );\n  const yearDateFormat = Math.floor(\n    new Date(\n      new Date(monthDateFormat * 1000).setMonth(\n        new Date(monthDateFormat * 1000).getMonth() + 12\n      )\n    ).getTime() / 1000\n  );\n\n  // use pagination (scroll api) to get all game titles and year. Maybe get it every 24 hours using a cron job. Cache it locally and use that to autocomplete game titles. That's what we do internally.\n\n  const filterUniques = (list) => {\n    const uniques = [];\n    const filteredList = [];\n    list.map((game) => {\n      if (uniques.indexOf(game.game.name) === -1) {\n        uniques.push(game.game.name);\n        filteredList.push(game);\n      }\n    });\n    return filteredList;\n  };\n\n  useEffect(() => {\n    // Grab upcoming games based on current date filter\n    if (!twitchToken) return;\n    setLoading(true);\n    async function fetchData() {\n      let startDate;\n      let targetDate;\n\n      switch (currentFilter) {\n        case 'Month':\n          startDate = weekDateFormat;\n          targetDate = monthDateFormat;\n          break;\n        case 'Year':\n          startDate = monthDateFormat;\n          targetDate = yearDateFormat;\n          break;\n        default:\n          startDate = Math.floor(todaysDate.getTime() / 1000);\n          targetDate = weekDateFormat;\n          break;\n      }\n\n      try {\n        const retries = 3;\n        for (let i = 0; i < retries; i++) {\n          try {\n            const request = await axios.post(`${baseURL}/app/upcoming`, {\n              token: twitchToken,\n              currentDate: startDate,\n              targetDate,\n            });\n            setGames(filterUniques(request.data));\n            setLoading(false);\n            break;\n          } catch (error) {\n            console.log('Issue fetching data');\n          }\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    fetchData();\n  }, [currentFilter, twitchToken]);\n\n  // Handler to change the filter type (Week, Month, Year)\n  const changeFilterDate = (e) => {\n    setCurrentFilter(e.target.innerText);\n    setChangingFilter(false);\n  };\n\n  // Convert the YYYY-MM-DD to Month, Day, Year\n  const convertDate = (date) => {\n    let months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n\n    // Replace hypens with dashes to get correct date\n    // Hypens returned the date previous from current due to some weird Date bug\n    let now = new Date(date.replace(/-/g, '/'));\n    let currentDay = now.getDate();\n    let formattedDay;\n\n    // Give the numbered day the appropriate abbriviation\n    switch (currentDay) {\n      case 1:\n      case 21:\n      case 31:\n        formattedDay = currentDay + 'st';\n        break;\n      case 2:\n      case 22:\n        formattedDay = currentDay + 'nd';\n        break;\n      case 3:\n      case 23:\n        formattedDay = currentDay + 'rd';\n        break;\n      // Most days have the th ending (28th) so set as default\n      default:\n        formattedDay = currentDay + 'th';\n        break;\n    }\n    return (\n      months[now.getMonth()] + ' ' + formattedDay + ', ' + now.getFullYear()\n    );\n  };\n\n  return (\n    <div\n      onMouseOver={() => setCurrentlyViewing(true)}\n      onMouseOut={() => setCurrentlyViewing(false)}\n      className='main_row'\n    >\n      <div\n        className='main_row__filters'\n        onMouseLeave={() => setChangingFilter(false)}\n      >\n        <h2>Coming Soon</h2>\n        {/* Filter Type */}\n        <p\n          className='filters_filter'\n          onMouseOver={() => setChangingFilter(true)}\n        >\n          {currentFilter}{' '}\n          <FaAngleUp\n            size={10}\n            className={changingFilter ? 'arrow_active' : 'arrow'}\n          />\n        </p>{' '}\n        {changingFilter && (\n          <div className='filter_options'>\n            <ul>\n              <li\n                style={{\n                  backgroundColor: currentFilter == 'Week' ? 'white' : '',\n                  color: currentFilter == 'Week' ? 'black' : '',\n                }}\n                onClick={changeFilterDate}\n              >\n                Week\n              </li>\n              <li\n                style={{\n                  backgroundColor: currentFilter == 'Month' ? 'white' : '',\n                  color: currentFilter == 'Month' ? 'black' : '',\n                }}\n                onClick={changeFilterDate}\n              >\n                Month\n              </li>\n              <li\n                style={{\n                  backgroundColor: currentFilter == 'Year' ? 'white' : '',\n                  color: currentFilter == 'Year' ? 'black' : '',\n                }}\n                onClick={changeFilterDate}\n              >\n                Year\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n      <div className='main_row__row_posters'>\n        {games &&\n          !loading &&\n          games.map((game, i) => (\n            <div\n              className={`main_row__poster_container ${\n                currentlyViewing && 'dimmed'\n              }`}\n              onClick={() => setGameDetails(game.game)}\n              key={game.id}\n            >\n              <h4 className='main__poster_released'>\n                {convertDate(game.human)}\n              </h4>\n              <img\n                key={game.id}\n                className='main_poster'\n                src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.game.cover?.image_id}.jpg`}\n                alt={game.name}\n              />\n            </div>\n          ))}\n        {loading && (\n          <div className='main_row__loading_container'>\n            {[...Array(4)].map((item, i) => (\n              <div key={i} className='main_row__placeholder__wrapper'>\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MainRow;\n","import React, { useState, useEffect } from 'react';\nimport './TrendingRow.css';\nimport Placeholder from '../Placeholder/Placeholder';\nimport axios from 'axios';\n\nconst TrendingRow = ({ twitchToken, setGameDetails }) => {\n  const [games, setGames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  let currentDate = Math.floor(new Date().getTime() / 1000);\n  let trendingTitlesFetched = JSON.parse(sessionStorage.getItem('trending'));\n\n  useEffect(() => {\n    if (!twitchToken) return;\n    if (trendingTitlesFetched && trendingTitlesFetched.length > 0) {\n      setGames(trendingTitlesFetched);\n      setLoading(false);\n      return;\n    }\n    // Grab games from each genre\n    async function fetchData() {\n      setLoading(true);\n      try {\n        let trendingTitles = [];\n        const request = await axios.post(`${baseURL}/app/trending`, {\n          token: twitchToken,\n          currentDate: currentDate,\n        });\n\n        console.log(request);\n\n        const uniqueTitles = new Set();\n        request.data.filter(\n          (item) =>\n            !uniqueTitles.has(item.game.id) &&\n            uniqueTitles.add(item.game.id).add(item.game)\n        );\n\n        uniqueTitles.forEach(\n          (game) => typeof game == 'object' && trendingTitles.push(game)\n        );\n\n        trendingTitles.sort(\n          (a, b) =>\n            b.release_dates.findLast((dates) => dates.date) -\n              a.release_dates.findLast((dates) => dates.date) ||\n            b.hypes - a.hypes\n        );\n\n        setGames(trendingTitles.slice(0, 10));\n\n        sessionStorage.setItem(\n          'trending',\n          JSON.stringify(trendingTitles.slice(0, 10))\n        );\n        setLoading(false);\n        return request;\n      } catch (error) {\n        console.log(error);\n      }\n      setLoading(false);\n    }\n    fetchData();\n  }, [twitchToken]);\n\n  if (loading) return null;\n  // return (\n  //   <div className='row__loading_container'>\n  //     {[...Array(10)].map((item, i) => (\n  //       <div key={i} className='trending_row__placeholder__wrapper'>\n  //         <Placeholder key={i} delay={i} />\n  //       </div>\n  //     ))}\n  //   </div>\n  // );\n\n  return (\n    <div className='trending_row'>\n      <h2>TRENDING TITLES</h2>\n\n      <div className='trending_row__posters'>\n        {games.map((game, i) => (\n          <React.Fragment key={game.name}>\n            <div className='trending_row__poster_wrapper'>\n              <div className='trending_row__rank'>{i + 1}</div>\n              <div\n                className='trending_row__poster_container'\n                style={{\n                  marginLeft: (i == 9 && '160px') || (i == 0 && '65px'),\n                }}\n                onClick={() => setGameDetails(game)}\n              >\n                {' '}\n                {!loading && (\n                  <>\n                    <img\n                      loading='lazy'\n                      className='trending_row__poster'\n                      src={`https://images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\n                      alt={game.name}\n                    />\n                  </>\n                )}\n              </div>\n            </div>\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TrendingRow;\n","import React, { useState, useEffect } from 'react';\nimport './NewReleases.css';\nimport Placeholder from '../Placeholder/Placeholder';\nimport GamePreview from '../Row/GamePreview/GamePreview';\nimport axios from 'axios';\n\nconst NewReleases = ({ twitchToken, setGameDetails }) => {\n  const [games, setGames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const newReleases = [];\n\n  useEffect(() => {\n    if (!twitchToken) return;\n\n    async function fetchNewReleases() {\n      setLoading(true);\n\n      try {\n        // const scrape_request = await axios.get(`${baseURL}/steam/new_releases`);\n        // console.log(scrape_request);\n        return;\n        // const newReleasesData = await Promise.all(\n        //   newReleases.map(async (game) => {\n        //     const res = await axios.post(\n        //       `${baseURL}/app/search_trending_game`,\n        //       {\n        //         token: twitchToken,\n        //         gameName: game,\n        //       }\n        //     );\n        //     return res.data[0].game;\n        //   })\n        // );\n        // setGames(newReleasesData);\n        // setLoading(false);\n        // return newReleasesData;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchNewReleases();\n  }, [twitchToken]);\n\n  // Grab trailer video from selected game\n  // const fetchGameDetails = (game) => {\n  //   setGameDetails(game);\n  //   setCurrentlyOpen(game.name);\n  //   setCurrentGame(game);\n  // };\n\n  const closeGameDetails = () => {\n    // setCurrentlyOpen(null);\n    // setCurrentGame(null);\n  };\n\n  games?.sort((a, b) =>\n    a.rating_count > b.rating_count\n      ? -1\n      : b.rating_count > a.rating_count\n      ? 1\n      : 0\n  );\n\n  return '';\n\n  return (\n    <div className='new_releases_row'>\n      <h2>NEW RELEASES</h2>\n\n      <div className='new_releases_row__posters'>\n        {games.map((game, i) => (\n          <React.Fragment key={game.name}>\n            <div className='new_releases_row__poster_wrapper'>\n              <div\n                className='new_releases_row__poster_container'\n                onClick={() => setGameDetails(game)}\n              >\n                {' '}\n                {!loading && (\n                  <>\n                    <img\n                      loading='lazy'\n                      className='new_releases_row__poster'\n                      src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover?.image_id}.jpg`}\n                      alt={game.name}\n                    />\n                  </>\n                )}\n              </div>\n              {/* {currentlyOpen === game.name && (\n                <GamePreview\n                  game={currentGame}\n                  displayDetails={displayDetails}\n                  hideDetails={closeGameDetails}\n                />\n              )} */}\n            </div>\n          </React.Fragment>\n        ))}\n        {loading && (\n          <div className='row__loading_container'>\n            {[...Array(10)].map((item, i) => (\n              <div key={i} className='new_releases_row__placeholder__wrapper'>\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NewReleases;\n","// Get todays date based off current timezone\nlet todaysDate = new Date();\nlet igdbDate = Math.floor(todaysDate.getTime() / 1000);\nlet filterDate = igdbDate * 1000;\n\n// List of endpoints for the Rawg.io API\nconst requests = [\n  {\n    requestId: 'fetchAdventureTitles',\n    genreId: 31,\n    title: 'ACTION/ADVENTURE GAMES',\n  },\n  {\n    requestId: 'fetchArcadeTitles',\n    genreId: 33,\n    title: 'ARCADE GAMES',\n  },\n  {\n    requestId: 'fetchMusicTitles',\n    genreId: 7,\n    title: 'MUSIC GAMES',\n  },\n  {\n    requestId: 'fetchHackTitles',\n    genreId: 25,\n    title: 'HACK/SLASH TITLES',\n  },\n  {\n    requestId: 'fetchFightingTitles',\n    genreId: 4,\n    title: 'FIGHTING GAMES',\n  },\n  {\n    requestId: 'fetchIndieTitles',\n    genreId: 32,\n    title: 'INDIE GAMES',\n  },\n  {\n    requestId: 'fetchMassivelyMultiplayerTitles',\n    genreId: 36,\n    title: 'MOBA GAMES',\n  },\n  {\n    requestId: 'fetchPlatformerTitles',\n    genreId: 8,\n    title: 'PLATFORMER GAMES',\n  },\n  {\n    requestId: 'fetchPuzzleTitles',\n    genreId: 9,\n    title: 'PUZZLE GAMES',\n  },\n  {\n    requestId: 'fetchRacingTitles',\n    genreId: 10,\n    title: 'RACING GAMES',\n  },\n  {\n    requestId: 'fetchRPGTitles',\n    genreId: 12,\n    title: 'RPG GAMES',\n  },\n  {\n    requestId: 'fetchShooterTitles',\n    genreId: 5,\n    title: 'SHOOTER GAMES',\n  },\n  {\n    requestId: 'fetchSimulationTitles',\n    genreId: 13,\n    title: 'SIMULATION GAMES',\n  },\n  {\n    requestId: 'fetchSportsTitles',\n    genreId: 14,\n    title: 'SPORTS GAMES',\n  },\n  {\n    requestId: 'fetchStrategy',\n    genreId: (11, 15),\n    title: 'STRATEGY GAMES',\n  },\n];\n\nexport default requests;\n","import { useState, useEffect, memo, lazy, Suspense } from \"react\";\n\n// Component Imports\nimport Row from \"../Row/Row\";\nimport Banner from \"../Banner/Banner\";\nimport Nav from \"../Nav/Nav\";\nimport MainRow from \"../MainRow/MainRow\";\nimport TrendingRow from \"../TrendingRow/TrendingRow\";\nimport NewReleases from \"../NewReleases/NewReleases\";\n\n// File Imports\nimport SpotifyPlayback from \"../SpotifyPlayback/SpotifyPlayback\";\nimport useSpotifyAuth from \"../../hooks/useSpotifyAuth\";\nimport useSteamAuth from \"../../hooks/useSteamAuth\";\nimport useFetchGenres from \"../../hooks/useFetchGenres\";\nimport { SlOptions } from \"react-icons/sl\";\nimport Placeholder from \"../Placeholder/Placeholder\";\n\nconst GameDetails = lazy(() => import(\"../GameDetails/GameDetails\"));\nconst Notification = lazy(() => import(\"../Notification/Notification\"));\nconst UserCollection = lazy(() =>\n  import(\"../UserCollectionPage/UserCollection\")\n);\n\nconst code = new URLSearchParams(window.location.search).get(\"code\");\nconst windowUrl = window.location.search;\nconst id = windowUrl.split(\"?\")[1];\n\nconst Dashboard = ({\n  currentUser,\n  twitchToken,\n  currentProfile,\n  currentCollection,\n  userNotes,\n  updateCollection,\n  selectProfile,\n  updateGameStatus,\n  fetchGame,\n  logoutUser,\n  gameStatus,\n  resetGameStatus,\n  changeProfile,\n}) => {\n  const allGenres = useFetchGenres();\n  const [displayNotification, setDisplayNotification] = useState(false);\n  const [notification, setNotification] = useState({ status: \"\", message: \"\" });\n\n  // Spotify States\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [playAudio, setPlayAudio] = useState(false);\n  const [rowsLoading, setRowsLoading] = useState();\n\n  // User states\n  const [viewingCollection, setViewingCollection] = useState(false);\n\n  // Row States\n  const [currentGameOpen, setCurrentGameOpen] = useState(null);\n  const [viewingGameOptions, setViewingGameOptions] = useState(false);\n  const [hoveringGame, setHoveringGame] = useState(null);\n\n  // Search States\n  const [gameDetails, setGameDetails] = useState(null);\n\n  // Local Variables\n  const spotifyAccessToken = useSpotifyAuth(code);\n  const steamCollection = useSteamAuth(id);\n\n  useEffect(() => {\n    if (!currentGameOpen) document.body.style.overflow = \"auto\";\n  }, []);\n\n  const resetGame = () => {\n    setHoveringGame(null);\n    resetGameStatus();\n  };\n\n  const openGameWindow = (game) => {\n    console.log(game);\n    setCurrentGameOpen(game.id);\n    document.body.style.overflow = \"hidden\";\n  };\n\n  const closeGameWindow = () => {\n    document.body.style.overflow = \"auto\";\n    setCurrentGameOpen(null);\n  };\n\n  const seeGameOptions = () => {\n    setViewingGameOptions(true);\n  };\n\n  const playTrack = (track) => {\n    setCurrentTrack(track);\n  };\n\n  const toProfileSelection = () => {\n    localStorage.removeItem(\"profile\");\n    window.location.reload();\n  };\n\n  if (currentProfile) {\n    if (gameDetails !== null) {\n      return (\n        <>\n          <Suspense fallback={<>...</>}>\n            <GameDetails\n              setNotification={(status, message) =>\n                setNotification({ status, message })\n              }\n              game={gameDetails}\n              closeDetails={() => setGameDetails(null)}\n              twitchToken={twitchToken}\n              updateGameStatus={(action, game) =>\n                updateGameStatus(action, game)\n              }\n              activeProfile={currentProfile}\n              currentCollection={currentCollection}\n            />\n            <Notification\n              notification={notification}\n              displayNotification={displayNotification}\n              hideNotification={() => {\n                setNotification({ message: \"\", status: \"\" });\n              }}\n            />\n          </Suspense>\n        </>\n      );\n    }\n\n    if (viewingCollection)\n      return (\n        <Suspense fallback={<>...</>}>\n          <UserCollection\n            collection={currentCollection}\n            activeProfile={currentProfile}\n            backToHome={() => setViewingCollection(false)}\n            currentTrack={currentTrack}\n            playTrack={playTrack}\n            isPlaying={playAudio}\n            pausePlayback={() => setPlayAudio(false)}\n            resumePlayback={() => setPlayAudio(true)}\n            spotifyToken={spotifyAccessToken}\n            updateGameStatus={(action, game) => updateGameStatus(action, game)}\n            updateCollection={updateCollection}\n            userNotes={userNotes}\n          />\n        </Suspense>\n      );\n\n    return (\n      <div className=\"App\">\n        <Nav\n          currentUser={currentUser}\n          activeProfile={currentProfile}\n          changeUser={changeProfile}\n          onLogout={logoutUser}\n          fetchSubmittedGame={fetchGame}\n          toProfilePage={toProfileSelection}\n          selectProfile={selectProfile}\n          spotifyToken={spotifyAccessToken}\n          twitchToken={twitchToken}\n          saveEdit={() => console.log(\"saving edit\")}\n          updateCollection={updateCollection}\n          currentCollection={currentCollection}\n          viewCollection={() => setViewingCollection(true)}\n        />\n\n        <Banner\n          setGameDetails={(id) => setGameDetails(id)}\n          addGame={(game) => updateGameStatus(\"ADD\", game)}\n          activeProfile={currentProfile}\n        />\n        <MainRow\n          twitchToken={twitchToken}\n          setGameDetails={(game) => setGameDetails(game)}\n        />\n\n        <NewReleases\n          twitchToken={twitchToken}\n          setGameDetails={(game) => setGameDetails(game)}\n        />\n\n        <TrendingRow\n          twitchToken={twitchToken}\n          setGameDetails={(game) => setGameDetails(game)}\n        />\n\n        {currentGameOpen && (\n          <>\n            <h1 className=\"row__preview_close\" onClick={closeGameWindow}>\n              X\n            </h1>\n          </>\n        )}\n        <div\n          className={`${currentGameOpen !== null ? \"game_preview__modal\" : \"\"}`}\n        />\n\n        {allGenres.genreGamesList.length > 0 ? (\n          allGenres.genreGamesList.map((request) => (\n            <Row\n              key={Object.keys(request)}\n              activeProfile={currentProfile}\n              spotifyToken={spotifyAccessToken}\n              genreDetails={Object.entries(request)}\n              playTrack={playTrack}\n              currentTrack={currentTrack}\n              setGameDetails={(game) => setGameDetails(game)}\n              resumePlayback={(e) => setPlayAudio(true)}\n              pausePlayback={(e) => setPlayAudio(false)}\n              isPlaying={playAudio}\n              currentGameOpen={currentGameOpen}\n              openGame={(game) => openGameWindow(game)}\n              closeGameWindow={closeGameWindow}\n              G\n              updateGameStatus={(action, game) =>\n                updateGameStatus(action, game)\n              }\n              setNotification={(status, message) =>\n                setNotification({ status, message })\n              }\n              loading={rowsLoading}\n              hoverGame={(game) => setHoveringGame(game)}\n              hoverAway={() => resetGame()}\n              currentHover={hoveringGame}\n              currentCollection={currentCollection}\n              gameStatus={gameStatus}\n            />\n          ))\n        ) : (\n          <div className=\"row__loading_container\">\n            {[...Array(10)].map((item, i) => (\n              <div key={i} className=\"row__placeholder__wrapper\">\n                <Placeholder key={i} delay={i} />\n              </div>\n            ))}\n          </div>\n        )}\n\n        {spotifyAccessToken && (\n          <SpotifyPlayback\n            spotifyToken={spotifyAccessToken}\n            playAudio={playAudio}\n            beginPlayback={(e) => setPlayAudio(true)}\n            pausePlayback={(e) => setPlayAudio(false)}\n            trackUri={currentTrack?.uri}\n          />\n        )}\n\n        <Notification\n          notification={notification}\n          displayNotification={displayNotification}\n          hideNotification={() => {\n            setNotification({ message: \"\", status: \"\" });\n          }}\n        />\n      </div>\n    );\n  }\n};\n\nexport default memo(Dashboard);\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport requestsIGDB from '../requestsIGDB';\n\nexport default function useFetchGenres() {\n  const existingToken = localStorage.getItem('twitch_auth');\n  const [genreGamesList, setGenreGamesList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const currentDate = new Date();\n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      const request = await axios.get(`${baseURL}/app/get_genres`);\n      const last_updated = new Date(request.data.last_updated);\n      if (currentDate > last_updated.setDate(last_updated.getDate() + 1)) {\n        return updateGenresAPI();\n      } else {\n        setGenreGamesList(request.data[0].genres_list);\n        setIsLoading(false);\n        return request.data;\n      }\n    };\n\n    const updateGenresAPI = async () => {\n      if (!existingToken) return;\n\n      const genreTitles = await Promise.all(\n        requestsIGDB.map((genre) => {\n          return axios.post(`${baseURL}/app/game_genre`, {\n            token: existingToken,\n            genreId: genre.genreId,\n            genreTitle: genre.title,\n          });\n        })\n      );\n      const completeGenreList = genreTitles.map((genre) => genre.data);\n      updateGenresCollection(completeGenreList);\n      setIsLoading(false);\n      return completeGenreList;\n    };\n\n    fetchGenres();\n  }, [existingToken]);\n\n  const updateGenresCollection = async (list) => {\n    const request = await axios.post(`${baseURL}/app/update_genres`, {\n      genreList: list,\n      date: currentDate,\n    });\n    setGenreGamesList(request.data.genres_list);\n    return request.data.genres_list;\n  };\n\n  return { genreGamesList, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useSpotifyAuth(code) {\n  const [accessToken, setAccessToken] = useState();\n  const [refreshToken, setRefreshToken] = useState();\n  const [expiresIn, setExpiresIn] = useState();\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const prevToken = sessionStorage.getItem('spotify_auth');\n\n  useEffect(() => {\n    if (prevToken) {\n      console.log(prevToken);\n      setAccessToken(JSON.parse(prevToken));\n      return;\n    }\n    if (!code) return;\n    const spotifyAuthentication = async () => {\n      try {\n        const request = await axios.post(\n          `${baseURL}/app/spotify_authentication`,\n          {\n            code,\n            baseURL,\n          }\n        );\n        setAccessToken(request.data.tokenRequest.body.access_token);\n        setRefreshToken(request.data.tokenRequest.body.refresh_token);\n        setExpiresIn(request.data.tokenRequest.body.expires_in);\n        sessionStorage.setItem(\n          'spotify_auth',\n          JSON.stringify(request.data.tokenRequest.body.access_token)\n        );\n        window.history.pushState({}, null, '/');\n      } catch (error) {\n        console.log(error);\n        window.location = '/';\n      }\n    };\n    spotifyAuthentication();\n  }, [code]);\n\n  useEffect(() => {\n    if (!refreshToken || !expiresIn) return;\n    const refreshSpotifyToken = async () => {\n      try {\n        const request = await axios.post(`${baseURL}/app/refresh_token`, {\n          refreshToken,\n          baseURL,\n        });\n        setAccessToken(request.data.body.body.access_token);\n        setRefreshToken(request.data.body.body.refresh_token);\n        setExpiresIn(request.data.body.body.expires_in);\n      } catch (error) {\n        console.log('REFRESH TOKEN ERROR');\n        window.location = '/';\n      }\n    };\n    const interval = setInterval(() => {\n      refreshSpotifyToken();\n    }, (expiresIn - 60) * 1000);\n\n    return () => clearTimeout(interval);\n  }, [refreshToken, expiresIn]);\n\n  return accessToken;\n}\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useSteamAuth(id) {\n  const [steamCollection, setSteamCollection] = useState([]);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n\n  useEffect(() => {\n    if (!id) return;\n    const fetchUserLibrary = async () => {\n      try {\n        const request = await axios.get(`${baseURL}/steam/get_owned_games`, {\n          params: {\n            id,\n          },\n        });\n        localStorage.setItem('steamID', request.config.params.id);\n        console.log(request.data);\n        setSteamCollection(request.data);\n        window.history.pushState({}, null, '/');\n      } catch (error) {\n        console.log(error);\n        console.log('GET STEAM COLLECTION ERROR');\n      }\n    };\n    fetchUserLibrary();\n  }, [id]);\n\n  return steamCollection;\n}\n","import React, { useState } from 'react';\nimport './ProfileEditor.css';\n\nconst SearchList = ({ list, selectGame }) => {\n  return (\n    <div className='search_list_container'>\n      <ul className='search_list'>\n        {list.slice(0, 5).map((game) => (\n          <li className='search_list_item' onClick={() => selectGame(game)}>\n            <img className='item_thumbnail' src={game.cover.url} />\n            <p className='item_title'>{game.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchList;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport \"./ProfileEditor.css\";\nimport SearchList from \"./SearchList\";\nimport axios from \"axios\";\nimport { MdEdit } from \"react-icons/md\";\nimport { SketchPicker } from \"react-color\";\nimport { FaAngleDown } from \"react-icons/fa\";\n\nconst ProfileEditor = (props) => {\n  document.body.style.overflow = \"hidden\";\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const currentProfile = props.currentProfile;\n  const isAdmin = currentProfile.isAdmin;\n  const [loading, setLoading] = useState(false);\n  const [searchLoading, setSearchLoading] = useState(false);\n  // Current Profile Name\n  const currentProfileName =\n    localStorage.getItem(\"profile\") || currentProfile.name;\n  const [nameValue, setNameValue] = useState(currentProfileName);\n  // Title Input State and Ref\n  const titleRef = useRef(\"\");\n  const [titleValue, setTitleValue] = useState(currentProfile.favorite_game);\n  const [titleId, setTitleId] = useState(0);\n  const [titleImage, setTitleImage] = useState(\"\");\n  const [titleList, setTitleList] = useState([]);\n  let searchValue = \"\";\n  // Console Input State and Ref\n  const consoleRef = useRef(\"\");\n  const [consoleValue, setConsoleValue] = useState(\n    currentProfile.favorite_console\n  );\n  // Profile form states\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentAvatar, setCurrentAvatar] = useState(currentProfile.avatar);\n  const [imgFilePreview, setImgFilePreview] = useState(null);\n  const fileInputRef = useRef(\"\");\n  const [imgLink, setImgLink] = useState(\"\");\n  const [usingImgLink, setUsingImgLink] = useState(false);\n  const [changingAvatar, setChangingAvatar] = useState(false);\n  // Color states\n  const [changingColor, setChangingColor] = useState(false);\n  const [color, setColor] = useState(currentProfile.color);\n  // Genre states\n  const genreRef = useRef(\"\");\n  const [changingGenre, setChangingGenre] = useState(false);\n  const [currentGenre, setCurrentGenre] = useState(\n    currentProfile.favorite_genre\n  );\n\n  const genreList = [\n    \"Action\",\n    \"Adventure\",\n    \"Arcade\",\n    \"Card & Board\",\n    \"Family\",\n    \"Fighting\",\n    \"Indie\",\n    \"MMO (Massive Multiplayer)\",\n    \"Platformer\",\n    \"Puzzle\",\n    \"Racing\",\n    \"RPG\",\n    \"Shooter\",\n    \"Sports\",\n    \"Strategy\",\n  ];\n\n  useEffect(() => {\n    if (\n      titleValue == \"\" ||\n      titleValue == currentProfile.favorite_game ||\n      searchLoading\n    ) {\n      setTitleList([]);\n      return;\n    }\n    const delaySearch = setTimeout(() => {\n      setSearchLoading(true);\n      const fetchSearchedGame = async () => {\n        const request = await axios.post(`${baseURL}/app/search_game`, {\n          gameName: titleValue,\n          token: props.twitchToken,\n        });\n        setTitleList(request.data);\n        setSearchLoading(false);\n      };\n      fetchSearchedGame();\n    }, 500);\n\n    return () => clearTimeout(delaySearch);\n  }, [titleValue]);\n\n  // Listen for escape key press to close out color palette\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        setChangingColor(false);\n      }\n    };\n    window.addEventListener(\"keydown\", handleEsc);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleEsc);\n    };\n  }, []);\n\n  // Listen for clicks outside of genre dropdown box\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (genreRef.current && !genreRef.current.contains(event.target)) {\n        setChangingGenre(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [genreRef]);\n\n  const selectGameHandler = (game) => {\n    setTitleValue(game.name);\n    setTitleId(game.id);\n    setTitleImage(\n      `//images.igdb.com/igdb/image/upload/t_cover_big/${game.cover?.image_id}.jpg`\n    );\n    setTitleList([]);\n  };\n\n  const titleBlurHandler = () => {\n    if (titleList.length > 0) {\n    }\n  };\n\n  const colorChangeHandler = (color) => setColor(color.hex);\n  const genreChangeHandler = (genre) => {\n    setCurrentGenre(genre);\n    setChangingGenre(false);\n  };\n\n  // Determine cancel button functionality\n  const cancelButtonHandler = () => {\n    // If user is changing avatars, return to editing profile\n    if (changingAvatar) {\n      setChangingAvatar(false);\n      setUsingImgLink(false);\n    }\n    // If the user is editing profile, return to all profiles\n    else {\n      props.viewAllProfiles();\n    }\n  };\n\n  // Delete single profile\n  const deleteProfileHandler = async () => {\n    setLoading(true);\n    try {\n      const request = await axios.delete(`${baseURL}/app/delete_profile`, {\n        data: { email: props.userEmail, name: currentProfile.name },\n      });\n      props.saveEdit(request.data.response);\n      props.viewAllProfiles();\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n    setLoading(false);\n  };\n\n  // Avatar profile image handling\n  const updateAvatar = async (e, method) => {\n    setLoading(true);\n    // Append email and profile name to find correct profile to update\n    const data = new FormData();\n    data.append(\"email\", props.userEmail);\n    data.append(\"name\", currentProfile.name);\n    // User uploads image\n    if (method == \"file\") {\n      data.append(\"avatar\", e.target.files[0]);\n      try {\n        const request = await axios.post(\n          `${baseURL}/app/update_avatar_file`,\n          data\n        );\n        setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\n      } catch (e) {\n        console.log(e);\n        return e;\n      }\n      setLoading(false);\n    }\n\n    // If user uses a link to an image\n    else {\n      const data = {\n        email: props.userEmail,\n        name: currentProfile.name,\n        avatar: imgLink,\n      };\n      try {\n        const request = await axios.post(\n          `${baseURL}/app/update_avatar_link`,\n          data\n        );\n        setCurrentAvatar(imgLink);\n      } catch (e) {\n        console.log(e);\n        return e;\n      }\n      setLoading(false);\n    }\n  };\n\n  // If user isn't using the link, display the link modal\n  // Or else submit the link url and close the modal\n  const determineLinkAction = (e) => {\n    if (!usingImgLink) {\n      setUsingImgLink(true);\n    } else {\n      updateAvatar(e, \"link\");\n    }\n  };\n\n  // Update Profile in Mongo Database\n  const saveUserData = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    // Make inputs OPTIONAL\n    const userData = {\n      email: props.userEmail,\n      originalName: currentProfile.name,\n      newName: nameValue.trim(),\n      newColor: color,\n      favoriteGenre: currentGenre ? currentGenre.trim() : \"Action\",\n      favoriteGame: titleValue ? titleValue.trim() : \"None\",\n      gameId: titleId,\n      imageURL: titleImage,\n      favoriteConsole: consoleValue ? consoleValue.trim() : \"None\",\n      twitchToken: props.twitchToken,\n    };\n\n    try {\n      const request = await axios.post(\n        `${baseURL}/app/update_user_profile`,\n        userData\n      );\n\n      localStorage.setItem(\"user\", request.data.response.user.email);\n      localStorage.setItem(\"profile\", request.data.response.profile.name);\n      setStatusMessage(request.data.message);\n      props.saveEdit(request.data.response);\n      props.viewAllProfiles();\n    } catch (error) {\n      setStatusMessage(error);\n    }\n    setLoading(false);\n  };\n\n  // Loading spinner\n  if (loading) {\n    return (\n      <div className=\"profile_edit__container\">\n        <div className=\"profile_edit__header\">\n          <h3>GAMEFLIX</h3>\n        </div>\n        <div className=\"profile_edit__form_wrapper\">\n          <div className=\"profile__loading\">\n            <div className=\"profile__loading_spinner\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"profile_edit__container\">\n      <div className=\"profile_edit__header\">\n        <h3>GAMEFLIX</h3>\n      </div>\n      <div className=\"profile_edit__form_wrapper\">\n        <h3>{currentProfile !== true ? \"Edit Profile\" : \"Create Profile\"}</h3>\n        <div\n          className={`form_container ${\n            changingAvatar && \"avatar_select_container\"\n          }`}\n        >\n          {/* USER AVATAR CONTAINER */}\n          <div\n            style={{ paddingTop: changingAvatar && \"10px\" }}\n            className=\"form_avatar_container\"\n          >\n            <img\n              className={`current_avatar ${changingAvatar && \"avatar_select\"}`}\n              style={{\n                backgroundColor: color ? color : currentProfile.color,\n              }}\n              src={currentAvatar}\n            />\n            {!changingAvatar && (\n              <span\n                className=\"current_avatar_edit\"\n                onClick={() => setChangingAvatar(true)}\n              >\n                <MdEdit style={{ height: \"100%\" }} />\n              </span>\n            )}\n          </div>\n          {/* USER FORM */}\n          <div className=\"form_right\">\n            {!changingAvatar && (\n              <form className=\"profile_edit__form\">\n                {/* NAME */}\n                <input\n                  className=\"name_input\"\n                  onChange={(e) => setNameValue(e.target.value)}\n                  value={nameValue}\n                  autoFocus\n                />\n                {/* COLOR */}\n                <p>Color</p>\n                <input\n                  className=\"color_input\"\n                  style={{\n                    color: color,\n                  }}\n                  onChange={(e) => setColor(e.target.value)}\n                  value={color}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setChangingColor(!changingColor)}\n                  style={{\n                    backgroundColor: color,\n                  }}\n                />\n                {changingColor && (\n                  <SketchPicker\n                    color={color}\n                    onChangeComplete={colorChangeHandler}\n                    className=\"profile_color_palette\"\n                  />\n                )}\n              </form>\n            )}\n            {/* USER PERSONAL */}\n            <div\n              className={`form_personal ${changingAvatar && \"personal_avatar\"}`}\n            >\n              <h4\n                style={{\n                  textAlign: changingAvatar ? \"center\" : \"left\",\n                }}\n              >\n                {!changingAvatar ? \"Your Playstyle\" : \"Current\"}\n              </h4>\n              {/* AVATAR FILE */}\n              {changingAvatar && (\n                <>\n                  <div\n                    className={`upload_avatar_actions ${\n                      usingImgLink && \"img_link_actions\"\n                    }`}\n                  >\n                    <input\n                      className=\"upload_file_input\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      style={{ display: \"none\" }}\n                      multiple={false}\n                      ref={fileInputRef}\n                      onChange={(e) => updateAvatar(e, \"file\")}\n                    />\n\n                    {!usingImgLink && (\n                      <>\n                        <button onClick={() => fileInputRef.current.click()}>\n                          Upload\n                        </button>\n                        <p>OR</p>\n                      </>\n                    )}\n                    {/* AVATAR URL */}\n                    <button onClick={determineLinkAction}>\n                      {!usingImgLink ? \"Enter link\" : \"Submit\"}\n                    </button>\n                    {usingImgLink && (\n                      <input\n                        className={`console_input ${\n                          changingAvatar && \"img_input\"\n                        }`}\n                        placeholder={\"Enter link to image or gif\"}\n                        value={imgLink}\n                        onChange={(e) => setImgLink(e.target.value)}\n                      />\n                    )}\n                  </div>\n                </>\n              )}\n              {/* TITLE */}\n              {!changingAvatar && (\n                <>\n                  <p className=\"form_personal_title\">Favorite Title</p>\n                  <input\n                    ref={titleRef}\n                    value={titleValue}\n                    className=\"title_input\"\n                    onBlur={titleBlurHandler}\n                    onChange={(e) => {\n                      titleRef.current = titleValue;\n                      setTitleValue(e.target.value);\n                    }}\n                  />\n                  {searchLoading && (\n                    <div className=\"profile__search_loading\">\n                      <div className=\"profile__search_loading_spinner\" />\n                    </div>\n                  )}\n                  {titleList.length > 0 && titleValue !== \"\" && (\n                    <SearchList\n                      list={titleList}\n                      selectGame={selectGameHandler}\n                    />\n                  )}\n                </>\n              )}\n              {/* CONSOLE */}\n              {!changingAvatar && (\n                <>\n                  <p className=\"form_personal_console\">Favorite Console</p>\n                  <input\n                    ref={titleRef}\n                    value={consoleValue}\n                    onChange={(e) => {\n                      consoleRef.current = consoleValue;\n                      setConsoleValue(e.target.value);\n                    }}\n                    className={`console_input ${changingAvatar && \"img_input\"}`}\n                    placeholder={\n                      changingAvatar ? \"https://www.example.com\" : \"\"\n                    }\n                  />\n                </>\n              )}\n              {/* GENRE */}\n              <div className=\"genre_dropdown\">\n                {!changingAvatar && (\n                  <>\n                    <p className=\"form_personal_genre\">Favorite Genre</p>\n                    <button onClick={() => setChangingGenre(!changingGenre)}>\n                      {currentGenre !== undefined\n                        ? `${currentGenre}`\n                        : \"Action\"}{\" \"}\n                      <FaAngleDown className=\"genre_arrow\" />\n                    </button>\n                  </>\n                )}\n                {/* <FaAngleDown className='genre_arrow' /> */}\n                {changingGenre && (\n                  <div ref={genreRef} className=\"genre_dropdown_content\">\n                    {genreList.map((genre) => (\n                      <span\n                        onClick={() => genreChangeHandler(genre)}\n                        key={genre}\n                      >\n                        {genre}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* FORM ACTIONS */}\n        <div className=\"form_actions\">\n          {!changingAvatar && (\n            <button className=\"save_btn\" onClick={saveUserData}>\n              Save\n            </button>\n          )}\n          <button className=\"cancel_btn\" onClick={cancelButtonHandler}>\n            {!changingAvatar ? \"Cancel\" : \"Back\"}\n          </button>\n          {!isAdmin && (\n            <button\n              className=\"delete_profile_btn justify-start\"\n              onClick={deleteProfileHandler}\n            >\n              Delete Profile\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileEditor;\n","import React, { useEffect } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport './SpotifyPlayback.css';\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\n});\n\nconst activeProfile = localStorage.getItem('profile');\n\nconst SpotifyPlayback = ({\n  trackUri,\n  playAudio,\n  beginPlayback,\n  pausePlayback,\n  spotifyToken,\n}) => {\n  useEffect(() => {\n    spotifyApi.setAccessToken(spotifyToken);\n  }, [spotifyToken]);\n\n  useEffect(() => {\n    beginPlayback();\n  }, [trackUri]);\n\n  if (!spotifyToken) return;\n  return (\n    <>\n      <div className='playback_container'>\n        <SpotifyPlayer\n          token={spotifyToken}\n          callback={(state) => {\n            if (!state.isPlaying) pausePlayback();\n          }}\n          uris={trackUri ? [trackUri] : []}\n          play={playAudio}\n          styles={{\n            color: 'white',\n            bgColor: 'rgba(0,0,0,0.8)',\n            sliderColor: activeProfile.color,\n            trackArtistColor: 'white',\n            trackNameColor: activeProfile.color,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SpotifyPlayback;\n"],"names":["delay","className","style","animationDelay","onClick","e","stopPropagation","GamePreview","lazy","activeProfile","spotifyToken","genreDetails","playTrack","currentTrack","setGameDetails","resumePlayback","pausePlayback","isPlaying","currentGameOpen","closeGameWindow","openGame","updateGameStatus","setNotification","loading","hoverGame","hoverAway","currentHover","currentCollection","gameStatus","useState","currentGame","setCurrentGame","baseURL","process","currentPlaylist","setCurrentPlaylist","viewingSoundtrack","setViewingSoundtrack","viewingPreview","setViewingPreview","playlistLoading","setPlaylistLoading","genreTitle","genreList","fetchGameOST","game","axios","params","name","token","request","data","status","console","log","id","tracks","checkGameOwned","some","item","determineESRB","age_ratings","src","rpRating","hasRating","filter","rating","category","length","alt","eRating","tRating","mRating","map","undefined","cover","zIndex","onMouseOver","onMouseLeave","display","fetchGameDetails","viewGameSoundtrack","closeGameSoundtrack","track","color","fontWeight","title","split","selectTrackHandler","transformStyle","image_id","Suspense","fallback","gameCover","ratingImage","closeGame","Array","i","isLoading","setIsLoading","bannerGamesList","setBannerGamesList","serverError","setServerError","twitchToken","localStorage","getItem","fetchData","selectedGame","Math","floor","random","useEffect","displayNewBanner","newGame","addGame","bannerGame","useFetchBanner","str","n","hasArt","artworks","exists","collection","backgroundSize","backgroundImage","backgroundPosition","summary","substr","size","SPOTIFY_AUTH_URL","props","allProfiles","handleEsc","event","keyCode","closeNavDropdown","window","addEventListener","removeEventListener","sort","a","b","user","changeProfile","changeUserHandler","avatar","toProfilePage","editProfile","viewCollection","editAccount","href","to","logoutHandler","closeAccountSettings","setLoggedUser","currentUser","deletingAccount","setDeletingAccount","updateStatus","setUpdateStatus","email","emailValue","setEmailValue","newEmailValue","setNewEmailValue","changingEmail","setChangingEmail","password","passwordValue","setPasswordValue","hidePassword","setHidePassword","newPasswordValue","setNewPasswordValue","changingPassword","setChangingPassword","hiddenPassword","replace","updateEmail","originalEmail","newEmail","type","message","deleteAccountHandler","_id","location","removeItem","height","fontSize","marginLeft","onChange","target","value","placeholder","autoFocus","justifyContent","displayNav","setDisplayNav","displayDropdown","setDisplayDropdown","displaySearch","setDisplaySearch","searchRef","useRef","editingProfile","setEditingProfile","editingAccount","setEditingAccount","profile","scrollNavListener","scrollY","cancelEdit","document","body","overflowY","ProfileEditor","currentProfile","userEmail","viewAllProfiles","saveEdit","getProfile","test","selectProfile","onSubmit","preventDefault","searchValue","current","trim","fetchSubmittedGame","ref","defaultValue","searchedGame","onBlur","defaultAvatar","transform","changeUser","profiles","onLogout","updateCollection","games","setGames","currentFilter","setCurrentFilter","changingFilter","setChangingFilter","currentlyViewing","setCurrentlyViewing","setLoading","todaysDate","Date","weekDateFormat","getTime","monthDateFormat","setMonth","getMonth","yearDateFormat","filterUniques","list","uniques","filteredList","indexOf","push","startDate","targetDate","retries","currentDate","changeFilterDate","innerText","convertDate","date","formattedDay","now","currentDay","getDate","getFullYear","onMouseOut","backgroundColor","human","trendingTitlesFetched","JSON","parse","sessionStorage","trendingTitles","uniqueTitles","Set","has","add","forEach","release_dates","findLast","dates","hypes","slice","setItem","stringify","fetchNewReleases","rating_count","requestId","genreId","GameDetails","Notification","UserCollection","code","URLSearchParams","search","get","Dashboard","userNotes","fetchGame","logoutUser","resetGameStatus","allGenres","existingToken","genreGamesList","setGenreGamesList","fetchGenres","last_updated","setDate","updateGenresAPI","genres_list","Promise","all","requestsIGDB","genre","genreTitles","completeGenreList","updateGenresCollection","useFetchGenres","displayNotification","notification","setCurrentTrack","playAudio","setPlayAudio","rowsLoading","viewingCollection","setViewingCollection","setCurrentGameOpen","hoveringGame","setHoveringGame","gameDetails","spotifyAccessToken","accessToken","setAccessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","prevToken","spotifyAuthentication","tokenRequest","access_token","refresh_token","expires_in","history","pushState","refreshSpotifyToken","interval","setInterval","clearTimeout","useSpotifyAuth","steamCollection","setSteamCollection","fetchUserLibrary","config","useSteamAuth","overflow","closeDetails","action","hideNotification","backToHome","reload","Object","entries","openGameWindow","G","keys","SpotifyPlayback","beginPlayback","trackUri","uri","memo","selectGame","url","isAdmin","searchLoading","setSearchLoading","currentProfileName","nameValue","setNameValue","titleRef","favorite_game","titleValue","setTitleValue","titleId","setTitleId","titleImage","setTitleImage","titleList","setTitleList","consoleRef","favorite_console","consoleValue","setConsoleValue","setStatusMessage","currentAvatar","setCurrentAvatar","fileInputRef","imgLink","setImgLink","usingImgLink","setUsingImgLink","changingAvatar","setChangingAvatar","changingColor","setChangingColor","setColor","genreRef","changingGenre","setChangingGenre","favorite_genre","currentGenre","setCurrentGenre","delaySearch","setTimeout","fetchSearchedGame","gameName","handleClickOutside","contains","deleteProfileHandler","response","updateAvatar","method","FormData","append","files","URL","createObjectURL","saveUserData","userData","originalName","newName","newColor","favoriteGenre","favoriteGame","gameId","imageURL","favoriteConsole","paddingTop","onChangeComplete","hex","textAlign","accept","multiple","click","genreChangeHandler","spotifyApi","SpotifyWebApi","clientId","callback","state","uris","play","styles","bgColor","sliderColor","trackArtistColor","trackNameColor"],"sourceRoot":""}