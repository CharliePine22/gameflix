{"version":3,"file":"static/js/971.fa574253.chunk.js","mappings":"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","sources":["components/Login/Login.js","components/Authentication/Authentication.js","hooks/useFetchPopular.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './Login.css';\nimport vgCollage from '../../assets/images/vg-collage.jpg';\n\nconst Login = ({ toLanding, authenticateUser }) => {\n  // States\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [hasPasswordError, setHasPasswordError] = useState(false);\n  const [currentFocus, setCurrentFocus] = useState(null);\n  const [authError, setAuthError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  document.body.style.overflow = 'hidden';\n\n  // Refs\n  const emailRef = useRef('');\n  const passwordRef = useRef('');\n\n  // Regex for email validity\n  const re =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  // Email input error change error handler\n  const checkEmailValidity = (e) => {\n    if (hasEmailError) setHasEmailError(false);\n    const value = e.target.value.trim().toLowerCase();\n    const isValidEmail = re.test(value);\n  };\n\n  // Email input error blur error handler\n  const emailBlurHandler = (e) => {\n    const value = e.target.value.trim().toLowerCase();\n    const isValidEmail = re.test(value);\n    setHasEmailError(!isValidEmail);\n    setCurrentFocus(null);\n  };\n\n  // Password input error change error handler\n  const checkPasswordValidity = (e) => {\n    if (hasPasswordError) setHasPasswordError(false);\n    const value = e.target.value.trim().toLowerCase();\n    const isValidPassword =\n      e.target.value.length > 0 && e.target.value.length <= 8;\n  };\n\n  // Password input error blur error handler\n  const passwordBlurHandler = (e) => {\n    const value = e.target.value.trim().toLowerCase();\n    const isValidPassword = value.length > 3 && value.length <= 8;\n    setHasPasswordError(!isValidPassword);\n    setCurrentFocus(null);\n  };\n\n  const toLandingPage = () => {\n    toLanding();\n  };\n\n  // Submit user information to match authentication\n  const formSubmitHandler = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    // Data values\n    const email = emailRef.current.value;\n    const password = passwordRef.current.value;\n    emailRef.current.blur();\n    passwordRef.current.blur();\n    setCurrentFocus('');\n    const response = await authenticateUser(email, password);\n    if (!response.data) setAuthError(response);\n    setLoading(false);\n  };\n\n  return (\n    <div className='login__wrapper'>\n      <div className='login'>\n        <div className='login__form_wrapper'>\n          <div className='login__form_container'>\n            <form className='login__form' onSubmit={formSubmitHandler}>\n              {!loading ? (\n                <>\n                  <h1>LOGIN</h1>\n                  <div className='login__form_actions'>\n                    <label className='form_label' htmlFor='email' />\n                    <input\n                      ref={emailRef}\n                      onFocus={() => setCurrentFocus('email')}\n                      onChange={checkEmailValidity}\n                      onBlur={emailBlurHandler}\n                      className={`form_input ${\n                        emailRef.current?.value !== '' && hasEmailError\n                          ? 'error'\n                          : ''\n                      }`}\n                      type='email'\n                    />\n                    <span\n                      className={`form_actions_placeholder ${\n                        emailRef.current?.value || currentFocus == 'email'\n                          ? 'focused'\n                          : ''\n                      }`}\n                    >\n                      Email\n                    </span>\n                  </div>\n                  <div className='login__form_actions'>\n                    <label className='form_label' htmlFor='email' />\n                    <input\n                      ref={passwordRef}\n                      onFocus={() => setCurrentFocus('password')}\n                      onChange={checkPasswordValidity}\n                      onBlur={passwordBlurHandler}\n                      className={`form_input ${\n                        passwordRef.current?.value !== undefined &&\n                        hasPasswordError &&\n                        passwordRef.current.value.length > 0\n                          ? 'error'\n                          : ''\n                      }`}\n                      type='password'\n                    />\n                    <span\n                      className={`form_actions_placeholder ${\n                        passwordRef.current?.value || currentFocus == 'password'\n                          ? 'password_focused'\n                          : ''\n                      }`}\n                    >\n                      Password\n                    </span>\n                    {authError && (\n                      <p className='login__auth_error'>{authError}</p>\n                    )}\n                  </div>\n                  <button className='form__submit_btn'>Sign In</button>\n                  <p className='form__create_account'>\n                    Don't have an account?{' '}\n                    <span onClick={toLandingPage}>Create one now</span>.\n                  </p>\n                </>\n              ) : (\n                <div className='login__loading'>\n                  <div className='loading_spinner' />\n                </div>\n              )}\n            </form>\n          </div>\n        </div>\n      </div>\n      <div className='login__background'>\n        <img src={vgCollage} />\n        {/* {images.map((game) => (\n          <React.Fragment key={game.key}>\n            <img\n              className='login__img'\n              alt={game.name}\n              src={game.props.children.props.src}\n            />\n          </React.Fragment>\n        ))} */}\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState, useEffect, useRef, lazy, Suspense } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Login from '../Login/Login';\nimport './Authentication.css';\nimport axios from 'axios';\nimport useFetchPopular from '../../hooks/useFetchPopular';\nconst LandingPage = lazy(() => import('../LandingPage/LandingPage'));\n\nconst Authentication = ({ onLogin }) => {\n  const allGames = useFetchPopular();\n  const [imgsLoading, setImgsLoading] = useState(true);\n  const [toLandingPage, setToLandingPage] = useState(false);\n  const userLoggedIn = localStorage.getItem('user');\n  const navigate = useNavigate();\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const counter = useRef(0);\n\n  useEffect(() => {\n    if (userLoggedIn) navigate('/');\n  }, []);\n\n  const imageLoaded = () => {\n    counter.current += 1;\n    if (counter.current >= allGames.length) {\n      setImgsLoading(false);\n    }\n  };\n\n  const loadedImages = allGames?.map((game) => (\n    <React.Fragment key={game.id}>\n      <img\n        className='login__img'\n        src={`//images.igdb.com/igdb/image/upload/t_cover_big_2x/${game.cover.image_id}.jpg`}\n        onLoad={imageLoaded}\n      />\n    </React.Fragment>\n  ));\n\n  const authenticateUser = async (email, password) => {\n    try {\n      const response = await axios.post(`${baseURL}/authentication/signin`, {\n        email,\n        password,\n      });\n      onLogin(response.data.user);\n      return response;\n    } catch (e) {\n      return e.response.data.message;\n    }\n  };\n\n  if (!userLoggedIn) {\n    if (!toLandingPage)\n      return (\n        <Login\n          toLanding={() => setToLandingPage(true)}\n          authenticateUser={(email, password) =>\n            authenticateUser(email, password)\n          }\n        />\n      );\n\n    return (\n      <Suspense fallback={<>...</>}>\n        <LandingPage\n          toSignIn={() => {\n            setToLandingPage(false);\n          }}\n          images={loadedImages}\n        />\n      </Suspense>\n    );\n  } else {\n    return (\n      <div className='auth_login__loading'>\n        <div className='auth_loading_spinner' />\n      </div>\n    );\n  }\n};\n\nexport default Authentication;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetchPopular() {\n  const existingToken = localStorage.getItem('twitch_auth');\n  const [bannerGamesList, setBannerGamesList] = useState([]);\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const currentDate = new Date();\n\n  useEffect(() => {\n    const fetchPopularGames = async () => {\n      const request = await axios.get(`${baseURL}/authentication/login_banner`);\n      const last_updated = new Date(request.data.last_updated);\n\n      // If a week has passed since the last update, run a new update\n      if (currentDate > last_updated.setDate(last_updated.getDate() + 7)) {\n        updatePopularGamesAPI();\n        return;\n      } else {\n        setBannerGamesList(request.data.popular_games_list);\n        return;\n      }\n    };\n    fetchPopularGames();\n\n    const updatePopularGamesAPI = async () => {\n      if (!existingToken) return;\n      try {\n        const request = await axios.post(`${baseURL}/app/popular_titles`, {\n          token: existingToken,\n        });\n        return updateCollection(request.data);\n      } catch (err) {\n        console.log(err);\n        return err;\n      }\n    };\n  }, [existingToken]);\n\n  const updateCollection = async (list) => {\n    const request = await axios.post(\n      `${baseURL}/authentication/update_login_banner`,\n      {\n        gameList: list,\n        date: new Date(),\n      }\n    );\n\n    setBannerGamesList(request.data.popular_games_list);\n  };\n\n  return bannerGamesList;\n}\n"],"names":["toLanding","authenticateUser","useState","hasEmailError","setHasEmailError","hasPasswordError","setHasPasswordError","currentFocus","setCurrentFocus","authError","setAuthError","loading","setLoading","document","body","style","overflow","emailRef","useRef","passwordRef","re","formSubmitHandler","e","preventDefault","email","current","value","password","blur","response","data","className","onSubmit","htmlFor","ref","onFocus","onChange","target","trim","toLowerCase","test","onBlur","isValidEmail","type","length","isValidPassword","undefined","onClick","src","vgCollage","LandingPage","lazy","onLogin","allGames","existingToken","localStorage","getItem","bannerGamesList","setBannerGamesList","baseURL","process","currentDate","Date","useEffect","fetchPopularGames","axios","request","last_updated","setDate","getDate","updatePopularGamesAPI","popular_games_list","token","updateCollection","console","log","list","gameList","date","useFetchPopular","setImgsLoading","toLandingPage","setToLandingPage","userLoggedIn","navigate","useNavigate","counter","imageLoaded","loadedImages","map","game","cover","image_id","onLoad","id","user","message","Suspense","fallback","toSignIn","images"],"sourceRoot":""}