{"version":3,"file":"static/js/782.f5e89d07.chunk.js","mappings":"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","sources":["components/Login/Profiles/ProfileEditor/SearchList.js","components/Login/Profiles/ProfileEditor/ProfileEditor.js","components/Login/Profiles/ProfileEditor/ProfileCreation.js","components/Login/Profiles/ProfilesPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ProfileEditor.css';\n\nconst SearchList = ({ list, selectGame }) => {\n  return (\n    <div className='search_list_container'>\n      <ul className='search_list'>\n        {list.slice(0, 5).map((game) => (\n          <li className='search_list_item' onClick={() => selectGame(game)}>\n            <img className='item_thumbnail' src={game.cover.url} />\n            <p className='item_title'>{game.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchList;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport \"./ProfileEditor.css\";\nimport SearchList from \"./SearchList\";\nimport axios from \"axios\";\nimport { MdEdit } from \"react-icons/md\";\nimport { SketchPicker } from \"react-color\";\nimport { FaAngleDown } from \"react-icons/fa\";\n\nconst ProfileEditor = (props) => {\n  document.body.style.overflow = \"hidden\";\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const currentProfile = props.currentProfile;\n  const isAdmin = currentProfile.isAdmin;\n  const [loading, setLoading] = useState(false);\n  const [searchLoading, setSearchLoading] = useState(false);\n  // Current Profile Name\n  const currentProfileName =\n    localStorage.getItem(\"profile\") || currentProfile.name;\n  const [nameValue, setNameValue] = useState(currentProfileName);\n  // Title Input State and Ref\n  const titleRef = useRef(\"\");\n  const [titleValue, setTitleValue] = useState(currentProfile.favorite_game);\n  const [titleId, setTitleId] = useState(0);\n  const [titleImage, setTitleImage] = useState(\"\");\n  const [titleList, setTitleList] = useState([]);\n  let searchValue = \"\";\n  // Console Input State and Ref\n  const consoleRef = useRef(\"\");\n  const [consoleValue, setConsoleValue] = useState(\n    currentProfile.favorite_console\n  );\n  // Profile form states\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentAvatar, setCurrentAvatar] = useState(currentProfile.avatar);\n  const [imgFilePreview, setImgFilePreview] = useState(null);\n  const fileInputRef = useRef(\"\");\n  const [imgLink, setImgLink] = useState(\"\");\n  const [usingImgLink, setUsingImgLink] = useState(false);\n  const [changingAvatar, setChangingAvatar] = useState(false);\n  // Color states\n  const [changingColor, setChangingColor] = useState(false);\n  const [color, setColor] = useState(currentProfile.color);\n  // Genre states\n  const genreRef = useRef(\"\");\n  const [changingGenre, setChangingGenre] = useState(false);\n  const [currentGenre, setCurrentGenre] = useState(\n    currentProfile.favorite_genre\n  );\n\n  const genreList = [\n    \"Action\",\n    \"Adventure\",\n    \"Arcade\",\n    \"Card & Board\",\n    \"Family\",\n    \"Fighting\",\n    \"Indie\",\n    \"MMO (Massive Multiplayer)\",\n    \"Platformer\",\n    \"Puzzle\",\n    \"Racing\",\n    \"RPG\",\n    \"Shooter\",\n    \"Sports\",\n    \"Strategy\",\n  ];\n\n  useEffect(() => {\n    if (\n      titleValue == \"\" ||\n      titleValue == currentProfile.favorite_game ||\n      searchLoading\n    ) {\n      setTitleList([]);\n      return;\n    }\n    const delaySearch = setTimeout(() => {\n      setSearchLoading(true);\n      const fetchSearchedGame = async () => {\n        const request = await axios.post(`${baseURL}/app/search_game`, {\n          gameName: titleValue,\n          token: props.twitchToken,\n        });\n        setTitleList(request.data);\n        setSearchLoading(false);\n      };\n      fetchSearchedGame();\n    }, 500);\n\n    return () => clearTimeout(delaySearch);\n  }, [titleValue]);\n\n  // Listen for escape key press to close out color palette\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        setChangingColor(false);\n      }\n    };\n    window.addEventListener(\"keydown\", handleEsc);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleEsc);\n    };\n  }, []);\n\n  // Listen for clicks outside of genre dropdown box\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (genreRef.current && !genreRef.current.contains(event.target)) {\n        setChangingGenre(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [genreRef]);\n\n  const selectGameHandler = (game) => {\n    setTitleValue(game.name);\n    setTitleId(game.id);\n    setTitleImage(\n      `//images.igdb.com/igdb/image/upload/t_cover_big/${game.cover?.image_id}.jpg`\n    );\n    setTitleList([]);\n  };\n\n  const titleBlurHandler = () => {\n    if (titleList.length > 0) {\n    }\n  };\n\n  const colorChangeHandler = (color) => setColor(color.hex);\n  const genreChangeHandler = (genre) => {\n    setCurrentGenre(genre);\n    setChangingGenre(false);\n  };\n\n  // Determine cancel button functionality\n  const cancelButtonHandler = () => {\n    // If user is changing avatars, return to editing profile\n    if (changingAvatar) {\n      setChangingAvatar(false);\n      setUsingImgLink(false);\n    }\n    // If the user is editing profile, return to all profiles\n    else {\n      props.viewAllProfiles();\n    }\n  };\n\n  // Delete single profile\n  const deleteProfileHandler = async () => {\n    setLoading(true);\n    try {\n      const request = await axios.delete(`${baseURL}/app/delete_profile`, {\n        data: { email: props.userEmail, name: currentProfile.name },\n      });\n      props.saveEdit(request.data.response);\n      props.viewAllProfiles();\n    } catch (error) {\n      console.log(error);\n      return error;\n    }\n    setLoading(false);\n  };\n\n  // Avatar profile image handling\n  const updateAvatar = async (e, method) => {\n    setLoading(true);\n    // Append email and profile name to find correct profile to update\n    const data = new FormData();\n    data.append(\"email\", props.userEmail);\n    data.append(\"name\", currentProfile.name);\n    // User uploads image\n    if (method == \"file\") {\n      data.append(\"avatar\", e.target.files[0]);\n      try {\n        const request = await axios.post(\n          `${baseURL}/app/update_avatar_file`,\n          data\n        );\n        setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\n      } catch (e) {\n        console.log(e);\n        return e;\n      }\n      setLoading(false);\n    }\n\n    // If user uses a link to an image\n    else {\n      const data = {\n        email: props.userEmail,\n        name: currentProfile.name,\n        avatar: imgLink,\n      };\n      try {\n        const request = await axios.post(\n          `${baseURL}/app/update_avatar_link`,\n          data\n        );\n        setCurrentAvatar(imgLink);\n      } catch (e) {\n        console.log(e);\n        return e;\n      }\n      setLoading(false);\n    }\n  };\n\n  // If user isn't using the link, display the link modal\n  // Or else submit the link url and close the modal\n  const determineLinkAction = (e) => {\n    if (!usingImgLink) {\n      setUsingImgLink(true);\n    } else {\n      updateAvatar(e, \"link\");\n    }\n  };\n\n  // Update Profile in Mongo Database\n  const saveUserData = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    // Make inputs OPTIONAL\n    const userData = {\n      email: props.userEmail,\n      originalName: currentProfile.name,\n      newName: nameValue.trim(),\n      newColor: color,\n      favoriteGenre: currentGenre ? currentGenre.trim() : \"Action\",\n      favoriteGame: titleValue ? titleValue.trim() : \"None\",\n      gameId: titleId,\n      imageURL: titleImage,\n      favoriteConsole: consoleValue ? consoleValue.trim() : \"None\",\n      twitchToken: props.twitchToken,\n    };\n\n    try {\n      const request = await axios.post(\n        `${baseURL}/app/update_user_profile`,\n        userData\n      );\n\n      localStorage.setItem(\"user\", request.data.response.user.email);\n      localStorage.setItem(\"profile\", request.data.response.profile.name);\n      setStatusMessage(request.data.message);\n      props.saveEdit(request.data.response);\n      props.viewAllProfiles();\n    } catch (error) {\n      setStatusMessage(error);\n    }\n    setLoading(false);\n  };\n\n  // Loading spinner\n  if (loading) {\n    return (\n      <div className=\"profile_edit__container\">\n        <div className=\"profile_edit__header\">\n          <h3>GAMEFLIX</h3>\n        </div>\n        <div className=\"profile_edit__form_wrapper\">\n          <div className=\"profile__loading\">\n            <div className=\"profile__loading_spinner\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"profile_edit__container\">\n      <div className=\"profile_edit__header\">\n        <h3>GAMEFLIX</h3>\n      </div>\n      <div className=\"profile_edit__form_wrapper\">\n        <h3>{currentProfile !== true ? \"Edit Profile\" : \"Create Profile\"}</h3>\n        <div\n          className={`form_container ${\n            changingAvatar && \"avatar_select_container\"\n          }`}\n        >\n          {/* USER AVATAR CONTAINER */}\n          <div\n            style={{ paddingTop: changingAvatar && \"10px\" }}\n            className=\"form_avatar_container\"\n          >\n            <img\n              className={`current_avatar ${changingAvatar && \"avatar_select\"}`}\n              style={{\n                backgroundColor: color ? color : currentProfile.color,\n              }}\n              src={currentAvatar}\n            />\n            {!changingAvatar && (\n              <span\n                className=\"current_avatar_edit\"\n                onClick={() => setChangingAvatar(true)}\n              >\n                <MdEdit style={{ height: \"100%\" }} />\n              </span>\n            )}\n          </div>\n          {/* USER FORM */}\n          <div className=\"form_right\">\n            {!changingAvatar && (\n              <form className=\"profile_edit__form\">\n                {/* NAME */}\n                <input\n                  className=\"name_input\"\n                  onChange={(e) => setNameValue(e.target.value)}\n                  value={nameValue}\n                  autoFocus\n                />\n                {/* COLOR */}\n                <p>Color</p>\n                <input\n                  className=\"color_input\"\n                  style={{\n                    color: color,\n                  }}\n                  onChange={(e) => setColor(e.target.value)}\n                  value={color}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setChangingColor(!changingColor)}\n                  style={{\n                    backgroundColor: color,\n                  }}\n                />\n                {changingColor && (\n                  <SketchPicker\n                    color={color}\n                    onChangeComplete={colorChangeHandler}\n                    className=\"profile_color_palette\"\n                  />\n                )}\n              </form>\n            )}\n            {/* USER PERSONAL */}\n            <div\n              className={`form_personal ${changingAvatar && \"personal_avatar\"}`}\n            >\n              <h4\n                style={{\n                  textAlign: changingAvatar ? \"center\" : \"left\",\n                }}\n              >\n                {!changingAvatar ? \"Your Playstyle\" : \"Current\"}\n              </h4>\n              {/* AVATAR FILE */}\n              {changingAvatar && (\n                <>\n                  <div\n                    className={`upload_avatar_actions ${\n                      usingImgLink && \"img_link_actions\"\n                    }`}\n                  >\n                    <input\n                      className=\"upload_file_input\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      style={{ display: \"none\" }}\n                      multiple={false}\n                      ref={fileInputRef}\n                      onChange={(e) => updateAvatar(e, \"file\")}\n                    />\n\n                    {!usingImgLink && (\n                      <>\n                        <button onClick={() => fileInputRef.current.click()}>\n                          Upload\n                        </button>\n                        <p>OR</p>\n                      </>\n                    )}\n                    {/* AVATAR URL */}\n                    <button onClick={determineLinkAction}>\n                      {!usingImgLink ? \"Enter link\" : \"Submit\"}\n                    </button>\n                    {usingImgLink && (\n                      <input\n                        className={`console_input ${\n                          changingAvatar && \"img_input\"\n                        }`}\n                        placeholder={\"Enter link to image or gif\"}\n                        value={imgLink}\n                        onChange={(e) => setImgLink(e.target.value)}\n                      />\n                    )}\n                  </div>\n                </>\n              )}\n              {/* TITLE */}\n              {!changingAvatar && (\n                <>\n                  <p className=\"form_personal_title\">Favorite Title</p>\n                  <input\n                    ref={titleRef}\n                    value={titleValue}\n                    className=\"title_input\"\n                    onBlur={titleBlurHandler}\n                    onChange={(e) => {\n                      titleRef.current = titleValue;\n                      setTitleValue(e.target.value);\n                    }}\n                  />\n                  {searchLoading && (\n                    <div className=\"profile__search_loading\">\n                      <div className=\"profile__search_loading_spinner\" />\n                    </div>\n                  )}\n                  {titleList.length > 0 && titleValue !== \"\" && (\n                    <SearchList\n                      list={titleList}\n                      selectGame={selectGameHandler}\n                    />\n                  )}\n                </>\n              )}\n              {/* CONSOLE */}\n              {!changingAvatar && (\n                <>\n                  <p className=\"form_personal_console\">Favorite Console</p>\n                  <input\n                    ref={titleRef}\n                    value={consoleValue}\n                    onChange={(e) => {\n                      consoleRef.current = consoleValue;\n                      setConsoleValue(e.target.value);\n                    }}\n                    className={`console_input ${changingAvatar && \"img_input\"}`}\n                    placeholder={\n                      changingAvatar ? \"https://www.example.com\" : \"\"\n                    }\n                  />\n                </>\n              )}\n              {/* GENRE */}\n              <div className=\"genre_dropdown\">\n                {!changingAvatar && (\n                  <>\n                    <p className=\"form_personal_genre\">Favorite Genre</p>\n                    <button onClick={() => setChangingGenre(!changingGenre)}>\n                      {currentGenre !== undefined\n                        ? `${currentGenre}`\n                        : \"Action\"}{\" \"}\n                      <FaAngleDown className=\"genre_arrow\" />\n                    </button>\n                  </>\n                )}\n                {/* <FaAngleDown className='genre_arrow' /> */}\n                {changingGenre && (\n                  <div ref={genreRef} className=\"genre_dropdown_content\">\n                    {genreList.map((genre) => (\n                      <span\n                        onClick={() => genreChangeHandler(genre)}\n                        key={genre}\n                      >\n                        {genre}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* FORM ACTIONS */}\n        <div className=\"form_actions\">\n          {!changingAvatar && (\n            <button className=\"save_btn\" onClick={saveUserData}>\n              Save\n            </button>\n          )}\n          <button className=\"cancel_btn\" onClick={cancelButtonHandler}>\n            {!changingAvatar ? \"Cancel\" : \"Back\"}\n          </button>\n          {!isAdmin && (\n            <button\n              className=\"delete_profile_btn justify-start\"\n              onClick={deleteProfileHandler}\n            >\n              Delete Profile\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileEditor;\n","import React, { useState, useRef, useEffect } from 'react';\nimport defaultAvatar from '../../../../assets/images/basic_avatar.png';\nimport { SketchPicker } from 'react-color';\nimport { FaAngleDown } from 'react-icons/fa';\nimport axios from 'axios';\nimport './ProfileEditor.css';\nimport { FaCloudUploadAlt, FaLink } from 'react-icons/fa';\n\nconst ProfileCreation = (props) => {\n  const baseURL = process.env.REACT_APP_BASE_URL;\n  const [loading, setLoading] = useState(false);\n  // Color states\n  const [changingColor, setChangingColor] = useState(false);\n  const [color, setColor] = useState('');\n  // Form States\n  const [error, setError] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [typeError, setTypeError] = useState(null);\n  const [nameValue, setNameValue] = useState('');\n  const [consoleValue, setConsoleValue] = useState('');\n  const [titleValue, setTitleValue] = useState('');\n  // Avatar States\n  const [currentAvatar, setCurrentAvatar] = useState(null);\n  const [startingCreateProfile, setStartingCreateProfile] = useState(true);\n  const [imageLink, setImageLink] = useState('');\n  const [usingLink, setUsingLink] = useState(false);\n  const fileInputRef = useRef('');\n  // Genre Input States\n  const genreRef = useRef('');\n  const [changingGenre, setChangingGenre] = useState(false);\n  const [currentGenre, setCurrentGenre] = useState('');\n  const genreList = [\n    'Action',\n    'Adventure',\n    'Arcade',\n    'Card & Board',\n    'Family',\n    'Fighting',\n    'Indie',\n    'MMO (Massive Multiplayer)',\n    'Platformer',\n    'Puzzle',\n    'Racing',\n    'RPG',\n    'Shooter',\n    'Sports',\n    'Strategy',\n  ];\n\n  // Listen for escape key press to close out color palette\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        setChangingColor(false);\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n\n  // Listen for clicks outside of genre dropdown box\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (genreRef.current && !genreRef.current.contains(event.target)) {\n        setChangingGenre(false);\n      }\n    }\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [genreRef]);\n\n  const colorChangeHandler = (color) => setColor(color.hex);\n  const genreChangeHandler = (genre) => {\n    setCurrentGenre(genre);\n    setChangingGenre(false);\n  };\n  const imageLinkHandler = (e) => {\n    setCurrentAvatar(imageLink);\n    setUsingLink(false);\n  };\n\n  const uploadProfileAvatarHandler = (e, method) => {\n    if (method == 'file') {\n      setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\n    } else {\n      setUsingLink(true);\n      setStartingCreateProfile(false);\n    }\n  };\n\n  const saveUserData = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setChangingColor(false);\n\n    if (nameValue.trim() == '') {\n      setHasError(true);\n      setError('Please enter a valid name!');\n      setLoading(false);\n      return;\n    } else if (consoleValue.trim() == '') {\n      setHasError(true);\n      setError('Please enter a valid game console!');\n      setLoading(false);\n      return;\n    }\n\n    const userData = {\n      email: props.userEmail,\n      avatar: currentAvatar,\n      name: nameValue.trim(),\n      color: color,\n      favoriteGenre: currentGenre.trim(),\n      favoriteGame: titleValue.trim(),\n      favoriteConsole: consoleValue.trim(),\n    };\n\n    try {\n      const request = await axios.post(\n        `${baseURL}/app/create_new_profile`,\n        userData\n      );\n      localStorage.setItem('user', request.data.response.email);\n      props.updateUser(request.data.response);\n      props.viewAllProfiles();\n    } catch (e) {\n      console.log(e);\n    }\n    setStartingCreateProfile(true);\n    setLoading(false);\n  };\n\n  // Loading spinner\n  if (loading) {\n    return (\n      <div className='profile_edit__container'>\n        <div className='profile_edit__header'>\n          <h3>GAMEFLIX</h3>\n        </div>\n        <div className='profile_edit__form_wrapper'>\n          <div className='profile__loading'>\n            <div className='profile__loading_spinner' />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* PROFILE CREATION CONTAINER */}\n      <div\n        className='profile_edit__container'\n        // style={{ opacity: usingLink && '.25' }}\n      >\n        <div className='profile_edit__header'>\n          <h3>GAMEFLIX</h3>\n        </div>\n        <div className='profile_edit__form_wrapper'>\n          {/* MODAL */}\n          <div\n            className={`avatar_link_modal ${\n              usingLink == false &&\n              startingCreateProfile == false &&\n              'modal_hidden'\n            } ${\n              usingLink == false &&\n              startingCreateProfile == true &&\n              'avatar_link_modal_launch'\n            }`}\n          >\n            <h3>Avatar Link</h3>\n            <div className='modal_content'>\n              <p>Please enter the link to any image or gif below.</p>\n\n              <div className='modal_form'>\n                <input\n                  value={imageLink}\n                  onChange={(e) => setImageLink(e.target.value)}\n                />\n                <button onClick={imageLinkHandler}>Submit</button>\n                <button onClick={() => setUsingLink(false)}>Back</button>\n              </div>\n            </div>\n          </div>\n          <h3>Create Profile</h3>\n          <div className='form_container'>\n            {/* USER AVATAR CONTAINER */}\n            <div className='form_avatar_container'>\n              {/* AVATAR IMAGE */}\n              <img\n                style={{\n                  backgroundColor: color == '' ? '#FFF' : color,\n                  objectFit: 'cover',\n                }}\n                className='current_avatar'\n                src={currentAvatar == null ? defaultAvatar : currentAvatar}\n              />\n              {/* AVATAR IMAGE ACTIONS */}\n              <div className='profile_avatar_actions'>\n                {/* File Upload */}\n                <span className='avatar_file_option'>\n                  <input\n                    className='upload_file_input'\n                    type='file'\n                    accept='image/*'\n                    style={{ display: 'none' }}\n                    multiple={false}\n                    ref={fileInputRef}\n                    onChange={(e) => uploadProfileAvatarHandler(e, 'file')}\n                  />\n                  <FaCloudUploadAlt\n                    onClick={(e) => fileInputRef.current.click()}\n                  />\n                </span>\n                {/* Link Upload */}\n                <span className='avatar_link_option'>\n                  <FaLink onClick={(e) => uploadProfileAvatarHandler('link')} />\n                </span>\n              </div>\n            </div>\n            {/* USER FORM */}\n            <div className='form_right'>\n              <form className='profile_edit__form'>\n                {/* NAME */}\n                <input\n                  className='name_input'\n                  placeholder='Name'\n                  onChange={(e) => {\n                    setNameValue(e.target.value);\n                    setHasError(false);\n                  }}\n                  value={nameValue}\n                  autoFocus\n                />\n\n                {/* COLOR */}\n                <p>Color</p>\n                <input\n                  className='color_input'\n                  style={{\n                    color: color,\n                    fontWeight: '500',\n                  }}\n                  onChange={(e) => setColor(e.target.value)}\n                  value={color}\n                />\n                <button\n                  type='button'\n                  onClick={() => setChangingColor(!changingColor)}\n                  style={{\n                    backgroundColor: color,\n                  }}\n                />\n                {changingColor && (\n                  <SketchPicker\n                    color={color}\n                    onChangeComplete={colorChangeHandler}\n                    className='profile_color_palette'\n                  />\n                )}\n              </form>\n\n              {/* USER PERSONAL */}\n              <div className='form_personal'>\n                <h4>Your Playstyle</h4>\n\n                {/* CONSOLE */}\n                <p className='form_personal_console'>Favorite Console</p>\n                <input\n                  value={consoleValue}\n                  onChange={(e) => {\n                    setConsoleValue(e.target.value);\n                  }}\n                  className='console_input'\n                />\n\n                {/* TITLE */}\n                <p className='form_personal_title'>Favorite Title</p>\n                <input\n                  value={titleValue}\n                  className='title_input'\n                  onChange={(e) => {\n                    setTitleValue(e.target.value);\n                  }}\n                />\n\n                {/* GENRE */}\n                <div className='genre_dropdown'>\n                  <p className='form_personal_genre'>Favorite Genre</p>\n                  <button onClick={() => setChangingGenre(!changingGenre)}>\n                    {currentGenre !== '' ? `${currentGenre}` : 'Action'}{' '}\n                    <FaAngleDown className='genre_arrow' />\n                  </button>\n                  {/* GENRE DROPDOWN */}\n                  {changingGenre && (\n                    <div ref={genreRef} className='genre_dropdown_content'>\n                      {genreList.map((genre) => (\n                        <span\n                          onClick={() => genreChangeHandler(genre)}\n                          key={genre}\n                        >\n                          {genre}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* FORM ACTIONS */}\n          <div className='form_actions'>\n            <button className='save_btn' onClick={saveUserData}>\n              Save\n            </button>\n            <button className='cancel_btn' onClick={props.viewAllProfiles}>\n              Cancel\n            </button>\n          </div>\n          {hasError && <p className='create_profile_error'>{error}</p>}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProfileCreation;\n","import React, { useEffect, useState, useRef } from 'react';\nimport './ProfilesPage.css';\nimport defaultAvatar from '../../../assets/images/basic_avatar.png';\nimport { MdEdit } from 'react-icons/md';\nimport ProfileEditor from './ProfileEditor/ProfileEditor';\nimport ProfileCreation from './ProfileEditor/ProfileCreation';\n\nconst ProfilesPage = (props) => {\n  const [editingProfiles, setEditingProfiles] = useState(false);\n  const [creatingProfile, setCreatingProfile] = useState(null);\n  const [profiles, setProfiles] = useState(null);\n  const [imgsLoaded, setImgsLoaded] = useState(false);\n\n  const imgRef = useRef(0);\n\n  // Set active profile\n  const chooseCurrentProfile = (user) => {\n    localStorage.setItem('profile', user.name);\n    props.selectProfile(user);\n  };\n\n  // Handler to determine click function when editing profiles or not\n  const profileSelectHandler = (user) => {\n    if (!editingProfiles) chooseCurrentProfile(user);\n    else {\n      setCreatingProfile(user);\n    }\n  };\n\n  // Determine what user is selected and grab their profiles\n  useEffect(() => {\n    setProfiles(props.currentUser.profiles);\n    setEditingProfiles(false);\n  }, [props.currentUser]);\n\n  const profileCount = profiles?.length;\n\n  const imagesReady = () => {\n    imgRef.current++;\n    console.log(imgRef.current);\n    if (imgRef.current == profileCount) {\n      setImgsLoaded(true);\n    }\n  };\n\n  if (profiles == null) {\n    return;\n  }\n\n  if (creatingProfile !== null && creatingProfile !== 'new') {\n    return (\n      <ProfileEditor\n        saveEdit={props.updateUser}\n        currentProfile={creatingProfile}\n        viewAllProfiles={() => setCreatingProfile(null)}\n        userEmail={props.currentUser.email}\n        twitchToken={props.twitchToken}\n      />\n    );\n  }\n\n  if (creatingProfile !== null && creatingProfile == 'new') {\n    return (\n      <ProfileCreation\n        updateUser={props.updateUser}\n        userEmail={props.currentUser.email}\n        viewAllProfiles={() => setCreatingProfile(null)}\n      />\n    );\n  }\n\n  profiles.sort((a, b) => (a.isAdmin ? -1 : b.isAdmin ? 1 : 0));\n\n  return (\n    <div className='profile__page'>\n      <div className='profile_edit__header'>\n        <h3>GAMEFLIX</h3>\n      </div>\n      <div\n        className='profile__container'\n        // style={{ display: imgsLoaded ? 'flex' : 'none' }}\n      >\n        <h3>Who's gaming?</h3>\n        <ul className='profile__list'>\n          {profiles.map((user) => (\n            <li\n              key={user.name}\n              className='profile__user'\n              onClick={() => profileSelectHandler(user)}\n            >\n              <img\n                className={`profile__user_avatar ${\n                  editingProfiles && 'editing'\n                }`}\n                style={{\n                  '--color-theme': user.color,\n                  backgroundColor: user.color,\n                }}\n                src={user.avatar ? `${user.avatar}` : defaultAvatar}\n                onLoad={imagesReady}\n              />\n              {editingProfiles && <MdEdit className='edit-icon' />}\n              <span className='profile__user_name'>{user.name}</span>\n            </li>\n          ))}\n        </ul>\n        <div className='profile__actions'>\n          <button\n            className={`profile__manage_btn ${editingProfiles && 'edit_btn'}`}\n            onClick={() => setEditingProfiles(!editingProfiles)}\n          >\n            {editingProfiles ? 'Done' : 'Manage Profiles'}\n          </button>\n          {profiles.length < 5 && (\n            <button\n              className='profile__new_btn'\n              onClick={() => setCreatingProfile('new')}\n            >\n              New Profile\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilesPage;\n"],"names":["list","selectGame","className","slice","map","game","onClick","src","cover","url","name","props","document","body","style","overflow","baseURL","process","REACT_APP_BASE_URL","currentProfile","isAdmin","useState","loading","setLoading","searchLoading","setSearchLoading","currentProfileName","localStorage","getItem","nameValue","setNameValue","titleRef","useRef","favorite_game","titleValue","setTitleValue","titleId","setTitleId","titleImage","setTitleImage","titleList","setTitleList","consoleRef","favorite_console","consoleValue","setConsoleValue","setStatusMessage","avatar","currentAvatar","setCurrentAvatar","fileInputRef","imgLink","setImgLink","usingImgLink","setUsingImgLink","changingAvatar","setChangingAvatar","changingColor","setChangingColor","color","setColor","genreRef","changingGenre","setChangingGenre","favorite_genre","currentGenre","setCurrentGenre","useEffect","delaySearch","setTimeout","fetchSearchedGame","axios","gameName","token","twitchToken","request","data","clearTimeout","handleEsc","event","keyCode","window","addEventListener","removeEventListener","handleClickOutside","current","contains","target","deleteProfileHandler","email","userEmail","saveEdit","response","viewAllProfiles","console","log","updateAvatar","e","method","FormData","append","files","URL","createObjectURL","saveUserData","preventDefault","userData","originalName","newName","trim","newColor","favoriteGenre","favoriteGame","gameId","imageURL","favoriteConsole","setItem","user","profile","message","paddingTop","backgroundColor","height","onChange","value","autoFocus","type","onChangeComplete","hex","textAlign","accept","display","multiple","ref","click","placeholder","onBlur","length","id","image_id","undefined","genre","genreChangeHandler","error","setError","hasError","setHasError","startingCreateProfile","setStartingCreateProfile","imageLink","setImageLink","usingLink","setUsingLink","uploadProfileAvatarHandler","updateUser","objectFit","defaultAvatar","fontWeight","editingProfiles","setEditingProfiles","creatingProfile","setCreatingProfile","profiles","setProfiles","setImgsLoaded","imgRef","profileSelectHandler","selectProfile","chooseCurrentProfile","currentUser","profileCount","imagesReady","ProfileEditor","sort","a","b","onLoad"],"sourceRoot":""}