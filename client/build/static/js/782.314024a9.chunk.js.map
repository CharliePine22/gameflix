{"version":3,"file":"static/js/782.314024a9.chunk.js","mappings":"wMAkBA,EAfmB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAC1B,OACE,gBAAKC,UAAU,wBAAf,UACE,eAAIA,UAAU,cAAd,SACGF,EAAKG,MAAM,EAAG,GAAGC,KAAI,SAACC,GAAD,OACpB,gBAAIH,UAAU,mBAAmBI,QAAS,kBAAML,EAAWI,EAAjB,EAA1C,WACE,gBAAKH,UAAU,iBAAiBK,IAAKF,EAAKG,MAAMC,OAChD,cAAGP,UAAU,aAAb,SAA2BG,EAAKK,SAHd,OAS7B,E,iDCgeD,EAxesB,SAACC,GACrB,IAAMC,EAAUC,gCACVC,EAAiBH,EAAMG,eACvBC,EAAUD,EAAeC,QAC/B,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KAEMC,EACJC,aAAaC,QAAQ,YAAcT,EAAeJ,KACpD,GAAkCM,EAAAA,EAAAA,UAASK,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEMC,GAAWC,EAAAA,EAAAA,QAAO,IACxB,GAAoCX,EAAAA,EAAAA,UAASF,EAAec,eAA5D,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8Bd,EAAAA,EAAAA,UAAS,GAAvC,eAAOe,EAAP,KAAgBC,EAAhB,KACA,GAAoChB,EAAAA,EAAAA,UAAS,IAA7C,eAAOiB,EAAP,KAAmBC,EAAnB,KACA,GAAkClB,EAAAA,EAAAA,UAAS,IAA3C,eAAOmB,EAAP,KAAkBC,EAAlB,KAGMC,GAAaV,EAAAA,EAAAA,QAAO,IAC1B,GAAwCX,EAAAA,EAAAA,UACtCF,EAAewB,kBADjB,eAAOC,EAAP,KAAqBC,EAArB,KAIA,GAA0CxB,EAAAA,EAAAA,UAAS,IAAnD,eAAsByB,GAAtB,WACA,GAA0CzB,EAAAA,EAAAA,UAASF,EAAe4B,QAAlE,eAAOC,GAAP,KAAsBC,GAAtB,KACA,IAA4C5B,EAAAA,EAAAA,UAAS,MAArD,iBACM6B,IADN,aACqBlB,EAAAA,EAAAA,QAAO,KAC5B,IAA8BX,EAAAA,EAAAA,UAAS,IAAvC,iBAAO8B,GAAP,MAAgBC,GAAhB,MACA,IAAwC/B,EAAAA,EAAAA,WAAS,GAAjD,iBAAOgC,GAAP,MAAqBC,GAArB,MACA,IAA4CjC,EAAAA,EAAAA,WAAS,GAArD,iBAAOkC,GAAP,MAAuBC,GAAvB,MAEA,IAA0CnC,EAAAA,EAAAA,WAAS,GAAnD,iBAAOoC,GAAP,MAAsBC,GAAtB,MACA,IAA0BrC,EAAAA,EAAAA,UAASF,EAAewC,OAAlD,iBAAOA,GAAP,MAAcC,GAAd,MAEMC,IAAW7B,EAAAA,EAAAA,QAAO,IACxB,IAA0CX,EAAAA,EAAAA,WAAS,GAAnD,iBAAOyC,GAAP,MAAsBC,GAAtB,MACA,IAAwC1C,EAAAA,EAAAA,UACtCF,EAAe6C,gBADjB,iBAAOC,GAAP,MAAqBC,GAArB,OAsBAC,EAAAA,EAAAA,YAAU,WACR,GACgB,IAAdjC,GACAA,GAAcf,EAAec,gBAC7BT,EAHF,CAQA,IAAM4C,EAAcC,YAAW,WAC7B5C,GAAiB,GACjB,IAAM6C,EAAiB,yCAAG,yGACFC,IAAAA,KAAA,UAActD,EAAd,oBAAyC,CAC7DuD,SAAUtC,EACVuC,MAAOzD,EAAM0D,cAHS,OAClBC,EADkB,OAKxBlC,EAAakC,EAAQC,MACrBnD,GAAiB,GANO,2CAAH,qDAQvB6C,GACD,GAAE,KAEH,OAAO,kBAAMO,aAAaT,EAAnB,CAdN,CAFC3B,EAAa,GAiBhB,GAAE,CAACP,KAGJiC,EAAAA,EAAAA,YAAU,WACR,IAAMW,EAAY,SAACC,GACK,KAAlBA,EAAMC,SACRtB,IAAiB,EAEpB,EAGD,OAFAuB,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,GAAE,KAGHX,EAAAA,EAAAA,YAAU,WACR,SAASiB,EAAmBL,GACtBlB,GAASwB,UAAYxB,GAASwB,QAAQC,SAASP,EAAMQ,SACvDxB,IAAiB,EAEpB,CAED,OADAyB,SAASN,iBAAiB,YAAaE,GAChC,WACLI,SAASL,oBAAoB,YAAaC,EAC3C,CACF,GAAE,CAACvB,KAEJ,IAkCM4B,GAAoB,yCAAG,0FAC3BlE,GAAW,GADgB,kBAGHgD,IAAAA,OAAA,UAAgBtD,EAAhB,uBAA8C,CAClE2D,KAAM,CAAEc,MAAO1E,EAAM2E,UAAW5E,KAAMI,EAAeJ,QAJ9B,cAMzBC,EAAM4E,WACN5E,EAAM6E,kBAPmB,uDASzBC,QAAQC,IAAR,MATyB,gCAY3BxE,GAAW,GAZgB,yDAAH,qDAgBpByE,GAAY,yCAAG,WAAOC,EAAGC,GAAV,iFACnB3E,GAAW,IAELqD,EAAO,IAAIuB,UACZC,OAAO,QAASpF,EAAM2E,WAC3Bf,EAAKwB,OAAO,OAAQjF,EAAeJ,MAErB,QAAVmF,EAPe,wBAQjBtB,EAAKwB,OAAO,SAAUH,EAAEV,OAAOc,MAAM,IARpB,kBAUO9B,IAAAA,KAAA,UACjBtD,EADiB,2BAEpB2D,GAZa,cAcf3B,GAAiBqD,IAAIC,gBAAgBN,EAAEV,OAAOc,MAAM,KAdrC,yDAgBfP,QAAQC,IAAR,MAhBe,gCAmBjBxE,GAAW,GAnBM,+BAwBXqD,EAAO,CACXc,MAAO1E,EAAM2E,UACb5E,KAAMI,EAAeJ,KACrBgC,OAAQI,IA3BO,oBA8BOoB,IAAAA,KAAA,UACjBtD,EADiB,2BAEpB2D,GAhCa,eAkCf3B,GAAiBE,IAlCF,0DAoCf2C,QAAQC,IAAR,MApCe,gCAuCjBxE,GAAW,GAvCM,kEAAH,wDAsDZiF,GAAY,yCAAG,WAAOP,GAAP,qFACnBA,EAAEQ,iBACFlF,GAAW,GAGLmF,EAAW,CACfhB,MAAO1E,EAAM2E,UACbgB,aAAcxF,EAAeJ,KAC7B6F,QAAS/E,EAAUgF,OACnBC,SAAUnD,GACVoD,cAAe9C,GAAeA,GAAa4C,OAAS,SACpDG,aAAc9E,EAAaA,EAAW2E,OAAS,OAC/CI,OAAQ7E,EACR8E,SAAU5E,EACV6E,gBAAiBvE,EAAeA,EAAaiE,OAAS,OACtDnC,YAAa1D,EAAM0D,aAfF,kBAmBKH,IAAAA,KAAA,UACjBtD,EADiB,4BAEpByF,GArBe,OAmBX/B,EAnBW,OAwBjBhD,aAAayF,QAAQ,OAAQzC,EAAQC,KAAKyC,SAASC,KAAK5B,OACxD/D,aAAayF,QAAQ,UAAWzC,EAAQC,KAAKyC,SAASE,QAAQxG,MAC9D+B,EAAiB6B,EAAQC,KAAK4C,SAC9BxG,EAAM4E,WACN5E,EAAM6E,kBA5BW,kDA8BjB/C,EAAiB,EAAD,IA9BC,QAgCnBvB,GAAW,GAhCQ,0DAAH,sDAoClB,OAAID,GAEA,iBAAKf,UAAU,0BAAf,WACE,gBAAKA,UAAU,uBAAf,UACE,wCAEF,gBAAKA,UAAU,6BAAf,UACE,gBAAKA,UAAU,mBAAf,UACE,gBAAKA,UAAU,qCAQvB,iBAAKA,UAAU,0BAAf,WACE,gBAAKA,UAAU,uBAAf,UACE,wCAEF,iBAAKA,UAAU,6BAAf,WACE,yBAAwB,IAAnBY,EAA0B,eAAiB,oBAChD,iBACEZ,UAAS,yBACPgD,IAAkB,2BAFtB,WAME,iBACEkE,MAAO,CAAEC,WAAYnE,IAAkB,QACvChD,UAAU,wBAFZ,WAIE,gBACEA,UAAS,yBAAoBgD,IAAkB,iBAC/CkE,MAAO,CACLE,gBAAiBhE,IAAgBxC,EAAewC,OAElD/C,IAAKoC,MAELO,KACA,iBACEhD,UAAU,sBACVI,QAAS,kBAAM6C,IAAkB,EAAxB,EAFX,UAIE,SAAC,MAAD,CAAQiE,MAAO,CAAEG,OAAQ,gBAK/B,iBAAKrH,UAAU,aAAf,WACIgD,KACA,kBAAMhD,UAAU,qBAAhB,WAEE,kBACEA,UAAU,aACVsH,SAAU,SAAC5B,GAAD,OAAOnE,EAAamE,EAAEV,OAAOuC,MAA7B,EACVA,MAAOjG,EACPkG,WAAS,KAGX,kCACA,kBACExH,UAAU,cACVkH,MAAO,CACL9D,MAAOA,IAETkE,SAAU,SAAC5B,GAAD,OAAOrC,GAASqC,EAAEV,OAAOuC,MAAzB,EACVA,MAAOnE,MAET,mBACEqE,KAAK,SACLrH,QAAS,kBAAM+C,IAAkBD,GAAxB,EACTgE,MAAO,CACLE,gBAAiBhE,MAGpBF,KACC,SAAC,KAAD,CACEE,MAAOA,GACPsE,iBA7MS,SAACtE,GAAD,OAAWC,GAASD,EAAMuE,IAA1B,EA8MT3H,UAAU,8BAMlB,iBACEA,UAAS,wBAAmBgD,IAAkB,mBADhD,WAGE,eACEkE,MAAO,CACLU,UAAW5E,GAAiB,SAAW,QAF3C,SAKIA,GAAoC,UAAnB,mBAGpBA,KACC,+BACE,iBACEhD,UAAS,gCACP8C,IAAgB,oBAFpB,WAKE,kBACE9C,UAAU,oBACVyH,KAAK,OACLI,OAAO,UACPX,MAAO,CAAEY,QAAS,QAClBC,UAAU,EACVC,IAAKrF,GACL2E,SAAU,SAAC5B,GAAD,OAAOD,GAAaC,EAAG,OAAvB,KAGV5C,KACA,iCACE,mBAAQ1C,QAAS,kBAAMuC,GAAamC,QAAQmD,OAA3B,EAAjB,qBAGA,kCAIJ,mBAAQ7H,QAxKE,SAACsF,GACtB5C,GAGH2C,GAAaC,EAAG,QAFhB3C,IAAgB,EAInB,EAkKiB,SACID,GAA8B,SAAf,eAElBA,KACC,kBACE9C,UAAS,wBACPgD,IAAkB,aAEpBkF,YAAa,6BACbX,MAAO3E,GACP0E,SAAU,SAAC5B,GAAD,OAAO7C,GAAW6C,EAAEV,OAAOuC,MAA3B,UAOlBvE,KACA,iCACE,cAAGhD,UAAU,sBAAb,6BACA,kBACEgI,IAAKxG,EACL+F,MAAO5F,EACP3B,UAAU,cACVmI,OAtRO,WACnBlG,EAAUmG,MAEf,EAoRiBd,SAAU,SAAC5B,GACTlE,EAASsD,QAAUnD,EACnBC,EAAc8D,EAAEV,OAAOuC,MACxB,IAEFtG,IACC,gBAAKjB,UAAU,0BAAf,UACE,gBAAKA,UAAU,sCAGlBiC,EAAUmG,OAAS,GAAoB,KAAfzG,IACvB,SAAC,EAAD,CACE7B,KAAMmC,EACNlC,WA7SM,SAACI,GAAU,IAAD,EAClCyB,EAAczB,EAAKK,MACnBsB,EAAW3B,EAAKkI,IAChBrG,EAAc,mDAAD,iBACwC7B,EAAKG,aAD7C,aACwC,EAAYgI,SADpD,SAGbpG,EAAa,GACd,QA4Sac,KACA,iCACE,cAAGhD,UAAU,wBAAb,+BACA,kBACEgI,IAAKxG,EACL+F,MAAOlF,EACPiF,SAAU,SAAC5B,GACTvD,EAAW2C,QAAUzC,EACrBC,EAAgBoD,EAAEV,OAAOuC,MAC1B,EACDvH,UAAS,wBAAmBgD,IAAkB,aAC9CkF,YACElF,GAAiB,0BAA4B,SAMrD,iBAAKhD,UAAU,iBAAf,WACIgD,KACA,iCACE,cAAGhD,UAAU,sBAAb,6BACA,oBAAQI,QAAS,kBAAMoD,IAAkBD,GAAxB,EAAjB,eACoBgF,IAAjB7E,GAAA,UACMA,IACH,SAAU,KACd,SAAC,MAAD,CAAa1D,UAAU,sBAK5BuD,KACC,gBAAKyE,IAAK1E,GAAUtD,UAAU,yBAA9B,SAzZE,CAChB,SACA,YACA,SACA,eACA,SACA,WACA,QACA,4BACA,aACA,SACA,SACA,MACA,UACA,SACA,YA2Y2BE,KAAI,SAACsI,GAAD,OACb,iBACEpI,QAAS,kBAvUJ,SAACoI,GAC1B7E,GAAgB6E,GAChBhF,IAAiB,EAClB,CAoUoCiF,CAAmBD,EAAzB,EADX,SAIGA,GAFIA,EAHM,mBAe3B,iBAAKxI,UAAU,eAAf,WACIgD,KACA,mBAAQhD,UAAU,WAAWI,QAAS6F,GAAtC,mBAIF,mBAAQjG,UAAU,aAAaI,QApVX,WAEtB4C,IACFC,IAAkB,GAClBF,IAAgB,IAIhBtC,EAAM6E,iBAET,EA0UO,SACItC,GAA4B,OAAX,YAEnBnC,IACA,mBACEb,UAAU,mCACVI,QAAS8E,GAFX,oCAWX,C,wMClKD,EApUwB,SAACzE,GACvB,IACA,GAA8BK,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOoC,EAAP,KAAsBC,EAAtB,KACA,GAA0BrC,EAAAA,EAAAA,UAAS,IAAnC,eAAOsC,EAAP,KAAcC,EAAd,KAEA,GAA0BvC,EAAAA,EAAAA,UAAS,IAAnC,eAAO4H,EAAP,KAAcC,EAAd,KACA,GAAgC7H,EAAAA,EAAAA,WAAS,GAAzC,eAAO8H,EAAP,KAAiBC,EAAjB,KACA,GAAkC/H,EAAAA,EAAAA,UAAS,MAA3C,eACA,GADA,WACkCA,EAAAA,EAAAA,UAAS,KAA3C,eAAOQ,EAAP,KAAkBC,EAAlB,KACA,GAAwCT,EAAAA,EAAAA,UAAS,IAAjD,eAAOuB,EAAP,KAAqBC,EAArB,KACA,GAAoCxB,EAAAA,EAAAA,UAAS,IAA7C,eAAOa,EAAP,KAAmBC,EAAnB,KAEA,GAA0Cd,EAAAA,EAAAA,UAAS,MAAnD,eAAO2B,EAAP,KAAsBC,EAAtB,KACA,GAA0D5B,EAAAA,EAAAA,WAAS,GAAnE,eAAOgI,EAAP,KAA8BC,EAA9B,KACA,GAAkCjI,EAAAA,EAAAA,UAAS,IAA3C,eAAOkI,GAAP,KAAkBC,GAAlB,KACA,IAAkCnI,EAAAA,EAAAA,WAAS,GAA3C,iBAAOoI,GAAP,MAAkBC,GAAlB,MACMxG,IAAelB,EAAAA,EAAAA,QAAO,IAEtB6B,IAAW7B,EAAAA,EAAAA,QAAO,IACxB,IAA0CX,EAAAA,EAAAA,WAAS,GAAnD,iBAAOyC,GAAP,MAAsBC,GAAtB,MACA,IAAwC1C,EAAAA,EAAAA,UAAS,IAAjD,iBAAO4C,GAAP,MAAqBC,GAArB,OAoBAC,EAAAA,EAAAA,YAAU,WACR,IAAMW,EAAY,SAACC,GACK,KAAlBA,EAAMC,SACRtB,GAAiB,EAEpB,EAGD,OAFAuB,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,GAAE,KAGHX,EAAAA,EAAAA,YAAU,WACR,SAASiB,EAAmBL,GACtBlB,GAASwB,UAAYxB,GAASwB,QAAQC,SAASP,EAAMQ,SACvDxB,IAAiB,EAEpB,CAED,OADAyB,SAASN,iBAAiB,YAAaE,GAChC,WACLI,SAASL,oBAAoB,YAAaC,EAC3C,CACF,GAAE,CAACvB,KAEJ,IAUM8F,GAA6B,SAAC1D,EAAGC,GACvB,QAAVA,EACFjD,EAAiBqD,IAAIC,gBAAgBN,EAAEV,OAAOc,MAAM,MAEpDqD,IAAa,GACbJ,GAAyB,GAE5B,EAEK9C,GAAY,yCAAG,WAAOP,GAAP,iFACnBA,EAAEQ,iBACFlF,GAAW,GACXmC,GAAiB,GAEO,IAApB7B,EAAUgF,OALK,wBAMjBuC,GAAY,GACZF,EAAS,8BACT3H,GAAW,GARM,8BAUe,IAAvBqB,EAAaiE,OAVL,wBAWjBuC,GAAY,GACZF,EAAS,sCACT3H,GAAW,GAbM,kCAiBbmF,EAAW,CACfhB,MAAO1E,EAAM2E,UACb5C,OAAQC,EACRjC,KAAMc,EAAUgF,OAChBlD,MAAOA,EACPoD,cAAe9C,GAAa4C,OAC5BG,aAAc9E,EAAW2E,OACzBM,gBAAiBvE,EAAaiE,QAxBb,oBA4BKtC,IAAAA,KAAA,UAlHVrD,gCAkHU,2BAEpBwF,GA9Be,QA4BX/B,EA5BW,OAgCjBhD,aAAayF,QAAQ,OAAQwC,KAAKC,UAAUlF,EAAQC,KAAKyC,WACzDrG,EAAM8I,aACN9I,EAAM6E,kBAlCW,mDAoCjBC,QAAQC,IAAR,MApCiB,QAsCnBuD,GAAyB,GACzB/H,GAAW,GAvCQ,2DAAH,sDA2ClB,OAAID,GAEA,iBAAKf,UAAU,0BAAf,WACE,gBAAKA,UAAU,uBAAf,UACE,wCAEF,gBAAKA,UAAU,6BAAf,UACE,gBAAKA,UAAU,mBAAf,UACE,gBAAKA,UAAU,qCAQvB,+BAEE,iBACEA,UAAU,0BADZ,WAIE,gBAAKA,UAAU,uBAAf,UACE,wCAEF,iBAAKA,UAAU,6BAAf,WAEE,iBACEA,UAAS,4BACM,GAAbkJ,IACyB,GAAzBJ,GACA,eAHO,YAKM,GAAbI,IACyB,GAAzBJ,GACA,4BARJ,WAWE,yCACA,iBAAK9I,UAAU,gBAAf,WACE,6EAEA,iBAAKA,UAAU,aAAf,WACE,kBACEuH,MAAOyB,GACP1B,SAAU,SAAC5B,GAAD,OAAOuD,GAAavD,EAAEV,OAAOuC,MAA7B,KAEZ,mBAAQnH,QAxGG,SAACsF,GACxBhD,EAAiBsG,IACjBG,IAAa,EACd,EAqGa,qBACA,mBAAQ/I,QAAS,kBAAM+I,IAAa,EAAnB,EAAjB,4BAIN,4CACA,iBAAKnJ,UAAU,iBAAf,WAEE,iBAAKA,UAAU,wBAAf,WAEE,gBACEkH,MAAO,CACLE,gBAA0B,IAAThE,EAAc,OAASA,EACxCoG,UAAW,SAEbxJ,UAAU,iBACVK,IAAsB,MAAjBoC,EAAwBgH,EAAgBhH,KAG/C,iBAAKzC,UAAU,yBAAf,WAEE,kBAAMA,UAAU,qBAAhB,WACE,kBACEA,UAAU,oBACVyH,KAAK,OACLI,OAAO,UACPX,MAAO,CAAEY,QAAS,QAClBC,UAAU,EACVC,IAAKrF,GACL2E,SAAU,SAAC5B,GAAD,OAAO0D,GAA2B1D,EAAG,OAArC,KAEZ,SAAC,MAAD,CACEtF,QAAS,SAACsF,GAAD,OAAO/C,GAAamC,QAAQmD,OAA5B,QAIb,iBAAMjI,UAAU,qBAAhB,UACE,SAAC,MAAD,CAAQI,QAAS,SAACsF,GAAD,OAAO0D,GAA2B,OAAlC,aAKvB,iBAAKpJ,UAAU,aAAf,WACE,kBAAMA,UAAU,qBAAhB,WAEE,kBACEA,UAAU,aACVkI,YAAY,OACZZ,SAAU,SAAC5B,GACTnE,EAAamE,EAAEV,OAAOuC,OACtBsB,GAAY,EACb,EACDtB,MAAOjG,EACPkG,WAAS,KAIX,kCACA,kBACExH,UAAU,cACVkH,MAAO,CACL9D,MAAOA,EACPsG,WAAY,OAEdpC,SAAU,SAAC5B,GAAD,OAAOrC,EAASqC,EAAEV,OAAOuC,MAAzB,EACVA,MAAOnE,KAET,mBACEqE,KAAK,SACLrH,QAAS,kBAAM+C,GAAkBD,EAAxB,EACTgE,MAAO,CACLE,gBAAiBhE,KAGpBF,IACC,SAAC,KAAD,CACEE,MAAOA,EACPsE,iBA1LS,SAACtE,GAAD,OAAWC,EAASD,EAAMuE,IAA1B,EA2LT3H,UAAU,8BAMhB,iBAAKA,UAAU,gBAAf,WACE,4CAGA,cAAGA,UAAU,wBAAb,+BACA,kBACEuH,MAAOlF,EACPiF,SAAU,SAAC5B,GACTpD,EAAgBoD,EAAEV,OAAOuC,MAC1B,EACDvH,UAAU,mBAIZ,cAAGA,UAAU,sBAAb,6BACA,kBACEuH,MAAO5F,EACP3B,UAAU,cACVsH,SAAU,SAAC5B,GACT9D,EAAc8D,EAAEV,OAAOuC,MACxB,KAIH,iBAAKvH,UAAU,iBAAf,WACE,cAAGA,UAAU,sBAAb,6BACA,oBAAQI,QAAS,kBAAMoD,IAAkBD,GAAxB,EAAjB,UACoB,KAAjBG,GAAA,UAAyBA,IAAiB,SAAU,KACrD,SAAC,MAAD,CAAa1D,UAAU,mBAGxBuD,KACC,gBAAKyE,IAAK1E,GAAUtD,UAAU,yBAA9B,SA9QA,CAChB,SACA,YACA,SACA,eACA,SACA,WACA,QACA,4BACA,aACA,SACA,SACA,MACA,UACA,SACA,YAgQ6BE,KAAI,SAACsI,GAAD,OACb,iBACEpI,QAAS,kBAnON,SAACoI,GAC1B7E,GAAgB6E,GAChBhF,IAAiB,EAClB,CAgOsCiF,CAAmBD,EAAzB,EADX,SAIGA,GAFIA,EAHM,mBAe3B,iBAAKxI,UAAU,eAAf,WACE,mBAAQA,UAAU,WAAWI,QAAS6F,GAAtC,mBAGA,mBAAQjG,UAAU,aAAaI,QAASK,EAAM6E,gBAA9C,uBAIDsD,IAAY,cAAG5I,UAAU,uBAAb,SAAqC0I,WAK3D,ECxND,EA3GqB,SAACjI,GACpB,OAA8CK,EAAAA,EAAAA,WAAS,GAAvD,eAAO6I,EAAP,KAAwBC,EAAxB,KACA,GAA8C9I,EAAAA,EAAAA,UAAS,MAAvD,eAAO+I,EAAP,KAAwBC,EAAxB,KACA,GAAgChJ,EAAAA,EAAAA,UAAS,MAAzC,eAAOiJ,EAAP,KAAiBC,EAAjB,KAcMC,EAAuB,SAAClD,GACvB4C,EAEHG,EAAmB/C,GAdM,SAACA,GAC5B3F,aAAayF,QAAQ,UAAWE,EAAKvG,MACrCC,EAAMyJ,cAAcnD,EACrB,CASuBoD,CAAqBpD,EAI5C,EAOD,IAJAnD,EAAAA,EAAAA,YAAU,WACRoG,EAAYvJ,EAAM2J,YAAYL,SAC/B,GAAE,CAACtJ,EAAM2J,cAEM,MAAZL,EAMJ,OAFAxE,QAAQC,IAAIuE,GAEY,OAApBF,GAAgD,QAApBA,GAE5B,SAACQ,EAAA,EAAD,CACEhF,SAAU5E,EAAM4E,SAChBzE,eAAgBiJ,EAChBvE,gBAAiB,kBAAMwE,EAAmB,KAAzB,EACjB1E,UAAW3E,EAAM2J,YAAYjF,MAC7BmF,WAAY,SAACC,GAAD,OAAUhF,QAAQC,IAAI+E,EAAtB,EACZpG,YAAa1D,EAAM0D,cAKD,OAApB0F,GAA+C,OAAnBA,GAE5B,SAAC,EAAD,CACEN,WAvCiB,WACrB9I,EAAM+J,cACP,EAsCKpF,UAAW3E,EAAM2J,YAAYjF,MAC7BG,gBAAiB,kBAAMwE,EAAmB,KAAzB,KAKvBC,EAASU,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE7J,SAAW,EAAI8J,EAAE9J,QAAU,EAAI,CAA5C,KAGZ,iBAAKb,UAAU,gBAAf,WACE,gBAAKA,UAAU,uBAAf,UACE,wCAEF,iBAAKA,UAAU,qBAAf,WACE,2CACA,eAAIA,UAAU,gBAAd,SACG+J,EAAS7J,KAAI,SAAC6G,GAAD,OACZ,gBAEE/G,UAAU,gBACVI,QAAS,kBAAM6J,EAAqBlD,EAA3B,EAHX,WAKE,gBACE/G,UAAS,+BACP2J,GAAmB,WAErBzC,MAAO,CAAEE,gBAAiBL,EAAK3D,OAC/B/C,IAAK0G,EAAKvE,OAAL,UAAiBuE,EAAKvE,QAAWiH,IAEvCE,IAAmB,SAAC,MAAD,CAAQ3J,UAAU,eACtC,iBAAMA,UAAU,qBAAhB,SAAsC+G,EAAKvG,SAZtCuG,EAAKvG,KAFA,OAkBhB,iBAAKR,UAAU,mBAAf,WACE,mBACEA,UAAS,8BAAyB2J,GAAmB,YACrDvJ,QAAS,kBAAMwJ,GAAoBD,EAA1B,EAFX,SAIGA,EAAkB,OAAS,oBAE7BI,EAAS3B,OAAS,IACjB,mBACEpI,UAAU,mBACVI,QAAS,kBAAM0J,EAAmB,MAAzB,EAFX,kCAWX,C","sources":["components/Login/Profiles/ProfileEditor/SearchList.js","components/Login/Profiles/ProfileEditor/ProfileEditor.js","components/Login/Profiles/ProfileEditor/ProfileCreation.js","components/Login/Profiles/ProfilesPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './ProfileEditor.css';\r\n\r\nconst SearchList = ({ list, selectGame }) => {\r\n  return (\r\n    <div className='search_list_container'>\r\n      <ul className='search_list'>\r\n        {list.slice(0, 5).map((game) => (\r\n          <li className='search_list_item' onClick={() => selectGame(game)}>\r\n            <img className='item_thumbnail' src={game.cover.url} />\r\n            <p className='item_title'>{game.name}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchList;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './ProfileEditor.css';\r\nimport SearchList from './SearchList';\r\nimport axios from 'axios';\r\nimport { MdEdit } from 'react-icons/md';\r\nimport { SketchPicker } from 'react-color';\r\nimport { FaAngleDown } from 'react-icons/fa';\r\n\r\nconst ProfileEditor = (props) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const currentProfile = props.currentProfile;\r\n  const isAdmin = currentProfile.isAdmin;\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchLoading, setSearchLoading] = useState(false);\r\n  // Current Profile Name\r\n  const currentProfileName =\r\n    localStorage.getItem('profile') || currentProfile.name;\r\n  const [nameValue, setNameValue] = useState(currentProfileName);\r\n  // Title Input State and Ref\r\n  const titleRef = useRef('');\r\n  const [titleValue, setTitleValue] = useState(currentProfile.favorite_game);\r\n  const [titleId, setTitleId] = useState(0);\r\n  const [titleImage, setTitleImage] = useState('');\r\n  const [titleList, setTitleList] = useState([]);\r\n  let searchValue = '';\r\n  // Console Input State and Ref\r\n  const consoleRef = useRef('');\r\n  const [consoleValue, setConsoleValue] = useState(\r\n    currentProfile.favorite_console\r\n  );\r\n  // Profile form states\r\n  const [statusMessage, setStatusMessage] = useState('');\r\n  const [currentAvatar, setCurrentAvatar] = useState(currentProfile.avatar);\r\n  const [imgFilePreview, setImgFilePreview] = useState(null);\r\n  const fileInputRef = useRef('');\r\n  const [imgLink, setImgLink] = useState('');\r\n  const [usingImgLink, setUsingImgLink] = useState(false);\r\n  const [changingAvatar, setChangingAvatar] = useState(false);\r\n  // Color states\r\n  const [changingColor, setChangingColor] = useState(false);\r\n  const [color, setColor] = useState(currentProfile.color);\r\n  // Genre states\r\n  const genreRef = useRef('');\r\n  const [changingGenre, setChangingGenre] = useState(false);\r\n  const [currentGenre, setCurrentGenre] = useState(\r\n    currentProfile.favorite_genre\r\n  );\r\n\r\n  const genreList = [\r\n    'Action',\r\n    'Adventure',\r\n    'Arcade',\r\n    'Card & Board',\r\n    'Family',\r\n    'Fighting',\r\n    'Indie',\r\n    'MMO (Massive Multiplayer)',\r\n    'Platformer',\r\n    'Puzzle',\r\n    'Racing',\r\n    'RPG',\r\n    'Shooter',\r\n    'Sports',\r\n    'Strategy',\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (\r\n      titleValue == '' ||\r\n      titleValue == currentProfile.favorite_game ||\r\n      searchLoading\r\n    ) {\r\n      setTitleList([]);\r\n      return;\r\n    }\r\n    const delaySearch = setTimeout(() => {\r\n      setSearchLoading(true);\r\n      const fetchSearchedGame = async () => {\r\n        const request = await axios.post(`${baseURL}/app/search_game`, {\r\n          gameName: titleValue,\r\n          token: props.twitchToken,\r\n        });\r\n        setTitleList(request.data);\r\n        setSearchLoading(false);\r\n      };\r\n      fetchSearchedGame();\r\n    }, 500);\r\n\r\n    return () => clearTimeout(delaySearch);\r\n  }, [titleValue]);\r\n\r\n  // Listen for escape key press to close out color palette\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        setChangingColor(false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  // Listen for clicks outside of genre dropdown box\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (genreRef.current && !genreRef.current.contains(event.target)) {\r\n        setChangingGenre(false);\r\n      }\r\n    }\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [genreRef]);\r\n\r\n  const selectGameHandler = (game) => {\r\n    setTitleValue(game.name);\r\n    setTitleId(game.id);\r\n    setTitleImage(\r\n      `//images.igdb.com/igdb/image/upload/t_cover_big/${game.cover?.image_id}.jpg`\r\n    );\r\n    setTitleList([]);\r\n  };\r\n\r\n  const titleBlurHandler = () => {\r\n    if (titleList.length > 0) {\r\n    }\r\n  };\r\n\r\n  const colorChangeHandler = (color) => setColor(color.hex);\r\n  const genreChangeHandler = (genre) => {\r\n    setCurrentGenre(genre);\r\n    setChangingGenre(false);\r\n  };\r\n\r\n  // Determine cancel button functionality\r\n  const cancelButtonHandler = () => {\r\n    // If user is changing avatars, return to editing profile\r\n    if (changingAvatar) {\r\n      setChangingAvatar(false);\r\n      setUsingImgLink(false);\r\n    }\r\n    // If the user is editing profile, return to all profiles\r\n    else {\r\n      props.viewAllProfiles();\r\n    }\r\n  };\r\n\r\n  // Delete single profile\r\n  const deleteProfileHandler = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const request = await axios.delete(`${baseURL}/app/delete_profile`, {\r\n        data: { email: props.userEmail, name: currentProfile.name },\r\n      });\r\n      props.saveEdit();\r\n      props.viewAllProfiles();\r\n    } catch (error) {\r\n      console.log(error);\r\n      return error;\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Avatar profile image handling\r\n  const updateAvatar = async (e, method) => {\r\n    setLoading(true);\r\n    // Append email and profile name to find correct profile to update\r\n    const data = new FormData();\r\n    data.append('email', props.userEmail);\r\n    data.append('name', currentProfile.name);\r\n    // User uploads image\r\n    if (method == 'file') {\r\n      data.append('avatar', e.target.files[0]);\r\n      try {\r\n        const request = await axios.post(\r\n          `${baseURL}/app/update_avatar_file`,\r\n          data\r\n        );\r\n        setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\r\n      } catch (e) {\r\n        console.log(e);\r\n        return e;\r\n      }\r\n      setLoading(false);\r\n    }\r\n\r\n    // If user uses a link to an image\r\n    else {\r\n      const data = {\r\n        email: props.userEmail,\r\n        name: currentProfile.name,\r\n        avatar: imgLink,\r\n      };\r\n      try {\r\n        const request = await axios.post(\r\n          `${baseURL}/app/update_avatar_link`,\r\n          data\r\n        );\r\n        setCurrentAvatar(imgLink);\r\n      } catch (e) {\r\n        console.log(e);\r\n        return e;\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // If user isn't using the link, display the link modal\r\n  // Or else submit the link url and close the modal\r\n  const determineLinkAction = (e) => {\r\n    if (!usingImgLink) {\r\n      setUsingImgLink(true);\r\n    } else {\r\n      updateAvatar(e, 'link');\r\n    }\r\n  };\r\n\r\n  // Update Profile in Mongo Database\r\n  const saveUserData = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    // Make inputs OPTIONAL\r\n    const userData = {\r\n      email: props.userEmail,\r\n      originalName: currentProfile.name,\r\n      newName: nameValue.trim(),\r\n      newColor: color,\r\n      favoriteGenre: currentGenre ? currentGenre.trim() : 'Action',\r\n      favoriteGame: titleValue ? titleValue.trim() : 'None',\r\n      gameId: titleId,\r\n      imageURL: titleImage,\r\n      favoriteConsole: consoleValue ? consoleValue.trim() : 'None',\r\n      twitchToken: props.twitchToken,\r\n    };\r\n\r\n    try {\r\n      const request = await axios.post(\r\n        `${baseURL}/app/update_user_profile`,\r\n        userData\r\n      );\r\n\r\n      localStorage.setItem('user', request.data.response.user.email);\r\n      localStorage.setItem('profile', request.data.response.profile.name);\r\n      setStatusMessage(request.data.message);\r\n      props.saveEdit();\r\n      props.viewAllProfiles();\r\n    } catch (error) {\r\n      setStatusMessage(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Loading spinner\r\n  if (loading) {\r\n    return (\r\n      <div className='profile_edit__container'>\r\n        <div className='profile_edit__header'>\r\n          <h3>GAMEFLIX</h3>\r\n        </div>\r\n        <div className='profile_edit__form_wrapper'>\r\n          <div className='profile__loading'>\r\n            <div className='profile__loading_spinner' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='profile_edit__container'>\r\n      <div className='profile_edit__header'>\r\n        <h3>GAMEFLIX</h3>\r\n      </div>\r\n      <div className='profile_edit__form_wrapper'>\r\n        <h3>{currentProfile !== true ? 'Edit Profile' : 'Create Profile'}</h3>\r\n        <div\r\n          className={`form_container ${\r\n            changingAvatar && 'avatar_select_container'\r\n          }`}\r\n        >\r\n          {/* USER AVATAR CONTAINER */}\r\n          <div\r\n            style={{ paddingTop: changingAvatar && '10px' }}\r\n            className='form_avatar_container'\r\n          >\r\n            <img\r\n              className={`current_avatar ${changingAvatar && 'avatar_select'}`}\r\n              style={{\r\n                backgroundColor: color ? color : currentProfile.color,\r\n              }}\r\n              src={currentAvatar}\r\n            />\r\n            {!changingAvatar && (\r\n              <span\r\n                className='current_avatar_edit'\r\n                onClick={() => setChangingAvatar(true)}\r\n              >\r\n                <MdEdit style={{ height: '100%' }} />\r\n              </span>\r\n            )}\r\n          </div>\r\n          {/* USER FORM */}\r\n          <div className='form_right'>\r\n            {!changingAvatar && (\r\n              <form className='profile_edit__form'>\r\n                {/* NAME */}\r\n                <input\r\n                  className='name_input'\r\n                  onChange={(e) => setNameValue(e.target.value)}\r\n                  value={nameValue}\r\n                  autoFocus\r\n                />\r\n                {/* COLOR */}\r\n                <p>Color</p>\r\n                <input\r\n                  className='color_input'\r\n                  style={{\r\n                    color: color,\r\n                  }}\r\n                  onChange={(e) => setColor(e.target.value)}\r\n                  value={color}\r\n                />\r\n                <button\r\n                  type='button'\r\n                  onClick={() => setChangingColor(!changingColor)}\r\n                  style={{\r\n                    backgroundColor: color,\r\n                  }}\r\n                />\r\n                {changingColor && (\r\n                  <SketchPicker\r\n                    color={color}\r\n                    onChangeComplete={colorChangeHandler}\r\n                    className='profile_color_palette'\r\n                  />\r\n                )}\r\n              </form>\r\n            )}\r\n            {/* USER PERSONAL */}\r\n            <div\r\n              className={`form_personal ${changingAvatar && 'personal_avatar'}`}\r\n            >\r\n              <h4\r\n                style={{\r\n                  textAlign: changingAvatar ? 'center' : 'left',\r\n                }}\r\n              >\r\n                {!changingAvatar ? 'Your Playstyle' : 'Current'}\r\n              </h4>\r\n              {/* AVATAR FILE */}\r\n              {changingAvatar && (\r\n                <>\r\n                  <div\r\n                    className={`upload_avatar_actions ${\r\n                      usingImgLink && 'img_link_actions'\r\n                    }`}\r\n                  >\r\n                    <input\r\n                      className='upload_file_input'\r\n                      type='file'\r\n                      accept='image/*'\r\n                      style={{ display: 'none' }}\r\n                      multiple={false}\r\n                      ref={fileInputRef}\r\n                      onChange={(e) => updateAvatar(e, 'file')}\r\n                    />\r\n\r\n                    {!usingImgLink && (\r\n                      <>\r\n                        <button onClick={() => fileInputRef.current.click()}>\r\n                          Upload\r\n                        </button>\r\n                        <p>OR</p>\r\n                      </>\r\n                    )}\r\n                    {/* AVATAR URL */}\r\n                    <button onClick={determineLinkAction}>\r\n                      {!usingImgLink ? 'Enter link' : 'Submit'}\r\n                    </button>\r\n                    {usingImgLink && (\r\n                      <input\r\n                        className={`console_input ${\r\n                          changingAvatar && 'img_input'\r\n                        }`}\r\n                        placeholder={'Enter link to image or gif'}\r\n                        value={imgLink}\r\n                        onChange={(e) => setImgLink(e.target.value)}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n              {/* TITLE */}\r\n              {!changingAvatar && (\r\n                <>\r\n                  <p className='form_personal_title'>Favorite Title</p>\r\n                  <input\r\n                    ref={titleRef}\r\n                    value={titleValue}\r\n                    className='title_input'\r\n                    onBlur={titleBlurHandler}\r\n                    onChange={(e) => {\r\n                      titleRef.current = titleValue;\r\n                      setTitleValue(e.target.value);\r\n                    }}\r\n                  />\r\n                  {searchLoading && (\r\n                    <div className='profile__search_loading'>\r\n                      <div className='profile__search_loading_spinner' />\r\n                    </div>\r\n                  )}\r\n                  {titleList.length > 0 && titleValue !== '' && (\r\n                    <SearchList\r\n                      list={titleList}\r\n                      selectGame={selectGameHandler}\r\n                    />\r\n                  )}\r\n                </>\r\n              )}\r\n              {/* CONSOLE */}\r\n              {!changingAvatar && (\r\n                <>\r\n                  <p className='form_personal_console'>Favorite Console</p>\r\n                  <input\r\n                    ref={titleRef}\r\n                    value={consoleValue}\r\n                    onChange={(e) => {\r\n                      consoleRef.current = consoleValue;\r\n                      setConsoleValue(e.target.value);\r\n                    }}\r\n                    className={`console_input ${changingAvatar && 'img_input'}`}\r\n                    placeholder={\r\n                      changingAvatar ? 'https://www.example.com' : ''\r\n                    }\r\n                  />\r\n                </>\r\n              )}\r\n              {/* GENRE */}\r\n              <div className='genre_dropdown'>\r\n                {!changingAvatar && (\r\n                  <>\r\n                    <p className='form_personal_genre'>Favorite Genre</p>\r\n                    <button onClick={() => setChangingGenre(!changingGenre)}>\r\n                      {currentGenre !== undefined\r\n                        ? `${currentGenre}`\r\n                        : 'Action'}{' '}\r\n                      <FaAngleDown className='genre_arrow' />\r\n                    </button>\r\n                  </>\r\n                )}\r\n                {/* <FaAngleDown className='genre_arrow' /> */}\r\n                {changingGenre && (\r\n                  <div ref={genreRef} className='genre_dropdown_content'>\r\n                    {genreList.map((genre) => (\r\n                      <span\r\n                        onClick={() => genreChangeHandler(genre)}\r\n                        key={genre}\r\n                      >\r\n                        {genre}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* FORM ACTIONS */}\r\n        <div className='form_actions'>\r\n          {!changingAvatar && (\r\n            <button className='save_btn' onClick={saveUserData}>\r\n              Save\r\n            </button>\r\n          )}\r\n          <button className='cancel_btn' onClick={cancelButtonHandler}>\r\n            {!changingAvatar ? 'Cancel' : 'Back'}\r\n          </button>\r\n          {!isAdmin && (\r\n            <button\r\n              className='delete_profile_btn justify-start'\r\n              onClick={deleteProfileHandler}\r\n            >\r\n              Delete Profile\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileEditor;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport defaultAvatar from '../../../../assets/images/basic_avatar.png';\r\nimport { SketchPicker } from 'react-color';\r\nimport { FaAngleDown } from 'react-icons/fa';\r\nimport axios from 'axios';\r\nimport './ProfileEditor.css';\r\nimport { FaCloudUploadAlt, FaLink } from 'react-icons/fa';\r\n\r\nconst ProfileCreation = (props) => {\r\n  const baseURL = process.env.REACT_APP_BASE_URL;\r\n  const [loading, setLoading] = useState(false);\r\n  // Color states\r\n  const [changingColor, setChangingColor] = useState(false);\r\n  const [color, setColor] = useState('');\r\n  // Form States\r\n  const [error, setError] = useState('');\r\n  const [hasError, setHasError] = useState(false);\r\n  const [typeError, setTypeError] = useState(null);\r\n  const [nameValue, setNameValue] = useState('');\r\n  const [consoleValue, setConsoleValue] = useState('');\r\n  const [titleValue, setTitleValue] = useState('');\r\n  // Avatar States\r\n  const [currentAvatar, setCurrentAvatar] = useState(null);\r\n  const [startingCreateProfile, setStartingCreateProfile] = useState(true);\r\n  const [imageLink, setImageLink] = useState('');\r\n  const [usingLink, setUsingLink] = useState(false);\r\n  const fileInputRef = useRef('');\r\n  // Genre Input States\r\n  const genreRef = useRef('');\r\n  const [changingGenre, setChangingGenre] = useState(false);\r\n  const [currentGenre, setCurrentGenre] = useState('');\r\n  const genreList = [\r\n    'Action',\r\n    'Adventure',\r\n    'Arcade',\r\n    'Card & Board',\r\n    'Family',\r\n    'Fighting',\r\n    'Indie',\r\n    'MMO (Massive Multiplayer)',\r\n    'Platformer',\r\n    'Puzzle',\r\n    'Racing',\r\n    'RPG',\r\n    'Shooter',\r\n    'Sports',\r\n    'Strategy',\r\n  ];\r\n\r\n  // Listen for escape key press to close out color palette\r\n  useEffect(() => {\r\n    const handleEsc = (event) => {\r\n      if (event.keyCode === 27) {\r\n        setChangingColor(false);\r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleEsc);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEsc);\r\n    };\r\n  }, []);\r\n\r\n  // Listen for clicks outside of genre dropdown box\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (genreRef.current && !genreRef.current.contains(event.target)) {\r\n        setChangingGenre(false);\r\n      }\r\n    }\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [genreRef]);\r\n\r\n  const colorChangeHandler = (color) => setColor(color.hex);\r\n  const genreChangeHandler = (genre) => {\r\n    setCurrentGenre(genre);\r\n    setChangingGenre(false);\r\n  };\r\n  const imageLinkHandler = (e) => {\r\n    setCurrentAvatar(imageLink);\r\n    setUsingLink(false);\r\n  };\r\n\r\n  const uploadProfileAvatarHandler = (e, method) => {\r\n    if (method == 'file') {\r\n      setCurrentAvatar(URL.createObjectURL(e.target.files[0]));\r\n    } else {\r\n      setUsingLink(true);\r\n      setStartingCreateProfile(false);\r\n    }\r\n  };\r\n\r\n  const saveUserData = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setChangingColor(false);\r\n\r\n    if (nameValue.trim() == '') {\r\n      setHasError(true);\r\n      setError('Please enter a valid name!');\r\n      setLoading(false);\r\n      return;\r\n    } else if (consoleValue.trim() == '') {\r\n      setHasError(true);\r\n      setError('Please enter a valid game console!');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      email: props.userEmail,\r\n      avatar: currentAvatar,\r\n      name: nameValue.trim(),\r\n      color: color,\r\n      favoriteGenre: currentGenre.trim(),\r\n      favoriteGame: titleValue.trim(),\r\n      favoriteConsole: consoleValue.trim(),\r\n    };\r\n\r\n    try {\r\n      const request = await axios.post(\r\n        `${baseURL}/app/create_new_profile`,\r\n        userData\r\n      );\r\n      localStorage.setItem('user', JSON.stringify(request.data.response));\r\n      props.updateUser();\r\n      props.viewAllProfiles();\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n    setStartingCreateProfile(true);\r\n    setLoading(false);\r\n  };\r\n\r\n  // Loading spinner\r\n  if (loading) {\r\n    return (\r\n      <div className='profile_edit__container'>\r\n        <div className='profile_edit__header'>\r\n          <h3>GAMEFLIX</h3>\r\n        </div>\r\n        <div className='profile_edit__form_wrapper'>\r\n          <div className='profile__loading'>\r\n            <div className='profile__loading_spinner' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* PROFILE CREATION CONTAINER */}\r\n      <div\r\n        className='profile_edit__container'\r\n        // style={{ opacity: usingLink && '.25' }}\r\n      >\r\n        <div className='profile_edit__header'>\r\n          <h3>GAMEFLIX</h3>\r\n        </div>\r\n        <div className='profile_edit__form_wrapper'>\r\n          {/* MODAL */}\r\n          <div\r\n            className={`avatar_link_modal ${\r\n              usingLink == false &&\r\n              startingCreateProfile == false &&\r\n              'modal_hidden'\r\n            } ${\r\n              usingLink == false &&\r\n              startingCreateProfile == true &&\r\n              'avatar_link_modal_launch'\r\n            }`}\r\n          >\r\n            <h3>Avatar Link</h3>\r\n            <div className='modal_content'>\r\n              <p>Please enter the link to any image or gif below.</p>\r\n\r\n              <div className='modal_form'>\r\n                <input\r\n                  value={imageLink}\r\n                  onChange={(e) => setImageLink(e.target.value)}\r\n                />\r\n                <button onClick={imageLinkHandler}>Submit</button>\r\n                <button onClick={() => setUsingLink(false)}>Back</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <h3>Create Profile</h3>\r\n          <div className='form_container'>\r\n            {/* USER AVATAR CONTAINER */}\r\n            <div className='form_avatar_container'>\r\n              {/* AVATAR IMAGE */}\r\n              <img\r\n                style={{\r\n                  backgroundColor: color == '' ? '#FFF' : color,\r\n                  objectFit: 'cover',\r\n                }}\r\n                className='current_avatar'\r\n                src={currentAvatar == null ? defaultAvatar : currentAvatar}\r\n              />\r\n              {/* AVATAR IMAGE ACTIONS */}\r\n              <div className='profile_avatar_actions'>\r\n                {/* File Upload */}\r\n                <span className='avatar_file_option'>\r\n                  <input\r\n                    className='upload_file_input'\r\n                    type='file'\r\n                    accept='image/*'\r\n                    style={{ display: 'none' }}\r\n                    multiple={false}\r\n                    ref={fileInputRef}\r\n                    onChange={(e) => uploadProfileAvatarHandler(e, 'file')}\r\n                  />\r\n                  <FaCloudUploadAlt\r\n                    onClick={(e) => fileInputRef.current.click()}\r\n                  />\r\n                </span>\r\n                {/* Link Upload */}\r\n                <span className='avatar_link_option'>\r\n                  <FaLink onClick={(e) => uploadProfileAvatarHandler('link')} />\r\n                </span>\r\n              </div>\r\n            </div>\r\n            {/* USER FORM */}\r\n            <div className='form_right'>\r\n              <form className='profile_edit__form'>\r\n                {/* NAME */}\r\n                <input\r\n                  className='name_input'\r\n                  placeholder='Name'\r\n                  onChange={(e) => {\r\n                    setNameValue(e.target.value);\r\n                    setHasError(false);\r\n                  }}\r\n                  value={nameValue}\r\n                  autoFocus\r\n                />\r\n\r\n                {/* COLOR */}\r\n                <p>Color</p>\r\n                <input\r\n                  className='color_input'\r\n                  style={{\r\n                    color: color,\r\n                    fontWeight: '500',\r\n                  }}\r\n                  onChange={(e) => setColor(e.target.value)}\r\n                  value={color}\r\n                />\r\n                <button\r\n                  type='button'\r\n                  onClick={() => setChangingColor(!changingColor)}\r\n                  style={{\r\n                    backgroundColor: color,\r\n                  }}\r\n                />\r\n                {changingColor && (\r\n                  <SketchPicker\r\n                    color={color}\r\n                    onChangeComplete={colorChangeHandler}\r\n                    className='profile_color_palette'\r\n                  />\r\n                )}\r\n              </form>\r\n\r\n              {/* USER PERSONAL */}\r\n              <div className='form_personal'>\r\n                <h4>Your Playstyle</h4>\r\n\r\n                {/* CONSOLE */}\r\n                <p className='form_personal_console'>Favorite Console</p>\r\n                <input\r\n                  value={consoleValue}\r\n                  onChange={(e) => {\r\n                    setConsoleValue(e.target.value);\r\n                  }}\r\n                  className='console_input'\r\n                />\r\n\r\n                {/* TITLE */}\r\n                <p className='form_personal_title'>Favorite Title</p>\r\n                <input\r\n                  value={titleValue}\r\n                  className='title_input'\r\n                  onChange={(e) => {\r\n                    setTitleValue(e.target.value);\r\n                  }}\r\n                />\r\n\r\n                {/* GENRE */}\r\n                <div className='genre_dropdown'>\r\n                  <p className='form_personal_genre'>Favorite Genre</p>\r\n                  <button onClick={() => setChangingGenre(!changingGenre)}>\r\n                    {currentGenre !== '' ? `${currentGenre}` : 'Action'}{' '}\r\n                    <FaAngleDown className='genre_arrow' />\r\n                  </button>\r\n                  {/* GENRE DROPDOWN */}\r\n                  {changingGenre && (\r\n                    <div ref={genreRef} className='genre_dropdown_content'>\r\n                      {genreList.map((genre) => (\r\n                        <span\r\n                          onClick={() => genreChangeHandler(genre)}\r\n                          key={genre}\r\n                        >\r\n                          {genre}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* FORM ACTIONS */}\r\n          <div className='form_actions'>\r\n            <button className='save_btn' onClick={saveUserData}>\r\n              Save\r\n            </button>\r\n            <button className='cancel_btn' onClick={props.viewAllProfiles}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {hasError && <p className='create_profile_error'>{error}</p>}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileCreation;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './ProfilesPage.css';\r\nimport defaultAvatar from '../../../assets/images/basic_avatar.png';\r\nimport { MdEdit } from 'react-icons/md';\r\nimport ProfileEditor from './ProfileEditor/ProfileEditor';\r\nimport ProfileCreation from './ProfileEditor/ProfileCreation';\r\n\r\nconst ProfilesPage = (props) => {\r\n  const [editingProfiles, setEditingProfiles] = useState(false);\r\n  const [creatingProfile, setCreatingProfile] = useState(null);\r\n  const [profiles, setProfiles] = useState(null);\r\n\r\n  // Set active profile\r\n  const chooseCurrentProfile = (user) => {\r\n    localStorage.setItem('profile', user.name);\r\n    props.selectProfile(user);\r\n  };\r\n\r\n  // Handler to update application if user edits or creates a profile\r\n  const updateProfiles = () => {\r\n    props.updatingUser();\r\n  };\r\n\r\n  // Handler to determine click function when editing profiles or not\r\n  const profileSelectHandler = (user) => {\r\n    if (!editingProfiles) chooseCurrentProfile(user);\r\n    else {\r\n      setCreatingProfile(user);\r\n    }\r\n  };\r\n\r\n  // Determine what user is selected and grab their profiles\r\n  useEffect(() => {\r\n    setProfiles(props.currentUser.profiles);\r\n  }, [props.currentUser]);\r\n\r\n  if (profiles == null) {\r\n    return;\r\n  }\r\n\r\n  console.log(profiles);\r\n\r\n  if (creatingProfile !== null && creatingProfile !== 'new') {\r\n    return (\r\n      <ProfileEditor\r\n        saveEdit={props.saveEdit}\r\n        currentProfile={creatingProfile}\r\n        viewAllProfiles={() => setCreatingProfile(null)}\r\n        userEmail={props.currentUser.email}\r\n        getProfile={(test) => console.log(test)}\r\n        twitchToken={props.twitchToken}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (creatingProfile !== null && creatingProfile == 'new') {\r\n    return (\r\n      <ProfileCreation\r\n        updateUser={updateProfiles}\r\n        userEmail={props.currentUser.email}\r\n        viewAllProfiles={() => setCreatingProfile(null)}\r\n      />\r\n    );\r\n  }\r\n\r\n  profiles.sort((a, b) => (a.isAdmin ? -1 : b.isAdmin ? 1 : 0));\r\n\r\n  return (\r\n    <div className='profile__page'>\r\n      <div className='profile_edit__header'>\r\n        <h3>GAMEFLIX</h3>\r\n      </div>\r\n      <div className='profile__container'>\r\n        <h3>Who's gaming?</h3>\r\n        <ul className='profile__list'>\r\n          {profiles.map((user) => (\r\n            <li\r\n              key={user.name}\r\n              className='profile__user'\r\n              onClick={() => profileSelectHandler(user)}\r\n            >\r\n              <img\r\n                className={`profile__user_avatar ${\r\n                  editingProfiles && 'editing'\r\n                }`}\r\n                style={{ backgroundColor: user.color }}\r\n                src={user.avatar ? `${user.avatar}` : defaultAvatar}\r\n              />\r\n              {editingProfiles && <MdEdit className='edit-icon' />}\r\n              <span className='profile__user_name'>{user.name}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div className='profile__actions'>\r\n          <button\r\n            className={`profile__manage_btn ${editingProfiles && 'edit_btn'}`}\r\n            onClick={() => setEditingProfiles(!editingProfiles)}\r\n          >\r\n            {editingProfiles ? 'Done' : 'Manage Profiles'}\r\n          </button>\r\n          {profiles.length < 5 && (\r\n            <button\r\n              className='profile__new_btn'\r\n              onClick={() => setCreatingProfile('new')}\r\n            >\r\n              New Profile\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilesPage;\r\n"],"names":["list","selectGame","className","slice","map","game","onClick","src","cover","url","name","props","baseURL","process","currentProfile","isAdmin","useState","loading","setLoading","searchLoading","setSearchLoading","currentProfileName","localStorage","getItem","nameValue","setNameValue","titleRef","useRef","favorite_game","titleValue","setTitleValue","titleId","setTitleId","titleImage","setTitleImage","titleList","setTitleList","consoleRef","favorite_console","consoleValue","setConsoleValue","setStatusMessage","avatar","currentAvatar","setCurrentAvatar","fileInputRef","imgLink","setImgLink","usingImgLink","setUsingImgLink","changingAvatar","setChangingAvatar","changingColor","setChangingColor","color","setColor","genreRef","changingGenre","setChangingGenre","favorite_genre","currentGenre","setCurrentGenre","useEffect","delaySearch","setTimeout","fetchSearchedGame","axios","gameName","token","twitchToken","request","data","clearTimeout","handleEsc","event","keyCode","window","addEventListener","removeEventListener","handleClickOutside","current","contains","target","document","deleteProfileHandler","email","userEmail","saveEdit","viewAllProfiles","console","log","updateAvatar","e","method","FormData","append","files","URL","createObjectURL","saveUserData","preventDefault","userData","originalName","newName","trim","newColor","favoriteGenre","favoriteGame","gameId","imageURL","favoriteConsole","setItem","response","user","profile","message","style","paddingTop","backgroundColor","height","onChange","value","autoFocus","type","onChangeComplete","hex","textAlign","accept","display","multiple","ref","click","placeholder","onBlur","length","id","image_id","undefined","genre","genreChangeHandler","error","setError","hasError","setHasError","startingCreateProfile","setStartingCreateProfile","imageLink","setImageLink","usingLink","setUsingLink","uploadProfileAvatarHandler","JSON","stringify","updateUser","objectFit","defaultAvatar","fontWeight","editingProfiles","setEditingProfiles","creatingProfile","setCreatingProfile","profiles","setProfiles","profileSelectHandler","selectProfile","chooseCurrentProfile","currentUser","ProfileEditor","getProfile","test","updatingUser","sort","a","b"],"sourceRoot":""}